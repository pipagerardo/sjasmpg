SjasmPG Z80 Ensamblador v0.1.0.1 - PipaGerardo      [2017.08.10 - 01:07:50]
Basado en Sjasm v42c de Sjoerd Mastijn - www.xl2s.tk


src\ejemplo.asm
Errores: 0

Línea	Pág:Dirección 	Valor		Línea Completa
-----	--------------	-----		----------------------------------------------------
       1   00:0000                      ;-----------------------------------------------------------
       2   00:0000                      ; DIRECTIVAS PARA EL ENSAMBLADOR ( SjasmPG )
       3   00:0000                      ;-----------------------------------------------------------
       4   00:0000                      ;	OUTPUT ejemplo.rom		; Mejor por línea de comandos
       5   00:0000                      	DEFPAGE 0, $0000, $4000 	; ROM 16K
       6   00:0000                      	DEFPAGE 1, $4000, $8000		; ROM 32K
       7   00:0000  (C000)              	MAP	   $C000		; RAM 16K
       8   00:0000                      ;-----------------------------------------------------------
       9   00:0000                      
      10   00:0000                      ;-----------------------------------------------------------
      11   00:0000                      ; PAGINA 0
      12   00:0000                      ;-----------------------------------------------------------
      13   00:0000  (00)                	PAGE	0
      14   00:0000                      	CODE @	$0000
      15   00:0000  00 00               	DW	$0000		; 2 bytes sin cabecera
      16   00:0002                      
      17   00:0002                      INCLUDE "lib/depletter.asm"
       1.  00:0002                      ;-----------------------------------------------------------
       2.  00:0002                      ;| ------------------------------------------------------- |
       3.  00:0002                      ;| |                    I N I C I O                      | |
       4.  00:0002                      ;| ------------------------------------------------------- |
       5.  00:0002                      ;-----------------------------------------------------------
       6.  00:0002                      ; Pletter v0.5c MSX unpacker - XL2S Entertainment 2008
       7.  00:0002                      ; Copyright (c) 2002-2003 Team Bomba.
       8.  00:0002                      ;-----------------------------------------------------------
       9.  00:0002                      	MODULE DEPLETTER
      10.  00:0002                      MACRO GETBIT
      11.  00:0002                    < 	ADD	A, A
      12.  00:0002                    < 	CALL	Z, PLETTER_getbit
      13.  00:0002                    < ENDMACRO
      14.  00:0002                      MACRO GETBITEXX
      15.  00:0002                    < 	ADD	A,  A
      16.  00:0002                    < 	CALL	Z,  PLETTER_getbitexx
      17.  00:0002                    < ENDMACRO
      18.  00:0002                      ; DEFINE PLETTER_LENGTHINDATA 1
      19.  00:0002                      ;-----------------------------------------------------------
      20.  00:0002                      
      21.  00:0002                      ;-----------------------------------------------------------
      22.  00:0002                      @DEPLETTER:
      23.  00:0002                      ; Entrada:	HL = RAM/ROM source
      24.  00:0002                      ; Salida:	DE = RAM desination
      25.  00:0002                      ; Registros:	Todos
      26.  00:0002                      ; Requisitos:	Ninguno
      27.  00:0002                      ;-----------------------------------------------------------
      28.  00:0002                      IFDEF PLETTER_LENGTHINDATA
      29.  00:0002                    ~ [2]	INC	HL
      30.  00:0002                    ~ ENDIF
      31.  00:0002  7E                  	LD	A, [HL]		; INICIALIZACIÓN
      32.  00:0003  23                  	INC	HL
      33.  00:0004  D9                  	EXX
      34.  00:0005  11 00 00            	LD	DE, 0
      35.  00:0008  87                  	ADD	A, A
      36.  00:0009  3C                  	INC	A
      37.  00:000A  CB 13               	RL	E
      38.  00:000C  87                  	ADD	A, A
      39.  00:000D  CB 13               	RL	E
      40.  00:000F  87                  	ADD 	A, A
      41.  00:0010  CB 13               	RL	E
      42.  00:0012  CB 13               	RL	E
      43.  00:0014  21 A0 00            	LD	HL, PLETTER_modes
      44.  00:0017  19                  	ADD	HL, DE
      45.  00:0018  5E                  	LD	E, [HL]
      46.  00:0019  DD 6B               	LD	IXL, E
      47.  00:001B  23                  	INC	hl
      48.  00:001C  5E                  	LD	E, [HL]
      49.  00:001D  DD 63               	LD	IXH, E
      50.  00:001F  1E 01               	LD	E, 1
      51.  00:0021  D9                  	EXX
      52.  00:0022  FD 21 28 00         	LD	IY, PLETTER_loop
      53.  00:0026                      PLETTER_literal:		; MAIN DEPACK LOOP
      54.  00:0026  ED A0               	LDI
      55.  00:0028                      PLETTER_loop:
      56.  00:0028                      	GETBIT
      56.  00:0028  87                >  ADD A, A
      56.  00:0029  CC 96 00          >  CALL Z, PLETTER_getbit
      57.  00:002C  30 F8               	JR	NC, PLETTER_literal
      58.  00:002E  D9                  	EXX			; COMPRESSED DATA
      59.  00:002F  62                  	LD	H, D
      60.  00:0030  6B                  	LD	L, E
      61.  00:0031                      PLETTER_getlen:
      62.  00:0031                      	GETBITEXX
      62.  00:0031  87                >  ADD A,  A
      62.  00:0032  CC 9A 00          >  CALL Z,  PLETTER_getbitexx
      63.  00:0035  30 1B               	JR	NC, PLETTER_lenok
      64.  00:0037                      PLETTER_lus:
      65.  00:0037                      	GETBITEXX
      65.  00:0037  87                >  ADD A,  A
      65.  00:0038  CC 9A 00          >  CALL Z,  PLETTER_getbitexx
      66.  00:003B  ED 6A               	ADC	HL, HL
      67.  00:003D  D8                  	RET	C
      68.  00:003E                      	GETBITEXX
      68.  00:003E  87                >  ADD A,  A
      68.  00:003F  CC 9A 00          >  CALL Z,  PLETTER_getbitexx
      69.  00:0042  30 0E               	JR	NC, PLETTER_lenok
      70.  00:0044                      	GETBITEXX
      70.  00:0044  87                >  ADD A,  A
      70.  00:0045  CC 9A 00          >  CALL Z,  PLETTER_getbitexx
      71.  00:0048  ED 6A               	ADC	HL, HL
      72.  00:004A  D8                  	RET	C
      73.  00:004B                      	GETBITEXX
      73.  00:004B  87                >  ADD A,  A
      73.  00:004C  CC 9A 00          >  CALL Z,  PLETTER_getbitexx
      74.  00:004F  DA 37 00            	JP	C, PLETTER_lus
      75.  00:0052                      PLETTER_lenok:
      76.  00:0052  23                  	INC	HL
      77.  00:0053  D9                  	EXX
      78.  00:0054  4E                  	LD	C, [HL]
      79.  00:0055  23                  	INC	HL
      80.  00:0056  06 00               	LD	B, 0
      81.  00:0058  CB 79               	BIT	7, C
      82.  00:005A  CA 87 00            	JP	Z, PLETTER_offsok
      83.  00:005D  DD E9               	JP	IX
      84.  00:005F                      PLETTER_mode6:
      85.  00:005F                      	GETBIT
      85.  00:005F  87                >  ADD A, A
      85.  00:0060  CC 96 00          >  CALL Z, PLETTER_getbit
      86.  00:0063  CB 10               	RL	B
      87.  00:0065                      PLETTER_mode5:
      88.  00:0065                      	GETBIT
      88.  00:0065  87                >  ADD A, A
      88.  00:0066  CC 96 00          >  CALL Z, PLETTER_getbit
      89.  00:0069  CB 10               	RL	B
      90.  00:006B                      PLETTER_mode4:
      91.  00:006B                      	GETBIT
      91.  00:006B  87                >  ADD A, A
      91.  00:006C  CC 96 00          >  CALL Z, PLETTER_getbit
      92.  00:006F  CB 10               	RL	B
      93.  00:0071                      PLETTER_mode3:
      94.  00:0071                      	GETBIT
      94.  00:0071  87                >  ADD A, A
      94.  00:0072  CC 96 00          >  CALL Z, PLETTER_getbit
      95.  00:0075  CB 10               	RL	B
      96.  00:0077                      PLETTER_mode2:
      97.  00:0077                      	GETBIT
      97.  00:0077  87                >  ADD A, A
      97.  00:0078  CC 96 00          >  CALL Z, PLETTER_getbit
      98.  00:007B  CB 10               	RL	B
      99.  00:007D                      	GETBIT
      99.  00:007D  87                >  ADD A, A
      99.  00:007E  CC 96 00          >  CALL Z, PLETTER_getbit
     100.  00:0081  30 04               	JR	NC, PLETTER_offsok
     101.  00:0083  B7                  	OR	A
     102.  00:0084  04                  	INC	B
     103.  00:0085  CB B9               	RES	7, C
     104.  00:0087                      PLETTER_offsok:
     105.  00:0087  03                  	INC	BC
     106.  00:0088  E5                  	PUSH	HL
     107.  00:0089  D9                  	EXX
     108.  00:008A  E5                  	PUSH	HL
     109.  00:008B  D9                  	EXX
     110.  00:008C  6B                  	LD	L, E
     111.  00:008D  62                  	LD	H, D
     112.  00:008E  ED 42               	SBC	HL,BC
     113.  00:0090  C1                  	POP	BC
     114.  00:0091  ED B0               	LDIR
     115.  00:0093  E1                  	POP	HL
     116.  00:0094  FD E9               	JP	IY
     117.  00:0096                      PLETTER_getbit:
     118.  00:0096  7E                  	LD	A, [HL]
     119.  00:0097  23                  	INC	HL
     120.  00:0098  17                  	RLA
     121.  00:0099  C9                  	RET
     122.  00:009A                      PLETTER_getbitexx:
     123.  00:009A  D9                  	EXX
     124.  00:009B  7E                  	LD	A, [HL]
     125.  00:009C  23                  	INC	HL
     126.  00:009D  D9                  	EXX
     127.  00:009E  17                  	RLA
     128.  00:009F  C9                  	RET
     129.  00:00A0                      ;-----------------------------------------------------------
     130.  00:00A0                      PLETTER_modes:
     131.  00:00A0  87 00               	DW	PLETTER_offsok
     132.  00:00A2  77 00               	DW	PLETTER_mode2
     133.  00:00A4  71 00               	DW	PLETTER_mode3
     134.  00:00A6  6B 00               	DW	PLETTER_mode4
     135.  00:00A8  65 00               	DW	PLETTER_mode5
     136.  00:00AA  5F 00               	DW	PLETTER_mode6
     137.  00:00AC                      ;-----------------------------------------------------------
     138.  00:00AC                      
     139.  00:00AC                      ;-----------------------------------------------------------
     140.  00:00AC                      @DEPLETTER_VRAM:
     141.  00:00AC                      ; Versión modificada para volcar directamente a VRAM.
     142.  00:00AC                      ; Entrada:	HL = RAM/ROM source
     143.  00:00AC                      ; Salida:	DE = RAM desination
     144.  00:00AC                      ; Registros:	Todos
     145.  00:00AC                      ; Requisitos:	Desactivar interrupciones y la pantalla
     146.  00:00AC                      ;-----------------------------------------------------------
     147.  00:00AC                      IFDEF PLETTER_LENGTHINDATA
     148.  00:00AC                    ~ [2]	INC	HL
     149.  00:00AC                    ~ ENDIF
     150.  00:00AC  7B                  	LD	A, E		; T4
     151.  00:00AD  D3 99               	OUT	[VDP_CMD], A	; T11
     152.  00:00AF  7A                  	LD	A, D		; T4
     153.  00:00B0  E6 3F               	AND	$3F		; T7
     154.  00:00B2  F6 40               	OR	$40		; T7	
     155.  00:00B4  D3 99               	OUT	[VDP_CMD], A	; T11	T29
     156.  00:00B6  7E                  	LD	A, [HL]		; INICIALIZACIÓN
     157.  00:00B7  23                  	INC	HL
     158.  00:00B8  D9                  	EXX
     159.  00:00B9  11 00 00            	LD	DE, 0
     160.  00:00BC  87                  	ADD	A, A
     161.  00:00BD  3C                  	INC	A
     162.  00:00BE  CB 13               	RL	E
     163.  00:00C0  87                  	ADD	A, A
     164.  00:00C1  CB 13               	RL	E
     165.  00:00C3  87                  	ADD 	A, A
     166.  00:00C4  CB 13 CB 13         [2]	RL	E
     167.  00:00C8  21 71 01            	LD	HL, PLETTER_VRAM_modes
     168.  00:00CB  19                  	ADD	HL, DE
     169.  00:00CC  5E                  	LD	E, [HL]
     170.  00:00CD  DD 6B               	LD	IXL, E
     171.  00:00CF  23                  	INC	HL
     172.  00:00D0  5E                  	LD	E, [HL]
     173.  00:00D1  DD 63               	LD	IXH, E
     174.  00:00D3  1E 01               	LD	E, 1
     175.  00:00D5  D9                  	EXX
     176.  00:00D6  FD 21 DF 00         	LD	IY, PLETTER_VRAM_loop
     177.  00:00DA                      PLETTER_VRAM_literal:		; MAIN DEPACK LOOP
     178.  00:00DA  0E 98               	LD	C, VDP_DATA	; T7		$98
     179.  00:00DC  ED A3               	OUTI			; T16
     180.  00:00DE  13                  	INC	DE		; T6
     181.  00:00DF                      PLETTER_VRAM_loop:
     182.  00:00DF                      	GETBIT
     182.  00:00DF  87                >  ADD A, A
     182.  00:00E0  CC 96 00          >  CALL Z, PLETTER_getbit
     183.  00:00E3  30 F5               	JR	NC, PLETTER_VRAM_literal
     184.  00:00E5  D9                  	EXX			; COMPRESSED DATA
     185.  00:00E6  62                  	LD	H, D
     186.  00:00E7  6B                  	LD	L, E
     187.  00:00E8                      PLETTER_VRAM_getlen:
     188.  00:00E8                      	GETBITEXX
     188.  00:00E8  87                >  ADD A,  A
     188.  00:00E9  CC 9A 00          >  CALL Z,  PLETTER_getbitexx
     189.  00:00EC  30 1B               	JR	NC, PLETTER_VRAM_lenok
     190.  00:00EE                      PLETTER_VRAM_lus:
     191.  00:00EE                      	GETBITEXX
     191.  00:00EE  87                >  ADD A,  A
     191.  00:00EF  CC 9A 00          >  CALL Z,  PLETTER_getbitexx
     192.  00:00F2  ED 6A               	ADC	HL, HL
     193.  00:00F4  D8                  	RET	C
     194.  00:00F5                      	GETBITEXX
     194.  00:00F5  87                >  ADD A,  A
     194.  00:00F6  CC 9A 00          >  CALL Z,  PLETTER_getbitexx
     195.  00:00F9  30 0E               	JR	NC, PLETTER_VRAM_lenok
     196.  00:00FB                      	GETBITEXX
     196.  00:00FB  87                >  ADD A,  A
     196.  00:00FC  CC 9A 00          >  CALL Z,  PLETTER_getbitexx
     197.  00:00FF  ED 6A               	ADC	HL, HL
     198.  00:0101  D8                  	RET	C
     199.  00:0102                      	GETBITEXX
     199.  00:0102  87                >  ADD A,  A
     199.  00:0103  CC 9A 00          >  CALL Z,  PLETTER_getbitexx
     200.  00:0106  DA EE 00            	JP	C, PLETTER_VRAM_lus
     201.  00:0109                      PLETTER_VRAM_lenok:
     202.  00:0109  23                  	INC	HL
     203.  00:010A  D9                  	EXX
     204.  00:010B  4E                  	LD	C, [HL]
     205.  00:010C  23                  	INC	HL
     206.  00:010D  06 00               	LD	B, 0
     207.  00:010F  CB 79               	BIT	7, C
     208.  00:0111  CA 3E 01            	JP	Z, PLETTER_VRAM_offsok
     209.  00:0114  DD E9               	JP	IX
     210.  00:0116                      PLETTER_VRAM_mode6:
     211.  00:0116                      	GETBIT
     211.  00:0116  87                >  ADD A, A
     211.  00:0117  CC 96 00          >  CALL Z, PLETTER_getbit
     212.  00:011A  CB 10               	RL	B
     213.  00:011C                      PLETTER_VRAM_mode5:
     214.  00:011C                      	GETBIT
     214.  00:011C  87                >  ADD A, A
     214.  00:011D  CC 96 00          >  CALL Z, PLETTER_getbit
     215.  00:0120  CB 10               	RL	B
     216.  00:0122                      PLETTER_VRAM_mode4:
     217.  00:0122                      	GETBIT
     217.  00:0122  87                >  ADD A, A
     217.  00:0123  CC 96 00          >  CALL Z, PLETTER_getbit
     218.  00:0126  CB 10               	RL	B
     219.  00:0128                      PLETTER_VRAM_mode3:
     220.  00:0128                      	GETBIT
     220.  00:0128  87                >  ADD A, A
     220.  00:0129  CC 96 00          >  CALL Z, PLETTER_getbit
     221.  00:012C  CB 10               	RL	B
     222.  00:012E                      PLETTER_VRAM_mode2:
     223.  00:012E                      	GETBIT
     223.  00:012E  87                >  ADD A, A
     223.  00:012F  CC 96 00          >  CALL Z, PLETTER_getbit
     224.  00:0132  CB 10               	RL	B
     225.  00:0134                      	GETBIT
     225.  00:0134  87                >  ADD A, A
     225.  00:0135  CC 96 00          >  CALL Z, PLETTER_getbit
     226.  00:0138  30 04               	JR	NC, PLETTER_VRAM_offsok
     227.  00:013A  B7                  	OR	A
     228.  00:013B  04                  	INC	B
     229.  00:013C  CB B9               	RES	7, C
     230.  00:013E                      PLETTER_VRAM_offsok:
     231.  00:013E  03                  	INC	BC
     232.  00:013F  E5                  	PUSH	HL
     233.  00:0140  D9                  	EXX
     234.  00:0141  E5                  	PUSH	HL
     235.  00:0142  D9                  	EXX
     236.  00:0143  6B                  	LD	L, E
     237.  00:0144  62                  	LD	H, D
     238.  00:0145  ED 42               	SBC	HL,BC
     239.  00:0147  C1                  	POP	BC
     240.  00:0148  F5                  	PUSH	AF
     241.  00:0149                      .PLETTER_LOOP:
     242.  00:0149  7D                  	LD	A, L		; T4
     243.  00:014A  D3 99               	OUT	[$99], A	; T11	T58
     244.  00:014C  00 00               [2]	NOP			; T8
     245.  00:014E  7C                  	LD	A, H		; T4
     246.  00:014F  D3 99               	OUT	[$99], A	; T11	T31
     247.  00:0151  00 00 00            [3]	NOP			; T12
     248.  00:0154  DB 98               	IN	A, [$98]	; T11	T31
     249.  00:0156  00                  	NOP			; T4
     250.  00:0157  08                  	EX	AF, AF'		; T4
     251.  00:0158  7B                  	LD	A, E		; T4
     252.  00:0159  D3 99               	OUT	[$99], A	; T11	T31
     253.  00:015B  7A                  	LD	A, D		; T4
     254.  00:015C  E6 3F               	AND	$3F		; T7
     255.  00:015E  F6 40               	OR	$40		; T7
     256.  00:0160  D3 99               	OUT	[$99], A	; T11	T29
     257.  00:0162  00 00               [2]	NOP			; T8
     258.  00:0164  08                  	EX	AF, AF'		; T4
     259.  00:0165  D3 98               	OUT	[$98], A	; T11	T31
     260.  00:0167  13                  	INC	DE		; T6
     261.  00:0168  ED A1               	CPI			; T16
     262.  00:016A  EA 49 01            	JP	PE, .PLETTER_LOOP	; T10
     263.  00:016D  F1                  	POP	AF
     264.  00:016E  E1                  	POP	HL
     265.  00:016F  FD E9               	JP	IY
     266.  00:0171                      ;-----------------------------------------------------------
     267.  00:0171                      PLETTER_VRAM_modes:
     268.  00:0171  3E 01               	DW	PLETTER_VRAM_offsok
     269.  00:0173  2E 01               	DW	PLETTER_VRAM_mode2
     270.  00:0175  28 01               	DW	PLETTER_VRAM_mode3
     271.  00:0177  22 01               	DW	PLETTER_VRAM_mode4
     272.  00:0179  1C 01               	DW	PLETTER_VRAM_mode5
     273.  00:017B  16 01               	DW	PLETTER_VRAM_mode6
     274.  00:017D                      ;-----------------------------------------------------------
     275.  00:017D                      
     276.  00:017D                      	ENDMODULE DEPLETTER
     277.  00:017D                      ;-----------------------------------------------------------
     278.  00:017D                      ;| ------------------------------------------------------- |
     279.  00:017D                      ;| |                      F I N                          | |
     280.  00:017D                      ;| ------------------------------------------------------- |
     281.  00:017D                      ;-----------------------------------------------------------
      18   00:017D  (0290)              musica01	INCBIN "snd/SG_boot1.pt3.plet5"
      19   00:040D  (1498)              labbaymsx_chr	INCBIN "grf/phantis.chr.plet5"
      20   00:18A5  (1169)              labbaymsx_clr	INCBIN "grf/phantis.clr.plet5"
      21   00:2A0E                      
      22   00:2A0E                      fin_de_rom0
      23   00:2A0E                      ;-----------------------------------------------------------
      24   00:2A0E                      
      25   00:2A0E                      ;-----------------------------------------------------------
      26   00:2A0E                      ; PAGINA 1
      27   00:2A0E                      ;-----------------------------------------------------------
      28   00:2A0E  (01)                	PAGE	1			; Seleccionamos nuestra ROM
      29   01:4000                      	CODE @	$4000
      30   01:4000  41 42               	DB	$41, $42		; Cartucho ROM
      31   01:4002  F9 47               	DW	INICIO	 		; Dirección de Inicio
      32   01:4004                      	DW	0, 0, 0, 0, 0, 0	; 12 Bytes para completar	
      32   01:4004  00 00 00 00 00 00 00 00 00 00 00 00 
      33   01:4010                      ;-----------------------------------------------------------
      34   01:4010                      ; INCLUIR LIBRERIAS PARA EL USUARIO
      35   01:4010                      ;-----------------------------------------------------------
      36   01:4010                      INCLUDE "lib/bios.asm"		; BIOS
       1.  01:4010                      ;-----------------------------------------------------------
       2.  01:4010                      ;| ------------------------------------------------------- |
       3.  01:4010                      ;| |                    I N I C I O                      | |
       4.  01:4010                      ;| ------------------------------------------------------- |
       5.  01:4010                      ;-----------------------------------------------------------
       6.  01:4010                      
       7.  01:4010                      ;-----------------------------------------------------------
       8.  01:4010                      ;                           I N D E X
       9.  01:4010                      ;-----------------------------------------------------------
      10.  01:4010                      ; Functions:					Line:
      11.  01:4010                      ; 	RSTs					34
      12.  01:4010                      ;	I/O initialisation			167
      13.  01:4010                      ;	VDP access				185
      14.  01:4010                      ;	PSG					396
      15.  01:4010                      ;	Keyboard, CRT, printer input-output	428
      16.  01:4010                      ;	Game I/O access				551
      17.  01:4010                      ;	Cassette input-output routine		582
      18.  01:4010                      ;	Miscellaneous				653
      19.  01:4010                      ; Constants:					758
      20.  01:4010                      ; 	MSX I/O Ports				762
      21.  01:4010                      ; 	VRAM addresses				909
      22.  01:4010                      ; Variables:					1001
      23.  01:4010                      ; 	System Variables located in Main ROM	1005
      24.  01:4010                      ; 	System Variables located in RAM		1034
      25.  01:4010                      ;	System work area			1062
      26.  01:4010                      ;       Hook area				1331
      27.  01:4010                      ;	Program for expansion BIOS calls	1343
      28.  01:4010                      ;	Register Area for new VDP(9938)		1349
      29.  01:4010                      ;	MAIN-ROM slot address			1368
      30.  01:4010                      ;	slot selection register			1377
      31.  01:4010                      ;-----------------------------------------------------------
      32.  01:4010                      
      33.  01:4010                      ;-----------------------------------------------------------
      34.  01:4010                      ;                          RSTs
      35.  01:4010                      ;-----------------------------------------------------------
      36.  01:4010                      
      37.  01:4010                      ;-----------------------------------------------------------
      38.  01:4010  (01:0000)           CHKRAM	= $0000
      39.  01:4010                      ; Function:	tests RAM and sets RAM slot for the system
      40.  01:4010                      ; Input:	none
      41.  01:4010                      ; Output:	none
      42.  01:4010                      ; Registers:	all
      43.  01:4010                      ;-----------------------------------------------------------
      44.  01:4010  (01:0008)           SYNCHR	= $0008
      45.  01:4010                      ; Funtcion:	tests whether the character of [HL] is the specified
      46.  01:4010                      ;		character. If not, it generates SYNTAX ERROR, otherwise it
      47.  01:4010                      ;		goes to CHRGTR (0010H).
      48.  01:4010                      ; Input:	set the character to be tested in [HL] and the character to
      49.  01:4010                      ;		be compared next to RST instruction which calls this routine
      50.  01:4010                      ;		(inline parameter).
      51.  01:4010                      ;
      52.  01:4010                      ;		Example:	LD	HL,LETTER
      53.  01:4010                      ;				RST	08H
      54.  01:4010                      ;				DB	"A"
      55.  01:4010                      ;					 .
      56.  01:4010                      ;					 .
      57.  01:4010                      ;					 .
      58.  01:4010                      ;			LETTER: DB	"B"
      59.  01:4010                      ;
      60.  01:4010                      ; Output:	HL is increased by one and A receives [HL]. When the tested
      61.  01:4010                      ;		character is numerical, the CY flag is set; the end of the
      62.  01:4010                      ;		statement (00H or 3AH) causes the Z flag to be set.
      63.  01:4010                      ; Registers:	AF, HL
      64.  01:4010                      ;-----------------------------------------------------------
      65.  01:4010  (01:000C)           RDSLT	= $000C
      66.  01:4010                      ; Function:	selects the slot corresponding to the value of A and reads
      67.  01:4010                      ;		one byte from the memory of the slot. When this routine is
      68.  01:4010                      ;		called, the interrupt is inhibited and remains inhibited
      69.  01:4010                      ;		even after execution ends.
      70.  01:4010                      ; Input:	A for the slot number.
      71.  01:4010                      ;
      72.  01:4010                      ;		 F000EEPP
      73.  01:4010                      ;		 -   ----
      74.  01:4010                      ;		 |   ||++-------------- Basic slot number (0 to 3)
      75.  01:4010                      ;		 |   ++---------------- Expansion slot number (0 to 3)
      76.  01:4010                      ;		 +--------------------- "1" when using expansion slot
      77.  01:4010                      ;
      78.  01:4010                      ;		HL for the address of memory to be read
      79.  01:4010                      ; Output:	the value of memory which has been read in A
      80.  01:4010                      ; Registers:	AF, BC, DE
      81.  01:4010                      ;-----------------------------------------------------------
      82.  01:4010  (01:0010)           CHRGTR	= $0010
      83.  01:4010                      ; Function:	gets a character (or a token) from BASIC text
      84.  01:4010                      ; Input:	[HL] for the character to be read
      85.  01:4010                      ; Output:	HL is incremented by one and A receives [HL]. When the
      86.  01:4010                      ;		character is numerical, the CY flag is set; the end of the
      87.  01:4010                      ;		statement causes the Z flag to be set.
      88.  01:4010                      ; Registers:	AF, HL
      89.  01:4010                      ;-----------------------------------------------------------
      90.  01:4010  (01:0014)           WRSLT	= $0014
      91.  01:4010                      ; Function:	selects the slot corresponding to the value of A and writes
      92.  01:4010                      ;		one byte to the memory of the slot. When this routine is
      93.  01:4010                      ;		called, interrupts are inhibited and remain so even after
      94.  01:4010                      ;		execution ends.
      95.  01:4010                      ; Input:	specifies a slot with A (same as RDSLT)
      96.  01:4010                      ; Output:	none
      97.  01:4010                      ; Registers:	AF, BC, D
      98.  01:4010                      ;-----------------------------------------------------------
      99.  01:4010  (01:0018)           OUTDO	= $0018
     100.  01:4010                      ; Funtion:	sends the value to current device
     101.  01:4010                      ; Input:	A for the value to be sent
     102.  01:4010                      ;		   sends output to the printer when PTRFLG (F416H) is other
     103.  01:4010                      ;		    than 0
     104.  01:4010                      ;		   sends output to the file specified by PTRFIL (F864H) when
     105.  01:4010                      ;		    PTRFIL is other than 0
     106.  01:4010                      ; Output:	none
     107.  01:4010                      ; Registers:	none
     108.  01:4010                      ;-----------------------------------------------------------
     109.  01:4010  (01:001C)           CALSLT	= $001C
     110.  01:4010                      ;  Function:	calls the routine in another slot (inter-slot call)
     111.  01:4010                      ;  Input:	specify the slot in the 8 high order buts of the IY register
     112.  01:4010                      ;		(same as RDSLT). IX is for the address to be called.
     113.  01:4010                      ;  Output:	depends on the calling routine
     114.  01:4010                      ;  Registers:	depends on the calling routine
     115.  01:4010                      ;-----------------------------------------------------------
     116.  01:4010  (01:0020)           DCOMPR	= $0020
     117.  01:4010                      ;  Function:	compares the contents of HL and DE
     118.  01:4010                      ;  Input:	HL, DE
     119.  01:4010                      ;  Output:	sets the Z flag for HL = DE, CY flag for HL < DE
     120.  01:4010                      ;  Registers:	AF
     121.  01:4010                      ;-----------------------------------------------------------
     122.  01:4010  (01:0024)           ENASLT	= $0024
     123.  01:4010                      ; Function:	selects the slot corresponding to the value of A and enables
     124.  01:4010                      ;		the slot to be used. When this routine is called, interrupts
     125.  01:4010                      ;		are inhibited and remain so even after execution ends.
     126.  01:4010                      ; Input:	specify the slot by A (same as RDSLT)
     127.  01:4010                      ;		specify the page to switch the slot by 2 high order bits of HL
     128.  01:4010                      ; Output:	none
     129.  01:4010                      ; Registers:	all
     130.  01:4010                      ;-----------------------------------------------------------
     131.  01:4010  (01:0028)           GETYPR	= $0028
     132.  01:4010                      ; Function:	returns the type of DAC (decimal accumulator)
     133.  01:4010                      ; Input:	none
     134.  01:4010                      ; Output:	S, Z, P/V flags are changed depending on the type of DAC:
     135.  01:4010                      ;		integer type			single precision real type
     136.  01:4010                      ;		   C = 1				C = 1
     137.  01:4010                      ;		   S = 1 *				S = 0
     138.  01:4010                      ;		   Z = 0				Z = 0;
     139.  01:4010                      ;		   P/V = 1				P/V = 0 *
     140.  01:4010                      ;		string type			double precision real type
     141.  01:4010                      ;		   C = 1				C = 0 *
     142.  01:4010                      ;		   S = 0				S = 0
     143.  01:4010                      ;		   Z = 1 *				Z = 0
     144.  01:4010                      ;		   P/V = 1				P/V = 1
     145.  01:4010                      ;		Types can be recognised by the flag marked by "*".
     146.  01:4010                      ; Registers:	AF
     147.  01:4010                      ;-----------------------------------------------------------
     148.  01:4010  (01:0030)           CALLF	= $0030
     149.  01:4010                      ; Function:	calls the routine in another slot. The following is the
     150.  01:4010                      ;		calling sequence:
     151.  01:4010                      ;			RST	30H
     152.  01:4010                      ;			DB	n	;n is the slot number (same as RDSLT)
     153.  01:4010                      ;			DW	nn	;nn is the called address
     154.  01:4010                      ;
     155.  01:4010                      ; Input:	In the method described above
     156.  01:4010                      ; Output:	depends on the calling routine
     157.  01:4010                      ; Registers:	AF, and other registers depending on the calling routine
     158.  01:4010                      ;-----------------------------------------------------------
     159.  01:4010  (01:0038)           KEYINT	= $0038
     160.  01:4010                      ; Function:	executes the timer interrupt process routine
     161.  01:4010                      ; Input:	none
     162.  01:4010                      ; Output:	none
     163.  01:4010                      ; Register:	none
     164.  01:4010                      ;-----------------------------------------------------------
     165.  01:4010                      
     166.  01:4010                      ;-----------------------------------------------------------
     167.  01:4010                      ;                   I/O initialisation
     168.  01:4010                      ;-----------------------------------------------------------
     169.  01:4010                      
     170.  01:4010                      ;-----------------------------------------------------------
     171.  01:4010  (01:003B)           INITIO	= $003B
     172.  01:4010                      ; Function:	initialises the device
     173.  01:4010                      ; Input:	none
     174.  01:4010                      ; Output:	none
     175.  01:4010                      ; Registers:	all
     176.  01:4010                      ;-----------------------------------------------------------
     177.  01:4010  (01:003E)           INIFNK	= $003E
     178.  01:4010                      ; Function:	initialises the contents of function keys
     179.  01:4010                      ; Input:	none
     180.  01:4010                      ; Output:	none
     181.  01:4010                      ; Registers:	all
     182.  01:4010                      ;-----------------------------------------------------------
     183.  01:4010                      
     184.  01:4010                      ;-----------------------------------------------------------
     185.  01:4010                      ;                        VDP access
     186.  01:4010                      ;-----------------------------------------------------------
     187.  01:4010                      
     188.  01:4010                      ;-----------------------------------------------------------
     189.  01:4010  (01:0041)           DISSCR	= $0041
     190.  01:4010                      ; Function:	inhibits the screen display
     191.  01:4010                      ; Input:	none
     192.  01:4010                      ; Output:	none
     193.  01:4010                      ; Registers:	AF, BC
     194.  01:4010                      ;-----------------------------------------------------------
     195.  01:4010  (01:0044)           ENASCR	= $0044
     196.  01:4010                      ; Function:	displays the screen
     197.  01:4010                      ; Input:	none
     198.  01:4010                      ; Output:	none
     199.  01:4010                      ; Registers:	all
     200.  01:4010                      ;-----------------------------------------------------------
     201.  01:4010  (01:0047)           WRTVDP	= $0047
     202.  01:4010                      ; Function:	writes data in the VDP register
     203.  01:4010                      ; Input:	C for the register number, B for data; the register number
     204.  01:4010                      ;		is 0 to 23 and 32 to 46
     205.  01:4010                      ; Output:	none
     206.  01:4010                      ; Registers:	AF, BC
     207.  01:4010                      ;-----------------------------------------------------------
     208.  01:4010  (01:004A)           RDVRM	= $004A
     209.  01:4010                      ; Function:	reads the contents of VRAM. This is for TMS9918, so only the
     210.  01:4010                      ;		14 low order bits of the VRAM address are valid. To use all
     211.  01:4010                      ;		bits, call NRDVRM.
     212.  01:4010                      ; Input:	HL for VRAM address to be read
     213.  01:4010                      ; Output:	A for the value which was read
     214.  01:4010                      ; Registers:	AF
     215.  01:4010                      ;-----------------------------------------------------------
     216.  01:4010  (01:004D)           WRTVRM	= $004D
     217.  01:4010                      ;Function:	writes data in VRAM. This is for TMS9918, so only the 14 low
     218.  01:4010                      ;		order bits of the VRAM address are valid. To use all bits,
     219.  01:4010                      ;		call NWRVRM.
     220.  01:4010                      ; Input:	HL for VRAM address, A for data
     221.  01:4010                      ; Output:	none
     222.  01:4010                      ; Registers:	AF
     223.  01:4010                      ;-----------------------------------------------------------
     224.  01:4010  (01:0050)           SETRD	= $0050
     225.  01:4010                      ; Function:	sets VRAM address to VDP and enables it to be read. This is
     226.  01:4010                      ;		used to read data from the sequential VRAM area by using the
     227.  01:4010                      ;		address auto-increment function of VDP. This enables faster
     228.  01:4010                      ;		readout than using RDVRM in a loop. This is for TMS9918, so
     229.  01:4010                      ;		only the 14 low order bits of VRAM address are valid. To use
     230.  01:4010                      ;		all bits, call NSETRD.
     231.  01:4010                      ; Input:	HL for VRAM address
     232.  01:4010                      ; Output:	none
     233.  01:4010                      ; Registers:	AF
     234.  01:4010                      ;-----------------------------------------------------------
     235.  01:4010  (01:0053)           SETWRT	= $0053
     236.  01:4010                      ; Function:	sets VRAM address to VDP and enables it to be written. The
     237.  01:4010                      ;		purpose is the same as SETRD. This is for TMS9918, so only
     238.  01:4010                      ;		the 14 low order bits of VRAM address are valid. To use all
     239.  01:4010                      ;		bits, call NSETRD.
     240.  01:4010                      ; Input:	HL for VRAM address
     241.  01:4010                      ; Output:	none
     242.  01:4010                      ; Registers:	AF
     243.  01:4010                      ;-----------------------------------------------------------
     244.  01:4010  (01:0056)           FILVRM	= $0056
     245.  01:4010                      ; Function:	fills the specified VRAM area with the same data. This is for
     246.  01:4010                      ;		TMS9918, so only the 14 low order bits of the VRAM address
     247.  01:4010                      ;		are valid. To use all bits, see BIGFIL.
     248.  01:4010                      ; Input:	HL for VRAM address to begin writing, BC for the length of
     249.  01:4010                      ;		the area to be written, A for data.
     250.  01:4010                      ; Output:	none
     251.  01:4010                      ; Registers:	AF, BC
     252.  01:4010                      ;-----------------------------------------------------------
     253.  01:4010  (01:0059)           LDIRMV	= $0059
     254.  01:4010                      ; Function:	block transfer from VRAM to memory
     255.  01:4010                      ; Input:	HL for source address (VRAM), DE for destination address
     256.  01:4010                      ;		(memory), BC for the length. All bits of the VRAM address
     257.  01:4010                      ;		are valid.
     258.  01:4010                      ; Output:	none
     259.  01:4010                      ; Registers:	all
     260.  01:4010                      ;-----------------------------------------------------------
     261.  01:4010  (01:005C)           LDIRVM	= $005C
     262.  01:4010                      ; Function:	block transfer from memory to VRAM
     263.  01:4010                      ; Input:	HL for source address (memory), DE for destination address
     264.  01:4010                      ;		(VRAM), BC for the length. All bits of the VRAM address are
     265.  01:4010                      ;		valid.
     266.  01:4010                      ; Output:	none
     267.  01:4010                      ; Registers:	all
     268.  01:4010                      ;-----------------------------------------------------------
     269.  01:4010  (01:005F)           CHGMOD	= $005F
     270.  01:4010                      ; Function:	changes the screen mode. The palette is not initialised. To
     271.  01:4010                      ;		initialise it, see CHGMDP in SUB-ROM.
     272.  01:4010                      ; Input:	A for the screen mode (0 to 8)
     273.  01:4010                      ; Output:	none
     274.  01:4010                      ; Registers:	all
     275.  01:4010                      ;-----------------------------------------------------------
     276.  01:4010  (01:0062)           CHGCLR	= $0062
     277.  01:4010                      ; Function:	changes the screen colour
     278.  01:4010                      ; Input:	A for the mode
     279.  01:4010                      ;		   FORCLR (F3E9H) for foreground color
     280.  01:4010                      ;		   BAKCLR (F3EAH) for background color
     281.  01:4010                      ;		   BDRCLR (F3EBH) for border colour
     282.  01:4010                      ; Output:	none
     283.  01:4010                      ; Registers:	all
     284.  01:4010                      ;-----------------------------------------------------------
     285.  01:4010  (01:0066)           NMI	= $0066
     286.  01:4010                      ; Function:	executes NMI (Non-Maskable Interrupt) handling routine
     287.  01:4010                      ; Input:	none
     288.  01:4010                      ; Output:	none
     289.  01:4010                      ; Registers:	none
     290.  01:4010                      ;-----------------------------------------------------------
     291.  01:4010  (01:0069)           CLRSPR	= $0069
     292.  01:4010                      ; Function:	initialises all sprites. The sprite pattern is cleared to
     293.  01:4010                      ;		null, the sprite number to the sprite plane number, the
     294.  01:4010                      ;		sprite colour to the foregtound colour. The vertical location
     295.  01:4010                      ;		of the sprite is set to 209 (mode 0 to 3) or 217
     296.  01:4010                      ;		(mode 4 to 8).
     297.  01:4010                      ; Input:	SCRMOD (FCAFH) for the screen mode
     298.  01:4010                      ; Output:	none
     299.  01:4010                      ; Registers:	all
     300.  01:4010                      ;-----------------------------------------------------------
     301.  01:4010  (01:006C)           INITXT	= $006C
     302.  01:4010                      ; Function:	initialises the screen to TEXT1 mode (40 x 24). In this
     303.  01:4010                      ;		routine, the palette is not initialised. To initialise the
     304.  01:4010                      ;		palette, call INIPLT in SUB-ROM after this call.
     305.  01:4010                      ; Input:	TXTNAM (F3B3H) for the pattern name table
     306.  01:4010                      ;		TXTCGP (F3B7H) for the pattern generator table
     307.  01:4010                      ;		LINL40 (F3AEH) for the length of one line
     308.  01:4010                      ; Output:	none
     309.  01:4010                      ; Registers:	all
     310.  01:4010                      ;-----------------------------------------------------------
     311.  01:4010  (01:006F)           INIT32	= $006F
     312.  01:4010                      ; Function:	initialises the screen to GRAPHIC1 mode (32x24). In this
     313.  01:4010                      ;		routine, the palette is not initialised.
     314.  01:4010                      ; Input:	T32NAM (F3BDH) for the pattern name table
     315.  01:4010                      ;		T32COL (F3BFH) for the colour table
     316.  01:4010                      ;		T32CGP (F3C1H) for the pattern generator table
     317.  01:4010                      ;		T32ATR (F3C3H) for the sprite attribute table
     318.  01:4010                      ;		T32PAT (F3C5H) for the sprite generator table
     319.  01:4010                      ; Output:	none
     320.  01:4010                      ; Registers:	all
     321.  01:4010                      ;-----------------------------------------------------------
     322.  01:4010  (01:0072)           INIGRP	= $0072
     323.  01:4010                      ; Function:	initialises the screen to the high-resolution graphics mode.
     324.  01:4010                      ;		In this routine, the palette is not initialised.
     325.  01:4010                      ; Input:	GRPNAM (F3C7H) for the pattern name table
     326.  01:4010                      ;		GRPCOL (F3C9H) for the colour table
     327.  01:4010                      ;		GRPCGP (F3CBH) for the pattern generator table
     328.  01:4010                      ;		GRPATR (F3CDH) for the sprite attribute table
     329.  01:4010                      ;		GRPPAT (F3CFH) for the sprite generator table
     330.  01:4010                      ; Output:	none
     331.  01:4010                      ; Registers:	all
     332.  01:4010                      ;-----------------------------------------------------------
     333.  01:4010  (01:0075)           INIMLT	= $0075
     334.  01:4010                      ; Function:	initialises the screen to MULTI colour mode. In this routine,
     335.  01:4010                      ;		the palette is not initialised.
     336.  01:4010                      ; Input:	MLTNAM (F3D1H) for the pattern name table
     337.  01:4010                      ;		MLTCOL (F3D3H) for the colour table
     338.  01:4010                      ;		MLTCGP (F3D5H) for the pattern generator table
     339.  01:4010                      ;		MLTATR (F3D7H) for the sprite attribute table
     340.  01:4010                      ;		MLTPAT (F3D9H) for the sprite generator table
     341.  01:4010                      ; Output:	none
     342.  01:4010                      ; Registers:	all
     343.  01:4010                      ;-----------------------------------------------------------
     344.  01:4010  (01:0078)           SETTXT	= $0078
     345.  01:4010                      ; Function:	set only VDP in TEXT1 mode (40x24)
     346.  01:4010                      ; Input:	same as INITXT
     347.  01:4010                      ; Output:	none
     348.  01:4010                      ; Registers:	all
     349.  01:4010                      ;-----------------------------------------------------------
     350.  01:4010  (01:007B)           SETT32	= $007B
     351.  01:4010                      ; Function:	set only VDP in GRAPHIC1 mode (32x24)
     352.  01:4010                      ; Input:	same as INIT32
     353.  01:4010                      ; Output:	none
     354.  01:4010                      ; Registers:	all
     355.  01:4010                      ;-----------------------------------------------------------
     356.  01:4010  (01:007E)           SETGRP	= $007E
     357.  01:4010                      ; Function:	set only VDP in GRAPHIC2 mode
     358.  01:4010                      ; Input:	same as INIGRP
     359.  01:4010                      ; Output:	none
     360.  01:4010                      ; Registers:	all
     361.  01:4010                      ;-----------------------------------------------------------
     362.  01:4010  (01:0081)           SETMLT	= $0081
     363.  01:4010                      ; Function:	set only VDP in MULTI colour mode
     364.  01:4010                      ; Input:	same as INIMLT
     365.  01:4010                      ; Output:	none
     366.  01:4010                      ; Registers:	all
     367.  01:4010                      ;-----------------------------------------------------------
     368.  01:4010  (01:0084)           CALPAT	= $0084
     369.  01:4010                      ; Funtion:	returns the address of the sprite generator table
     370.  01:4010                      ; Input:	A for the sprite number
     371.  01:4010                      ; Output:	HL for the address
     372.  01:4010                      ; Registers:	AF, DE, HL
     373.  01:4010                      ;-----------------------------------------------------------
     374.  01:4010  (01:0087)           CALATR	= $0087
     375.  01:4010                      ; Function:	returns the address of the sprite attribute table
     376.  01:4010                      ; Input:	A for the sprite number
     377.  01:4010                      ; Output:	HL for the address
     378.  01:4010                      ; Registers:	AF, DE, HL
     379.  01:4010                      ;-----------------------------------------------------------
     380.  01:4010  (01:008A)           GSPSIZ	= $008A
     381.  01:4010                      ; Function:	returns the current sprite size
     382.  01:4010                      ; Input:	none
     383.  01:4010                      ; Output:	A for the sprite size (in bytes). Only when the size is
     384.  01:4010                      ;		16 x 16, the CY flag is set; otherwise the CY flag is reset.
     385.  01:4010                      ; Registers:	AF
     386.  01:4010                      ;-----------------------------------------------------------
     387.  01:4010  (01:008D)           GRPPRT	= $008D
     388.  01:4010                      ; Function:	displays a character on the graphic screen
     389.  01:4010                      ; Input:	A for the character code. When the screen mode is 0 to 8,
     390.  01:4010                      ;		set the logical operation code in LOGOPR (FB02H).
     391.  01:4010                      ; Output:	none
     392.  01:4010                      ; Registers:	none
     393.  01:4010                      ;-----------------------------------------------------------
     394.  01:4010                      
     395.  01:4010                      ;-----------------------------------------------------------
     396.  01:4010                      ;                     PSG
     397.  01:4010                      ;-----------------------------------------------------------
     398.  01:4010                      
     399.  01:4010                      ;-----------------------------------------------------------
     400.  01:4010  (01:0090)           GICINI	= $0090
     401.  01:4010                      ; Function:	initialises PSG and sets the initial value for the PLAY
     402.  01:4010                      ;		statement
     403.  01:4010                      ; Input:	none
     404.  01:4010                      ; Output:	none
     405.  01:4010                      ; Registers:	all
     406.  01:4010                      ;-----------------------------------------------------------
     407.  01:4010  (01:0093)           WRTPSG	= $0093
     408.  01:4010                      ; Function:	writes data in the PSG register
     409.  01:4010                      ; Input:	A for PSG register number, E for data
     410.  01:4010                      ; Output:	none
     411.  01:4010                      ; Registers:	none
     412.  01:4010                      ;-----------------------------------------------------------
     413.  01:4010  (01:0096)           RDPSG	= $0096
     414.  01:4010                      ; Function:	reads the PSG register value
     415.  01:4010                      ; Input:	A for PSG register number
     416.  01:4010                      ; Output:	A for the value which was read
     417.  01:4010                      ; Registers:	none
     418.  01:4010                      ;-----------------------------------------------------------
     419.  01:4010  (01:0099)           STRTMS	= $0099
     420.  01:4010                      ; Function:	tests whether the PLAY statement is being executed as a
     421.  01:4010                      ;		background task. If not, begins to execute the PLAY statement
     422.  01:4010                      ; Input:	none
     423.  01:4010                      ; Output:	none
     424.  01:4010                      ; Registers:	all
     425.  01:4010                      ;-----------------------------------------------------------
     426.  01:4010                      
     427.  01:4010                      ;-----------------------------------------------------------
     428.  01:4010                      ;           Keyboard, CRT, printer input-output
     429.  01:4010                      ;-----------------------------------------------------------
     430.  01:4010                      
     431.  01:4010                      ;-----------------------------------------------------------
     432.  01:4010  (01:009C)           CHSNS	= $009C
     433.  01:4010                      ; Function:	tests the status of the keyboard buffer
     434.  01:4010                      ; Input:	none
     435.  01:4010                      ; Output:	the Z flag is set when the buffer is empty, otherwise the
     436.  01:4010                      ;		Z flag is reset
     437.  01:4010                      ; Registers:	AF
     438.  01:4010                      ;-----------------------------------------------------------
     439.  01:4010  (01:009F)           CHGET	= $009F
     440.  01:4010                      ; Function:	one character input (waiting)
     441.  01:4010                      ; Input:	none
     442.  01:4010                      ; Output:	A for the code of the input character
     443.  01:4010                      ; Registers:	AF
     444.  01:4010                      ;-----------------------------------------------------------
     445.  01:4010  (01:00A2)           CHPUT	= $00A2
     446.  01:4010                      ; Function:	displays the character
     447.  01:4010                      ; Input:	A for the character code to be displayed
     448.  01:4010                      ; Output:	none
     449.  01:4010                      ; Registers:	none
     450.  01:4010                      ;-----------------------------------------------------------
     451.  01:4010  (01:00A5)           LPTOUT	= $00A5
     452.  01:4010                      ; Function:	sends one character to the printer
     453.  01:4010                      ; Input:	A for the character code to be sent
     454.  01:4010                      ; Output:	if failed, the CY flag is set
     455.  01:4010                      ; Registers:	F
     456.  01:4010                      ;-----------------------------------------------------------
     457.  01:4010  (01:00A8)           LPTSTT	= $00A8
     458.  01:4010                      ; Function:	tests the printer status
     459.  01:4010                      ; Input:	none
     460.  01:4010                      ; Output:	when A is 255 and the Z flag is reset, the printer is READY.
     461.  01:4010                      ;		when A is 0 and the Z flag is set, the printer is NOT READY.
     462.  01:4010                      ; Registers:	AF
     463.  01:4010                      ;-----------------------------------------------------------
     464.  01:4010  (01:00AB)           CNVCHR	= $00AB
     465.  01:4010                      ; Function:	test for the graphic header and transforms the code
     466.  01:4010                      ; Input:	A for the character code
     467.  01:4010                      ; Output:	the CY flag is reset to not the graphic header
     468.  01:4010                      ;		the CY flag and the Z flag are set to the transformed code
     469.  01:4010                      ;		is set in A
     470.  01:4010                      ;		the CY flag is set and the CY flag is reset to the
     471.  01:4010                      ;		untransformed code is set in A
     472.  01:4010                      ;  Registers:	AF
     473.  01:4010                      ;-----------------------------------------------------------
     474.  01:4010  (01:00AE)           PINLIN	= $00AE
     475.  01:4010                      ; Function:	stores in the specified buffer the character codes input
     476.  01:4010                      ;		until the return key or STOP key is pressed.
     477.  01:4010                      ; Input:	none
     478.  01:4010                      ; Output:	HL for the starting address of the buffer minus 1, the CY
     479.  01:4010                      ;		flag is set only when it ends with the STOP key.
     480.  01:4010                      ; Registers:	all
     481.  01:4010                      ;-----------------------------------------------------------
     482.  01:4010  (01:00B1)           INLIN	= $00B1
     483.  01:4010                      ; Function:	same as PINLIN except that AUTFLG (F6AAH) is set
     484.  01:4010                      ; Input:	none
     485.  01:4010                      ; Output:	HL for the starting address of the buffer minus 1, the CY
     486.  01:4010                      ;		flag is set only when it ends with the STOP key.
     487.  01:4010                      ; Registers:	all
     488.  01:4010                      ;-----------------------------------------------------------
     489.  01:4010  (01:00B4)           QINLIN	= $00B4
     490.  01:4010                      ; Function:	executes INLIN with displaying "?" and one space
     491.  01:4010                      ; Input:	none
     492.  01:4010                      ; Output:	HL for the starting address of the buffer minus 1, the CY
     493.  01:4010                      ;		flag is set only when it ends with the STOP key.
     494.  01:4010                      ; Registers:	all
     495.  01:4010                      ;-----------------------------------------------------------
     496.  01:4010  (01:00B7)           BREAKX	= $00B7
     497.  01:4010                      ; Function:	tests Ctrl-STOP key. In this routine, interrupts are
     498.  01:4010                      ;		inhibited.
     499.  01:4010                      ; Input:	none
     500.  01:4010                      ; Output:	the CY flag is set when pressed
     501.  01:4010                      ; Registers:	AF
     502.  01:4010                      ;-----------------------------------------------------------
     503.  01:4010  (01:00BA)           ISCNTC	= $00BA
     504.  01:4010  (01:00BD)           CKCNTC	= $00BD
     505.  01:4010                      ;-----------------------------------------------------------
     506.  01:4010  (01:00C0)           BEEP	= $00C0
     507.  01:4010                      ; Function:	generates BEEP
     508.  01:4010                      ; Input:	none
     509.  01:4010                      ; Output:	none
     510.  01:4010                      ; Registers:	all
     511.  01:4010                      ;-----------------------------------------------------------
     512.  01:4010  (01:00C3)           CLS	= $00C3
     513.  01:4010                      ; Function:	clears the screen
     514.  01:4010                      ; Input:	set zero flag
     515.  01:4010                      ; Output:	none
     516.  01:4010                      ; Registers:	AF, BC, DE
     517.  01:4010                      ;-----------------------------------------------------------
     518.  01:4010  (01:00C6)           POSIT	= $00C6
     519.  01:4010                      ; Function:	moves the cursor
     520.  01:4010                      ; Input:	H for the X-coordinate of the cursor, L for the Y-coordinate
     521.  01:4010                      ; Output:	none
     522.  01:4010                      ; Registers:	AF
     523.  01:4010                      ;-----------------------------------------------------------
     524.  01:4010  (01:00C9)           FNKSB	= $00C9
     525.  01:4010                      ; Function:	tests whether the function key display is active (FNKFLG).
     526.  01:4010                      ;		If so, displays them, otherwise erases them.
     527.  01:4010                      ; Input:	FNKFLG (FBCEH)
     528.  01:4010                      ; Output:	none
     529.  01:4010                      ; Registers:	all
     530.  01:4010                      ;-----------------------------------------------------------
     531.  01:4010  (01:00CC)           ERAFNK	= $00CC
     532.  01:4010                      ; Function:	erases the function key display
     533.  01:4010                      ; Input:	none
     534.  01:4010                      ; Output:	none
     535.  01:4010                      ; Registers:	all
     536.  01:4010                      ;-----------------------------------------------------------
     537.  01:4010  (01:00CF)           DSPFNK	= $00CF
     538.  01:4010                      ; Function:	displays the function keys
     539.  01:4010                      ; Input:	none
     540.  01:4010                      ; Output:	none
     541.  01:4010                      ; Registers:	all
     542.  01:4010                      ;-----------------------------------------------------------
     543.  01:4010  (01:00D2)           TOTEXT	= $00D2
     544.  01:4010                      ; Function:	forces the screen to be in the text mode
     545.  01:4010                      ; Input:	none
     546.  01:4010                      ; Output:	none
     547.  01:4010                      ; Registers:	all
     548.  01:4010                      ;-----------------------------------------------------------
     549.  01:4010                      
     550.  01:4010                      ;-----------------------------------------------------------
     551.  01:4010                      ;                     Game I/O access
     552.  01:4010                      ;-----------------------------------------------------------
     553.  01:4010                      
     554.  01:4010                      ;-----------------------------------------------------------
     555.  01:4010  (01:00D5)           GTSTCK	= $00D5
     556.  01:4010                      ; Function:	returns the joystick status
     557.  01:4010                      ; Input:	A for the joystick number to be tested
     558.  01:4010                      ; Output:	A for the joystick direction
     559.  01:4010                      ; Registers:	all
     560.  01:4010                      ;-----------------------------------------------------------
     561.  01:4010  (01:00D8)           GTTRIG	= $00D8
     562.  01:4010                      ; Function:	returns the trigger button status
     563.  01:4010                      ; Input:	A for the trigger button number to be tested
     564.  01:4010                      ; Output:	When A is 0, the trigger button is not being pressed.
     565.  01:4010                      ;		When A is FFH, the trigger button is being pressed.
     566.  01:4010                      ; Registers:	AF
     567.  01:4010                      ;-----------------------------------------------------------
     568.  01:4010  (01:00DB)           GTPAD	= $00DB
     569.  01:4010                      ; Function:	returns the touch pad status
     570.  01:4010                      ; Input:	A for the touch pad number to be tested
     571.  01:4010                      ; Output:	A for the value
     572.  01:4010                      ; Registers:	all
     573.  01:4010                      ;-----------------------------------------------------------
     574.  01:4010  (01:00DE)           GTPDL	= $00DE
     575.  01:4010                      ; Function:	returns the paddle value
     576.  01:4010                      ; Input:	A for the paddle number
     577.  01:4010                      ; Output:	A for the value
     578.  01:4010                      ; Registers:	all
     579.  01:4010                      ;-----------------------------------------------------------
     580.  01:4010                      
     581.  01:4010                      ;-----------------------------------------------------------
     582.  01:4010                      ;               Cassette input-output routine
     583.  01:4010                      ;-----------------------------------------------------------
     584.  01:4010                      
     585.  01:4010                      ;-----------------------------------------------------------
     586.  01:4010  (01:00E1)           TAPION	= $00E1
     587.  01:4010                      ; Function:	reads the header block after turning the cassette motor ON.
     588.  01:4010                      ; Input:	none
     589.  01:4010                      ; Output:	if failed, the CY flag is set
     590.  01:4010                      ; Registers:	all
     591.  01:4010                      ;-----------------------------------------------------------
     592.  01:4010  (01:00E4)           TAPIN	= $00E4
     593.  01:4010                      ; Function:	reads data from the tape
     594.  01:4010                      ; Input:	none
     595.  01:4010                      ; Output:	A for data. If failed, the CY flag is set.
     596.  01:4010                      ; Registers:	all
     597.  01:4010                      ;-----------------------------------------------------------
     598.  01:4010  (01:00E7)           TAPIOF	= $00E7
     599.  01:4010                      ; Function:	stops reading the tape
     600.  01:4010                      ; Input:	none
     601.  01:4010                      ; Output:	none
     602.  01:4010                      ; Registers:	none
     603.  01:4010                      ;-----------------------------------------------------------
     604.  01:4010  (01:00EA)           TAPOON	= $00EA
     605.  01:4010                      ; Function:	writes the header block after turning the cassette motor ON
     606.  01:4010                      ; Input:	A = 0, short header; A <> 0, long header
     607.  01:4010                      ; Output:	if failed, the CY flag is set
     608.  01:4010                      ; Registers:	all
     609.  01:4010                      ;-----------------------------------------------------------
     610.  01:4010  (01:00ED)           TAPOUT	= $00ED
     611.  01:4010                      ; Function:	writes data on the tape
     612.  01:4010                      ; Input:	A for data
     613.  01:4010                      ; Output:	if failed, the CY flag is set
     614.  01:4010                      ; Registers:	all
     615.  01:4010                      ;-----------------------------------------------------------
     616.  01:4010  (01:00F0)           TAPOOF	= $00F0
     617.  01:4010                      ; Function:	stops writing to the tape
     618.  01:4010                      ; Input:	A for data
     619.  01:4010                      ; Output:	if failed, the CY flag is set
     620.  01:4010                      ; Registers:	all
     621.  01:4010                      ;-----------------------------------------------------------
     622.  01:4010  (01:00F3)           STMOTR	= $00F3
     623.  01:4010                      ; Function:	sets the cassette motor action
     624.  01:4010                      ; Input:	A = 0		->	stop
     625.  01:4010                      ;		A = 1		->	start
     626.  01:4010                      ;		A = 0FFH	->	reverse the current action
     627.  01:4010                      ; Output:	none
     628.  01:4010                      ; Registers:	AF
     629.  01:4010                      ;-----------------------------------------------------------
     630.  01:4010  (01:00F6)           LFTQ	= $00F6
     631.  01:4010  (01:00F9)           PUTQ	= $00F9
     632.  01:4010  (01:00FC)           RIGHTC	= $00FC
     633.  01:4010  (01:00FF)           LEFTC	= $00FF
     634.  01:4010  (01:0102)           UPC	= $0102
     635.  01:4010  (01:0105)           TUPC	= $0105
     636.  01:4010  (01:0108)           DOWNC	= $0108
     637.  01:4010  (01:010B)           TDOWNC	= $010B
     638.  01:4010  (01:010E)           SCALXY	= $010E
     639.  01:4010  (01:0111)           MAPXY	= $0111
     640.  01:4010  (01:0114)           FETCHC	= $0114
     641.  01:4010  (01:0117)           STOREC	= $0117
     642.  01:4010  (01:011A)           SETATR	= $011A
     643.  01:4010  (01:011D)           READC	= $011D
     644.  01:4010  (01:0120)           SETC	= $0120
     645.  01:4010  (01:0123)           NSETCX	= $0123
     646.  01:4010  (01:0126)           GTASPC	= $0126
     647.  01:4010  (01:0129)           PNTINI	= $0129
     648.  01:4010  (01:012C)           SCANR	= $012C
     649.  01:4010  (01:012F)           SCANL	= $012F
     650.  01:4010                      ;-----------------------------------------------------------
     651.  01:4010                      
     652.  01:4010                      ;-----------------------------------------------------------
     653.  01:4010                      ;                     Miscellaneous
     654.  01:4010                      ;-----------------------------------------------------------
     655.  01:4010                      
     656.  01:4010                      ;-----------------------------------------------------------
     657.  01:4010  (01:0132)           CHGCAP	= $0132
     658.  01:4010                      ; Function:	alternates the CAP lamp status
     659.  01:4010                      ; Input:	A = 0		->	lamp off
     660.  01:4010                      ;		A <>0		->	lamp on
     661.  01:4010                      ; Output:	none
     662.  01:4010                      ; Registers:	AF
     663.  01:4010                      ;-----------------------------------------------------------
     664.  01:4010  (01:0135)           CHGSND	= $0135
     665.  01:4010                      ; Function:	alternates the 1-bit sound port status
     666.  01:4010                      ; Input:	A = 0		->	OFF
     667.  01:4010                      ;		A <>0		->	ON
     668.  01:4010                      ; Output:	none
     669.  01:4010                      ; Registers:	AF
     670.  01:4010                      ;-----------------------------------------------------------
     671.  01:4010  (01:0138)           RSLREG	= $0138
     672.  01:4010                      ; Function:	reads the contents of current output to the basic slot
     673.  01:4010                      ;		register
     674.  01:4010                      ; Input:	none
     675.  01:4010                      ; Output:	A for the value which was read
     676.  01:4010                      ; Registers:	A
     677.  01:4010                      ;-----------------------------------------------------------
     678.  01:4010  (01:013B)           WSLREG	= $013B
     679.  01:4010                      ; Function:	writes to the primary slot register
     680.  01:4010                      ; Input:	A for the value to be written
     681.  01:4010                      ; Output:	none
     682.  01:4010                      ; Registers:	none
     683.  01:4010                      ;-----------------------------------------------------------
     684.  01:4010  (01:013E)           RDVDP	= $013E
     685.  01:4010                      ; Function:	reads VDP status register
     686.  01:4010                      ; Input:	none
     687.  01:4010                      ; Output:	A for the value which was read
     688.  01:4010                      ; Registers:	A
     689.  01:4010                      ;-----------------------------------------------------------
     690.  01:4010  (01:0141)           SNSMAT	= $0141
     691.  01:4010                      ; Function:	reads the value of the specified line from the keyboard
     692.  01:4010                      ;		matrix
     693.  01:4010                      ; Input:	A for the specified line
     694.  01:4010                      ; Output:	A for data (the bit corresponding to the pressed key will
     695.  01:4010                      ;		be 0)
     696.  01:4010                      ; Registers:	AF, C
     697.  01:4010                      ;-----------------------------------------------------------
     698.  01:4010  (01:0144)           PHYDIO	= $0144
     699.  01:4010                      ; Function:	Physical input/output for disk devices
     700.  01:4010                      ; Input:	A for the drive number (0 = A:, 1 = B:,...)
     701.  01:4010                      ;		B for the number of sector to be read from or written to
     702.  01:4010                      ;		C for the media ID
     703.  01:4010                      ;		DE for the first sector number to be read rom or written to
     704.  01:4010                      ;		HL for the startinga address of the RAM buffer to be
     705.  01:4010                      ;		   read from or written to specified sectors
     706.  01:4010                      ;		CY set for sector writing; reset for sector reading
     707.  01:4010                      ; Output:	CY set if failed
     708.  01:4010                      ;		B for the number of sectors actually read or written
     709.  01:4010                      ;		A for the error code (only if CY set):
     710.  01:4010                      ;			0 = Write protected
     711.  01:4010                      ;			2 = Not ready
     712.  01:4010                      ;			4 = Data error
     713.  01:4010                      ;			6 = Seek error
     714.  01:4010                      ;			8 = Record not found
     715.  01:4010                      ;		       10 = Write error
     716.  01:4010                      ;		       12 = Bad parameter
     717.  01:4010                      ;		       14 = Out of memory
     718.  01:4010                      ;		       16 = Other error
     719.  01:4010                      ;  Registers:	all
     720.  01:4010                      ;-----------------------------------------------------------
     721.  01:4010  (01:0147)           FORMAT	= $0147
     722.  01:4010                      ;-----------------------------------------------------------
     723.  01:4010  (01:014A)           ISFLIO	= $014A
     724.  01:4010                      ; Function:	tests whether the device is active
     725.  01:4010                      ; Input:	none
     726.  01:4010                      ; Output:	A = 0		->	active
     727.  01:4010                      ;		A <>0		->	inactive
     728.  01:4010                      ; Registers:	AF
     729.  01:4010                      ;-----------------------------------------------------------
     730.  01:4010  (01:014D)           OUTDLP	= $014D
     731.  01:4010                      ; Function:	printer output.Different from LPTOUT in the following points:
     732.  01:4010                      ;		     1. TAB is expanded to spaces
     733.  01:4010                      ;		     2. For non-MSX printers, hiragana is transformed to
     734.  01:4010                      ;			katakana and graphic characters are transformed to
     735.  01:4010                      ;			1-byte characters.
     736.  01:4010                      ;		     3. If failed, device I/O error occurs.
     737.  01:4010                      ; Input:	A for data
     738.  01:4010                      ; Output:	none
     739.  01:4010                      ; Registers:	F
     740.  01:4010                      ;-----------------------------------------------------------
     741.  01:4010  (01:0150)           GETVCP	= $0150
     742.  01:4010  (01:0153)           GETVC2	= $0153
     743.  01:4010                      ;-----------------------------------------------------------
     744.  01:4010  (01:0156)           KILBUF	= $0156
     745.  01:4010                      ; Function:	clears the keyboard buffer
     746.  01:4010                      ; Input:	none
     747.  01:4010                      ; Output:	none
     748.  01:4010                      ; Registers:	HL
     749.  01:4010                      ;-----------------------------------------------------------
     750.  01:4010  (01:0159)           CALBAS	= $0159
     751.  01:4010                      ; Function:	executes inter-slot call to the routine in BASIC interpreter
     752.  01:4010                      ; Input:	IX for the calling address
     753.  01:4010                      ; Output:	depends on the called routine
     754.  01:4010                      ; Registers:	depends on the called routine
     755.  01:4010                      ;-----------------------------------------------------------
     756.  01:4010                      
     757.  01:4010                      ;---------------------------------------------------------
     758.  01:4010                      ; CONSTANTS
     759.  01:4010                      ;---------------------------------------------------------
     760.  01:4010                      
     761.  01:4010                      ;---------------------------------------------------------
     762.  01:4010                      ; MSX I/O Ports
     763.  01:4010                      ;---------------------------------------------------------
     764.  01:4010                      
     765.  01:4010                      ;---------------------------------------------------------
     766.  01:4010                      ; 00H to 3FH	user defined
     767.  01:4010                      ;---------------------------------------------------------
     768.  01:4010                      ; 40H to 7FH	reserved
     769.  01:4010                      ;---------------------------------------------------------
     770.  01:4010                      ; 80H to 87H	for RS-232C
     771.  01:4010                      ;      80H	8251 data
     772.  01:4010                      ;      81H	8251 status/command
     773.  01:4010                      ;      82H	status read/interrupt mask
     774.  01:4010                      ;      83H	unused
     775.  01:4010                      ;      84H	8253
     776.  01:4010                      ;      85H	8253
     777.  01:4010                      ;      86H	8253
     778.  01:4010                      ;      87H	8253
     779.  01:4010                      ;---------------------------------------------------------
     780.  01:4010                      ; 88H to 8BH	VDP (9938) I/O port for MSX1 adaptor
     781.  01:4010                      ;		This is V9938 I/O for MSX1. To access VDP directly,
     782.  01:4010                      ;		examine 06H and 07H of MAIN-ROM to confirm the port
     783.  01:4010                      ;		address
     784.  01:4010                      ;---------------------------------------------------------
     785.  01:4010                      ; 8CH to 8DH	for the modem
     786.  01:4010                      ;---------------------------------------------------------
     787.  01:4010                      ; 8EH to 8FH	reserved
     788.  01:4010                      ;---------------------------------------------------------
     789.  01:4010                      ; 90H to 91H	printer port
     790.  01:4010                      ;      90H	bit 0: strobe output (write)
     791.  01:4010                      ;		bit 1: status input (read)
     792.  01:4010                      ;      91H	data to be printed
     793.  01:4010                      ;---------------------------------------------------------
     794.  01:4010                      ; 92H to 97H	reserved
     795.  01:4010                      ;---------------------------------------------------------
     796.  01:4010                      ; VDP / Video Display Processor / TMS9918A / v9938 / v9958
     797.  01:4010  (01:0098)           VDP_DATA	=	$98	; PORT [$88] | [$98] VRAM read/write
     798.  01:4010  (01:0099)           VDP_CMD		=	$99	; PORT [$89] | [$99] VDP registers read/write
     799.  01:4010  (01:009A)           VDP_PAL		= 	$9A 	; Palette registers write
     800.  01:4010  (01:009B)           VDP_IND		= 	$9B 	; Indirect register write
     801.  01:4010                      ;---------------------------------------------------------
     802.  01:4010                      ; 9CH to 9FH	reserved
     803.  01:4010                      ;---------------------------------------------------------
     804.  01:4010                      ; PSG / AY-3-8910 (Programmable Sound Generator)
     805.  01:4010  (01:00A0)           ioPSG0	=	$A0	; (write) Register write port
     806.  01:4010  (01:00A1)           ioPSG1	=	$A1	; (write) Value write port
     807.  01:4010  (01:00A2)           ioPSG2	=	$A2	; (read) Value read port
     808.  01:4010                      ;---------------------------------------------------------
     809.  01:4010                      ; PPI / Programmable Peripheral Interface / 8255
     810.  01:4010  (01:00A8)           ioPPI_A	=	$A8	; PPI-register A / Primary slot select register.
     811.  01:4010  (01:00A9)           ioPPI_B	=	$A9 	; (read) PPI-register B  /  Keyboard matrix row input register.
     812.  01:4010  (01:00AA)           ioPPI_C	=	$AA	; PPI-register C / Keyboard and cassette interface.
     813.  01:4010  (01:00AB)           ioPPI_D	=	$AB 	; (write) /	Command register.
     814.  01:4010                      ;---------------------------------------------------------
     815.  01:4010                      ; A4H to A7H	reserved
     816.  01:4010                      ;---------------------------------------------------------
     817.  01:4010                      ; A8H to ABH	parallel port (8255)
     818.  01:4010                      ;      A8H	port A
     819.  01:4010                      ;      A9H	port B
     820.  01:4010                      ;      AAH	port C
     821.  01:4010                      ;      ABH	mode set
     822.  01:4010                      ;---------------------------------------------------------
     823.  01:4010                      ; ACH to AFH	MSX engine (one chip MSX I/O)
     824.  01:4010                      ;---------------------------------------------------------
     825.  01:4010                      ; B0H to B3H	expansion memory (SONY specification) (8255)
     826.  01:4010                      ;      A8H	port A, address (A0 to A7)
     827.  01:4010                      ;      A9H	port B, address (A8 to A10, A13 to A15), control R/"
     828.  01:4010                      ;      AAH	port C, address (A11 to A12), data (D0 - D7)
     829.  01:4010                      ;      ABH	mode set
     830.  01:4010                      ;---------------------------------------------------------
     831.  01:4010                      ; B4H to B5H	CLOCK-IC (RP-5C01)
     832.  01:4010                      ;      B4H	address latch
     833.  01:4010                      ;      B5H	data
     834.  01:4010                      ;---------------------------------------------------------
     835.  01:4010                      ; B6H to B7H	reserved
     836.  01:4010                      ;---------------------------------------------------------
     837.  01:4010                      ; B8H to BBH	lightpen control (SANYO specification)
     838.  01:4010                      ;      B8H	read/write
     839.  01:4010                      ;      B9H	read/write
     840.  01:4010                      ;      BAH	read/write
     841.  01:4010                      ;      BBH	write only
     842.  01:4010                      ;---------------------------------------------------------
     843.  01:4010                      ; BCH to BFH	VHD control (JVC) (8255)
     844.  01:4010                      ;      BCH	port A
     845.  01:4010                      ;      BDH	port B
     846.  01:4010                      ;      BEH	port C
     847.  01:4010                      ;---------------------------------------------------------
     848.  01:4010                      ; C0H to C1H	MSX-Audio
     849.  01:4010                      ;---------------------------------------------------------
     850.  01:4010                      ; C2H to C7H	reserved
     851.  01:4010                      ;---------------------------------------------------------
     852.  01:4010                      ; C8H to CFH	MSX interface
     853.  01:4010                      ;---------------------------------------------------------
     854.  01:4010                      ; D0H to D7H	floppy disk controller (FDC)
     855.  01:4010                      ;		The floppy disk controller can be interrupted by an
     856.  01:4010                      ;		external signal. Interrupt is possible only when the
     857.  01:4010                      ;		FDC is accessed. Thus, the system can treat different
     858.  01:4010                      ;		FDC interfaces.
     859.  01:4010                      ;---------------------------------------------------------
     860.  01:4010                      ; D8 to D9H	kanji ROM (TOSHIBA specification)
     861.  01:4010                      ;     D8H	b5-b0		lower address (write only)
     862.  01:4010                      ;     D9H	b5-b0		upper address (write)
     863.  01:4010                      ;		b7-b0		data (read)
     864.  01:4010                      ;---------------------------------------------------------
     865.  01:4010                      ; DAH to DBH	for future kanji expansion
     866.  01:4010                      ;---------------------------------------------------------
     867.  01:4010                      ; DCH to F4H	reserved
     868.  01:4010                      ;---------------------------------------------------------
     869.  01:4010                      ; F5H		system control (write only)
     870.  01:4010                      ;		setting bit to 1 enables available I/O devices
     871.  01:4010                      ;	b0	kanji ROM
     872.  01:4010                      ;	b1	reserved for kanji
     873.  01:4010                      ;	b2	MSX-AUDIO
     874.  01:4010                      ;	b3	superimpose
     875.  01:4010                      ;	b4	MSX interface
     876.  01:4010                      ;	b5	RS-232C
     877.  01:4010                      ;	b6	lightpen
     878.  01:4010                      ;	b7	CLOCK-IC (only on MSX2)
     879.  01:4010                      ;		Bits to void the conflict between internal I/O
     880.  01:4010                      ;		devices or those connected by cartridge. The bits
     881.  01:4010                      ;		can disable the internal devices. When BIOS is initialised,
     882.  01:4010                      ;		internal devices are valid if no external devices are
     883.  01:4010                      ;		connected. Applications may not write to or read from here.
     884.  01:4010                      ;---------------------------------------------------------
     885.  01:4010                      ; F8H		colour bus I/O
     886.  01:4010                      ;---------------------------------------------------------
     887.  01:4010                      ; F7H		A/V control
     888.  01:4010                      ;	b0	audio R 		mixing ON (write)
     889.  01:4010                      ;	b1	audio L 		mixing OFF (write)
     890.  01:4010                      ;	b2	select video input	21p RGB (write)
     891.  01:4010                      ;	b3	detect video input	no input (read)
     892.  01:4010                      ;	b4	AV control		TV (write)
     893.  01:4010                      ;	b5	Ym control		TV (write)
     894.  01:4010                      ;	b6	inverse of bit 4 of VDP register 9 (write)
     895.  01:4010                      ; 	b7	inverse of bit 5 of VDP register 9 (write)
     896.  01:4010                      ;---------------------------------------------------------
     897.  01:4010                      ; F8H to FBH	reserved
     898.  01:4010                      ;---------------------------------------------------------
     899.  01:4010                      ; FCH to FFH	memory mapper
     900.  01:4010                      ;---------------------------------------------------------
     901.  01:4010                      
     902.  01:4010                      ;---------------------------------------------------------
     903.  01:4010                      ; VRAM addresses  SCREEN 2 / GRAPHIC 2
     904.  01:4010                      ;---------------------------------------------------------
     905.  01:4010  (01:0000)           CHRTBL 	=	$0000   ; Pattern table
     906.  01:4010  (01:1800)           NAMTBL 	=	$1800   ; Name table
     907.  01:4010  (01:2000)           CLRTBL 	=	$2000   ; Colour table
     908.  01:4010  (01:3800)           SPRTBL  = 	$3800   ; Sprite pattern table
     909.  01:4010  (01:1B00)           SPRATR	=	$1b00   ; Sprite attributtes
     910.  01:4010  (01:0000)           CHRTBL0	=	CHRTBL
     911.  01:4010  (01:0800)           CHRTBL1	=	CHRTBL+2048
     912.  01:4010  (01:1000)           CHRTBL2	=	CHRTBL+4096
     913.  01:4010  (01:2000)           CLRTBL0	=	CLRTBL
     914.  01:4010  (01:2800)           CLRTBL1	=	CLRTBL+2048
     915.  01:4010  (01:3000)           CLRTBL2	=	CLRTBL+4096
     916.  01:4010                      ;---------------------------------------------------------
     917.  01:4010                      
     918.  01:4010                      ;---------------------------------------------------------
     919.  01:4010                      ;                    VRAM MAP
     920.  01:4010                      ;---------------------------------------------------------
     921.  01:4010                      ; SCREEN 0 (WIDTH 40) / TEXT 1
     922.  01:4010                      ; 0000H - 03BFH	-->	Pattern name table
     923.  01:4010                      ; 0400H - 042FH	-->	Palette table
     924.  01:4010                      ; 0800H - 0FFFH	-->	Pattern generator table
     925.  01:4010                      ;---------------------------------------------------------
     926.  01:4010                      ; SCREEN 0 (WIDTH 80) / TEXT 2
     927.  01:4010                      ; 0000H - 077FH	-->	Pattern name table
     928.  01:4010                      ; 0800H - 08EFH	-->	Blink table (24 lines mode)
     929.  01:4010                      ; 	  090DH			    (26.5 lines mode)
     930.  01:4010                      ; 0F00H - 0F2FH	-->	Palette table
     931.  01:4010                      ; 1000H - 17FFH	-->	Pattern generator table
     932.  01:4010                      ;---------------------------------------------------------
     933.  01:4010                      ; SCREEN 1 / GRAPHIC 1
     934.  01:4010                      ; 0000H - 07FFH	-->	Pattern generator table
     935.  01:4010                      ; 1800H - 1AFFH	-->	Pattern name table
     936.  01:4010                      ; 1B00H - 1B7FH	-->	Sprite attribute table
     937.  01:4010                      ; 2000H - 201FH	-->	Colour table
     938.  01:4010                      ; 2020H - 204FH	-->	Palette table
     939.  01:4010                      ; 3800H - 3FFFH	-->	Sprite generator table
     940.  01:4010                      ;---------------------------------------------------------
     941.  01:4010                      ; SCREEN 2 / GRAPHIC 2
     942.  01:4010                      ; 0000H - 07FFH	-->	Pattern generator table 1
     943.  01:4010                      ; 0800H - 0FFFH	-->	Pattern generator table 2
     944.  01:4010                      ; 1000H - 17FFH	-->	Pattern generator table 3
     945.  01:4010                      ; 1800H - 18FFH	-->	Pattern name table 1
     946.  01:4010                      ; 1900H - 19FFH	-->	Pattern name table 2
     947.  01:4010                      ; 1A00H - 1AFFH	-->	Pattern name table 3
     948.  01:4010                      ; 1B00H - 1B7FH	-->	Sprite attribute table
     949.  01:4010                      ; 1B80H - 1BAFH	-->	Palette table
     950.  01:4010                      ; 2000H - 27FFH	-->	Colour table 1
     951.  01:4010                      ; 2800H - 2FFFH	-->	Colour table 2
     952.  01:4010                      ; 3000H - 37FFH	-->	Colour table 3
     953.  01:4010                      ; 3800H - 3FFFH	-->	Sprite generator table
     954.  01:4010                      ;---------------------------------------------------------
     955.  01:4010                      ; SCREEN 3 / MULTI COLOUR
     956.  01:4010                      ; 0000H - 07FFH	-->	Pattern generator table
     957.  01:4010                      ; 0800H - 0AFFH	-->	Pattern name table
     958.  01:4010                      ; 1B00H - 1B7FH	-->	Sprite attribute table
     959.  01:4010                      ; 2020H - 204FH	-->	Palette table
     960.  01:4010                      ; 3800H - 3FFFH	-->	Sprite generator table
     961.  01:4010                      ;---------------------------------------------------------
     962.  01:4010                      ; SCREEN 4 / GRAPHIC 3
     963.  01:4010                      ; 0000H - 07FFH	-->	Pattern generator table 1
     964.  01:4010                      ; 0800H - 0FFFH	-->	Pattern generator table 2
     965.  01:4010                      ; 1000H - 17FFH	-->	Pattern generator table 3
     966.  01:4010                      ; 1800H - 18FFH	-->	Pattern name table 1
     967.  01:4010                      ; 1900H - 19FFH	-->	Pattern name table 2
     968.  01:4010                      ; 1A00H - 1AFFH	-->	Pattern name table 3
     969.  01:4010                      ; 1B80H - 1BAFH	-->	Palette table
     970.  01:4010                      ; 1C00H - 1DFFH	-->	Sprite colour table
     971.  01:4010                      ; 1E00H - 1E7FH	-->	Sprite attribute table
     972.  01:4010                      ; 2000H - 27FFH	-->	Colour table 1
     973.  01:4010                      ; 2800H - 2FFFH	-->	Colour table 2
     974.  01:4010                      ; 3000H - 37FFH	-->	Colour table 3
     975.  01:4010                      ; 3800H - 3FFFH	-->	Sprite generator table
     976.  01:4010                      ;---------------------------------------------------------
     977.  01:4010                      ; SCREEN 5, 6 / GRAPHIC 4, 5
     978.  01:4010                      ; 0000H - 5FFFH	-->	Pattern name table (192 lines)
     979.  01:4010                      ; 	  69FFH				   (212 lines)
     980.  01:4010                      ; 7400H - 75FFH	-->	Sprite colour table
     981.  01:4010                      ; 7600H - 767FH	-->	Sprite attribute table
     982.  01:4010                      ; 7680H - 76AFH	-->	Palette table
     983.  01:4010                      ; 7A00H - 7FFFH	-->	Sprite generator table
     984.  01:4010                      ;---------------------------------------------------------
     985.  01:4010                      ; SCREEN 7, 8 / GRAPHIC 6, 7
     986.  01:4010                      ; 0000H - BFFFH	-->	Pattern name table (192 lines)
     987.  01:4010                      ; 	  D3FFH				   (212 lines)
     988.  01:4010                      ; F000H - F7FFH	-->	Sprite generator table
     989.  01:4010                      ; F800H - F9FFH	-->	Sprite colour table
     990.  01:4010                      ; FA00H - FA7FH	-->	Sprite attribute table
     991.  01:4010                      ; FA80H - FAAFH	-->	Palette table
     992.  01:4010                      ;---------------------------------------------------------
     993.  01:4010                      
     994.  01:4010                      ;---------------------------------------------------------
     995.  01:4010                      ;                     Variables
     996.  01:4010                      ;---------------------------------------------------------
     997.  01:4010                      
     998.  01:4010                      ;---------------------------------------------------------
     999.  01:4010                      ; System Variables located in Main ROM
    1000.  01:4010                      ;---------------------------------------------------------
    1001.  01:4010  (01:0004)           CGTABL	=	$0004	; (2) Base address of the MSX character set in ROM
    1002.  01:4010  (01:0006)           VDPDR	=	$0006  	; (1) Base port address for VDP data read
    1003.  01:4010  (01:0007)           VDPDW	=	$0007	; (1) Base port address for VDP data write
    1004.  01:4010  (01:002B)           BASV0	=	$002b	; (1) Basic ROM version
    1005.  01:4010                      			;	7 6 5 4 3 2 1 0
    1006.  01:4010                      			;	| | | | +-+-+-+-- Character set
    1007.  01:4010                      			;	| | | |           0 = Japanese, 1 = International, 2=Korean
    1008.  01:4010                      			;	| +-+-+---------- Date format
    1009.  01:4010                      			;	|                 0 = Y-M-D, 1 = M-D-Y, 2 = D-M-Y
    1010.  01:4010                      			;	+---------------- Default interrupt frEQUency
    1011.  01:4010                      			;	                  0 = 60Hz, 1 = 50Hz
    1012.  01:4010  (01:002C)           BASV1	=	$002c	; (1) Basic ROM version
    1013.  01:4010                      			;	7 6 5 4 3 2 1 0
    1014.  01:4010                      			;	| | | | +-+-+-+-- Keyboard type
    1015.  01:4010                      			;	| | | |           0 = Japanese, 1 = International
    1016.  01:4010                      			;	| | | |           2 = French (AZERTY), 3 = UK, 4 = German (DIN)
    1017.  01:4010                      			;	+-+-+-+---------- Basic version
    1018.  01:4010                      			;	                  0 = Japanese, 1 = International
    1019.  01:4010  (01:002D)           BASV2	=	$002d	; (1) MSX version number
    1020.  01:4010                      			;	0 = MSX 1
    1021.  01:4010                      			;	1 = MSX 2
    1022.  01:4010                      			;	2 = MSX 2+
    1023.  01:4010                      			;	3 = MSX turbo R
    1024.  01:4010  (01:002E)           MSXMIDI	=	$002e	; (1) Bit 0: if 1 then MSX-MIDI is present internally (MSX turbo R only)
    1025.  01:4010                      ;VOID00	=  	$002f	; (1) Reserved
    1026.  01:4010                      
    1027.  01:4010                      ;---------------------------------------------------------
    1028.  01:4010                      ;        MSX System Variables located in RAM
    1029.  01:4010                      ;---------------------------------------------------------
    1030.  01:4010                      ;                       Work area
    1031.  01:4010                      ;	FFFF	---------------------------
    1032.  01:4010                      ;		| slot selection register |
    1033.  01:4010                      ;	FFFC	|-------------------------|
    1034.  01:4010                      ;		|	  reserved	  |
    1035.  01:4010                      ;	FFF8	|-------------------------|
    1036.  01:4010                      ;	FFF7	|  MAIN-ROM slot address  |
    1037.  01:4010                      ;		|-------------------------|
    1038.  01:4010                      ;		|  register reservation   |
    1039.  01:4010                      ;		|      area for new	  |
    1040.  01:4010                      ;	FFE7	|	VDP (9938)	  |
    1041.  01:4010                      ;		|-------------------------|
    1042.  01:4010                      ;		|	program for	  |
    1043.  01:4010                      ;	FFCA	|  expansion BIOS calls   |
    1044.  01:4010                      ;		|-------------------------|
    1045.  01:4010                      ;		|			  |
    1046.  01:4010                      ;		|	hook area	  |
    1047.  01:4010                      ;	FD9A	|			  |
    1048.  01:4010                      ;		|-------------------------|
    1049.  01:4010                      ;		|			  |
    1050.  01:4010                      ;		|    system work area	  |
    1051.  01:4010                      ;	F380	|			  |
    1052.  01:4010                      ;		---------------------------
    1053.  01:4010                      ;---------------------------------------------------------
    1054.  01:4010                      
    1055.  01:4010                      ;---------------------------------------------------------
    1056.  01:4010                      ;                      System work area
    1057.  01:4010                      ;---------------------------------------------------------
    1058.  01:4010  (01:F380)           RDPRIM	=	$f380	; (5) Routine that reads from a primary slot
    1059.  01:4010  (01:F385)           WRPRIM	=	$f385	; (7) Routine that writes to a primary slot
    1060.  01:4010  (01:F38C)           CLPRIM	=	$f38c	; (14) Routine that calls a routine in a primary slot
    1061.  01:4010  (01:F39A)           USRTAB	=	$f39a	; (2) Address to call with Basic USR
    1062.  01:4010  (01:F39A)           USRTAB0	=	$f39a	; (2) Address to call with Basic USR0
    1063.  01:4010  (01:F39C)           USRTAB1	=	$f39c	; (2) Address to call with Basic USR1
    1064.  01:4010  (01:F39E)           USRTAB2	=	$f39e	; (2) Address to call with Basic USR2
    1065.  01:4010  (01:F3A0)           USRTAB3	=	$f3a0	; (2) Address to call with Basic USR3
    1066.  01:4010  (01:F3A2)           USRTAB4	=	$f3a2	; (2) Address to call with Basic USR4
    1067.  01:4010  (01:F3A4)           USRTAB5	=	$f3a4	; (2) Address to call with Basic USR5
    1068.  01:4010  (01:F3A6)           USRTAB6	=	$f3a6	; (2) Address to call with Basic USR6
    1069.  01:4010  (01:F3A8)           USRTAB7	=	$f3a8	; (2) Address to call with Basic USR7
    1070.  01:4010  (01:F3AA)           USRTAB8	=	$f3aa	; (2) Address to call with Basic USR8
    1071.  01:4010  (01:F3AC)           USRTAB9	=	$f3ac	; (2) Address to call with Basic USR9
    1072.  01:4010  (01:F3AE)           LINL40	=	$f3ae	; (1) Width for SCREEN 0 (default 37)
    1073.  01:4010  (01:F3AF)           LINL32	=	$f3af	; (1) Width for SCREEN 1 (default 29)
    1074.  01:4010  (01:F3B0)           LINLEN	=	$f3b0	; (1) Width for the current text mode
    1075.  01:4010  (01:F3B1)           CRTCNT	=	$f3b1	; (1) Number of lines on screen
    1076.  01:4010  (01:F3B2)           CLMLST	=	$f3b2	; (1) Column space. Its uncertain what this address actually stores
    1077.  01:4010  (01:F3B3)           TXTNAM	=	$f3b3	; (2) BASE(0) - SCREEN 0 name table
    1078.  01:4010  (01:F3B5)           TXTCOL	=	$f3b5	; (2) BASE(1) - SCREEN 0 color table
    1079.  01:4010  (01:F3B7)           TXTCGP	=	$f3b7	; (2) BASE(2) - SCREEN 0 character pattern table
    1080.  01:4010  (01:F3B9)           TXTATR	=	$f3b9	; (2) BASE(3) - SCREEN 0 Sprite Attribute Table
    1081.  01:4010  (01:F3BB)           TXTPAT	=	$f3bb	; (2) BASE(4) - SCREEN 0 Sprite Pattern Table
    1082.  01:4010  (01:F3BD)           T32NAM	=	$f3bd	; (2) BASE(5) - SCREEN 1 name table
    1083.  01:4010  (01:F3BF)           T32COL	=	$f3bf	; (2) BASE(6) - SCREEN 1 color table
    1084.  01:4010  (01:F3C1)           T32CGP	=	$f3c1	; (2) BASE(7) - SCREEN 1 character pattern table
    1085.  01:4010  (01:F3C3)           T32ATR	=	$f3c3	; (2) BASE(8) - SCREEN 1 sprite attribute table
    1086.  01:4010  (01:F3C5)           T32PAT	=	$f3c5	; (2) BASE(9) - SCREEN 1 sprite pattern table
    1087.  01:4010  (01:F3C7)           GRPNAM	=	$f3c7	; (2) BASE(10) - SCREEN 2 name table
    1088.  01:4010  (01:F3C9)           GRPCOL	=	$f3c9	; (2) BASE(11) - SCREEN 2 color table
    1089.  01:4010  (01:F3CB)           GRPCGP	=	$f3cb	; (2) BASE(12) - SCREEN 2 character pattern table
    1090.  01:4010  (01:F3CD)           GRPATR	=	$f3cd	; (2) BASE(13) - SCREEN 2 sprite attribute table
    1091.  01:4010  (01:F3CF)           GRPPAT	=	$f3cf	; (2) BASE(14) - SCREEN 2 sprite pattern table
    1092.  01:4010  (01:F3D1)           MLTNAM	=	$f3d1	; (2) BASE(15) - SCREEN 3 name table
    1093.  01:4010  (01:F3D3)           MLTCOL	=	$f3d3	; (2) BASE(16) - SCREEN 3 color table
    1094.  01:4010  (01:F3D5)           MLTCGP	=	$f3d5	; (2) BASE(17) - SCREEN 3 character pattern table
    1095.  01:4010  (01:F3D7)           MLTATR	=	$f3d7	; (2) BASE(18) - SCREEN 3 sprite attribute table
    1096.  01:4010  (01:F3D9)           MLTPAT	=	$f3d9	; (2) BASE(19) - SCREEN 3 sprite pattern table
    1097.  01:4010  (01:F3DB)           CLIKSW	=	$f3db	; (1) Keyboard click sound
    1098.  01:4010                      			;	=0 when key press click disabled
    1099.  01:4010                      			;	=1 when key press click enabled
    1100.  01:4010                      			;	SCREEN ,,n will write to this address
    1101.  01:4010  (01:F3DC)           CSRY	=	$f3dc	; (1) Current row-position of the cursor
    1102.  01:4010  (01:F3DD)           CSRX	=	$f3dd	; (1) Current column-position of the cursor
    1103.  01:4010  (01:F3DE)           CNSDFG	=	$f3de	; (1) Key function show
    1104.  01:4010                      			;	=0 when function keys are not displayed
    1105.  01:4010                      			;	=1 when function keys are displayed
    1106.  01:4010  (01:F3DF)           RG0SAV	=	$f3df	; (1) Content of VDP(0) register (R#0)
    1107.  01:4010  (01:F3E0)           RG1SAV	=	$f3e0	; (1) Content of VDP(1) register (R#1)
    1108.  01:4010  (01:F3E1)           RG2SAV	=	$f3e1	; (1) Content of VDP(2) register (R#2)
    1109.  01:4010  (01:F3E2)           RG3SAV	=	$f3e2	; (1) Content of VDP(3) register (R#3)
    1110.  01:4010  (01:F3E3)           RG4SAV	=	$f3e3	; (1) Content of VDP(4) register (R#4)
    1111.  01:4010  (01:F3E4)           RG5SAV	=	$f3e4	; (1) Content of VDP(5) register (R#5)
    1112.  01:4010  (01:F3E5)           RG6SAV	=	$f3e5	; (1) Content of VDP(6) register (R#6)
    1113.  01:4010  (01:F3E6)           RG7SAV	=	$f3e6	; (1) Content of VDP(7) register (R#7)
    1114.  01:4010  (01:F3E7)           STATFL	=	$f3e7	; (1) Content of VDP(8) status register (S#0)
    1115.  01:4010  (01:F3E8)           TRGFLG	=	$f3e8	; (1) Information about trigger buttons and space bar state
    1116.  01:4010                      			;	7 6 5 4 3 2 1 0
    1117.  01:4010                      			;	| | | |       +-- Space bar, trig(0) (0 = pressed)
    1118.  01:4010                      			;	| | | +---------- Stick 1, Trigger 1 (0 = pressed)
    1119.  01:4010                      			;	| | +------------ Stick 1, Trigger 2 (0 = pressed)
    1120.  01:4010                      			;	| +-------------- Stick 2, Trigger 1 (0 = pressed)
    1121.  01:4010                      			;	+---------------- Stick 2, Trigger 2 (0 = pressed)
    1122.  01:4010  (01:F3E9)           FORCLR	=	$f3e9	; (1) Foreground color
    1123.  01:4010  (01:F3EA)           BAKCLR	=	$f3ea	; (1) Background color
    1124.  01:4010  (01:F3EB)           BDRCLR	=	$f3eb	; (1) Border color
    1125.  01:4010  (01:F3EC)           MAXUPD	=	$f3ec	; (3) Jump instruction used by Basic LINE command. The routines used are: RIGHTC, LEFTC, UPC and DOWNC
    1126.  01:4010  (01:F3EF)           MINUPD	=	$f3ef	; (3) Jump instruction used by Basic LINE command. The routines used are: RIGHTC, LEFTC, UPC and DOWNC
    1127.  01:4010  (01:F3F2)           ATRBYT	=	$f3f2	; (1) Attribute byte (for graphical routines its used to read the color)
    1128.  01:4010  (01:F3F3)           QUEUES	=	$f3f3	; (2) Address of the queue table
    1129.  01:4010  (01:F3F5)           FRCNEW	=	$f3f5	; (1) CLOAD flag
    1130.  01:4010                      			;	=0 when CLOAD
    1131.  01:4010                      			;	=255 when CLOAD?
    1132.  01:4010  (01:F3F6)           SCNCNT	=	$f3f6	; (1) Key scan timing
    1133.  01:4010                      			;	When its zero, the key scan routine will scan for pressed keys so
    1134.  01:4010                      			;	characters can be written to the keyboard buffer
    1135.  01:4010  (01:F3F7)           REPCNT	=	$f3f7	; (1) This is the key repeat delay counter
    1136.  01:4010                      			;	When it reaches zero, the key will repeat
    1137.  01:4010  (01:F3F8)           PUTPNT	=	$f3f8	; (2) Address in the keyboard buffer where a character will be written
    1138.  01:4010  (01:F3FA)           GETPNT	=	$f3fa	; (2) Address in the keyboard buffer where the next character is read
    1139.  01:4010  (01:F3FC)           CS120	=	$f3fc	; (5) Cassette I/O parameters to use for 1200 baud ; DB LOW01,HIGH01,LOW11,HIGH11,HEDLEN*2/256
    1140.  01:4010  (01:F401)           CS240	=	$f401	; (5) Cassette I/O parameters to use for 2400 baud ; DB LOW02,HIGH02,LOW12,HIGH22,HEDLEN*2/256
    1141.  01:4010  (01:F406)           LOW	=	$f406	; (2) Signal delay when writing a 0 to tape ; DB LOW01,HIGH01   (Width of LOW & HIGH wich represents bit 0)
    1142.  01:4010  (01:F408)           HIGH	=	$f408	; (2) Signal delay when writing a 1 to tape ; DB LOW11,HIGH11   (Width of LOW & HIGH wich represents bit 1)
    1143.  01:4010  (01:F40A)           HEADER	=	$f40a	; (1) Delay of tape header (sync.) block    ; DB HEDLEN*2/256    (Header bit for the short header)
    1144.  01:4010  (01:F40B)           ASPCT1	=	$f40b	; (2) Horizontal / Vertical aspect for CIRCLE command (256/aspect ratio for BASIC Circle command)
    1145.  01:4010  (01:F40D)           ASPCT2	=	$f40d	; (2) Horizontal / Vertical aspect for CIRCLE command (256/aspect ratio for BASIC Circle command)
    1146.  01:4010  (01:F40F)           ENDPRG	=	$f40f	; (5) Pointer for the RESUME NEXT command (DB ":" Dummy program end for RESUME NEXT st.)
    1147.  01:4010  (01:F414)           ERRFLG	=	$f414	; (1) Basic Error code
    1148.  01:4010  (01:F415)           LPTPOS	=	$f415	; (1) Position of the printer head
    1149.  01:4010                      			;	Is read by Basic function LPOS and used by LPRINT Basic command
    1150.  01:4010  (01:F416)           PRTFLG	=	$f416	; (1) Printer output flag is read by OUTDO
    1151.  01:4010                      			;	=0 to print to screen
    1152.  01:4010                      			;	=1 to print to printer
    1153.  01:4010  (01:F417)           NTMSXP	=	$f417	; (1) Printer type is read by OUTDO. SCREEN ,,,n writes to this address
    1154.  01:4010                      			;	=0 for MSX printer
    1155.  01:4010                      			;	=1 for non-MSX printer
    1156.  01:4010  (01:F418)           RAWPRT	=	$f418	; (1) Raw printer output is read by OUTDO
    1157.  01:4010                      			;	=0 to convert tabs and unknown characters to spaces and remove graphical headers
    1158.  01:4010                      			;	=1 to send data just like it gets it
    1159.  01:4010  (01:F419)           VLZADR	=	$f419	; (2) Address of data that is temporarilly replaced by O when Basic function VAL("") is running (ADDRESS OF CHARACTER REPLACED BY VAL)
    1160.  01:4010  (01:F41B)           VLZDAT	=	$f41b	; (1) Original value that was in the address pointed to with VLZADR (CHARACTER REPLACED WITH 0 BY VAL)
    1161.  01:4010  (01:F41C)           CURLIN	=	$f41c	; (2) Line number the Basic interpreter is working on, in direct mode it will be filled with #FFFF
    1162.  01:4010  (01:F41E)           KBFMIN	=	$f41e	; (1) Same as  ENDPRG, used if direct statement error occures
    1163.  01:4010  (01:F41F)           KBUF	=	$F41F	; () Crunch buffer;translated into intermediate language from BUF
    1164.  01:4010  (01:F55D)           BUFMIN	=	$F55D	; used by INPUT routine
    1165.  01:4010  (01:F55E)           BUF	=	$F55E 	; Buffer to store characters typed( in ASCII code)
    1166.  01:4010                      ;SX	=	$F562 	; VDP R# 32, Source X Low
    1167.  01:4010                      ;SX	=	$F563 	; VDP R# 33, Source X High
    1168.  01:4010                      ;SY	=	$F564	; VDP R# 34, Source Y Low
    1169.  01:4010                      ;SY	=	$F565	; VDP R# 35, Source Y High
    1170.  01:4010                      ;DX	=	$F566 	; VDP R# 36, Dest. X Low
    1171.  01:4010                      ;DX	=	$F567	; VDP R# 37, Dest. X High
    1172.  01:4010                      ;DY	=	$F568	; VDP R# 38, Dest. Y Low
    1173.  01:4010                      ;DY	=	$F569	; VDP R# 39, Dest. Y High
    1174.  01:4010                      ;NX	=	$F56A	; VDP R# 40, Nr of dots X Low
    1175.  01:4010                      ;NX	=	$F56B	; VDP R# 41, Nr of dots X High
    1176.  01:4010                      ;NY	=	$F56C	; VDP R# 42, Nr of dots Y Low
    1177.  01:4010                      ;NY	=	$F56D	; VDP R# 43, Nr of dots Y High
    1178.  01:4010                      ;CDUMMY	=	$F56E	; VDP R# 44, Color register
    1179.  01:4010                      ;ARG	=	$F56F	; VDP R# 45, Argument register
    1180.  01:4010                      ;L_OP	=	$F570	; VDP R# 46, Command  register
    1181.  01:4010  (01:F562)           VDPCMD_SX	=	$F562 	; VDP R# 32, Source X Low
    1182.  01:4010  (01:F563)           VDPCMD_SX_1	=	$F563 	; VDP R# 33, Source X High
    1183.  01:4010  (01:F564)           VDPCMD_SY	=	$F564	; VDP R# 34, Source Y Low
    1184.  01:4010  (01:F565)           VDPCMD_SY_1	=	$F565	; VDP R# 35, Source Y High
    1185.  01:4010  (01:F566)           VDPCMD_DX	=	$F566 	; VDP R# 36, Dest. X Low
    1186.  01:4010  (01:F567)           VDPCMD_DX_1	=	$F567	; VDP R# 37, Dest. X High
    1187.  01:4010  (01:F568)           VDPCMD_DY	=	$F568	; VDP R# 38, Dest. Y Low
    1188.  01:4010  (01:F569)           VDPCMD_DY_1	=	$F569	; VDP R# 39, Dest. Y High
    1189.  01:4010  (01:F56A)           VDPCMD_NX	=	$F56A	; VDP R# 40, Nr of dots X Low
    1190.  01:4010  (01:F56B)           VDPCMD_NX_1	=	$F56B	; VDP R# 41, Nr of dots X High
    1191.  01:4010  (01:F56C)           VDPCMD_NY	=	$F56C	; VDP R# 42, Nr of dots Y Low
    1192.  01:4010  (01:F56D)           VDPCMD_NY_1	=	$F56D	; VDP R# 43, Nr of dots Y High
    1193.  01:4010  (01:F56E)           VDPCMD_CDUMMY	=	$F56E	; VDP R# 44, Color register
    1194.  01:4010  (01:F56F)           VDPCMD_ARG	=	$F56F	; VDP R# 45, Argument register
    1195.  01:4010  (01:F570)           VDPCMD_L_OP	=	$F570	; VDP R# 46, Command  register
    1196.  01:4010                      ; The above Bit-blitten addresses are used by the COPY command in Basic.
    1197.  01:4010                      ; The VDP is allso able to communicate with the DISKROM to 
    1198.  01:4010                      ; save or load images from or to VRAM.
    1199.  01:4010                      ; A 2Byte filename pointer is expected in SX for Loading and DX for Writing operation.
    1200.  01:4010                      ; i.e. FNAAM: DEFB 34,"d:filename.ext",34,0 
    1201.  01:4010                      ; L_OP has 10 different operators:
    1202.  01:4010                      ;	0 -  PSET       1 -  AND
    1203.  01:4010                      ;	2 -  OR         3 -  XOR
    1204.  01:4010                      ;	4 -  PRESET     8 -  TPSET
    1205.  01:4010                      ;	9 -  TAND       10 - TOR
    1206.  01:4010                      ;	11 - TXOR       12 - TPRESET								
    1207.  01:4010                      ;SLTID	=	$f91f	; (1) Character set SlotID
    1208.  01:4010                      ;CADDR	=	$f920	; (2) Character set address
    1209.  01:4010  (01:FAF8)           EXBRSA	=	$faf8	; (1) Slot address of the SUBROM (EXtended Bios-Rom Slot Address)
    1210.  01:4010  (01:FB21)           DRVINF	=	$fb21	; (1) Nr. of drives connected to disk interface
    1211.  01:4010  (01:FB21)           DRVINF1D =	$fb21	; (1) Nr. of drives connected to disk interface 1
    1212.  01:4010  (01:FB22)           DRVINF1S =	$fb22	; (1) Slot address of disk interface 1
    1213.  01:4010  (01:FB23)           DRVINF2D =	$fb23	; (1) Nr. of drives connected to disk interface 2
    1214.  01:4010  (01:FB24)           DRVINF2S =	$fb24	; (1) Slot address of disk interface 2
    1215.  01:4010  (01:FB25)           DRVINF3D =	$fb25	; (1) Nr. of drives connected to disk interface 3
    1216.  01:4010  (01:FB26)           DRVINF3S =	$fb26	; (1) Slot address of disk interface 3
    1217.  01:4010  (01:FB27)           DRVINF4D =	$fb27	; (1) Nr. of drives connected to disk interface 4
    1218.  01:4010  (01:FB28)           DRVINF4S =	$fb28	; (1) Slot address of disk interface 4
    1219.  01:4010                      ; MUSIC (BASIC)
    1220.  01:4010  (01:FB35)           PRSCNT	=	$FB35	; Used by PLAY command in BASIC 
    1221.  01:4010  (01:FB36)           SAVSP	=	$FB36	; Used by PLAY command in BASIC 
    1222.  01:4010  (01:FB38)           VOICEN	=	$FB38	; Used by PLAY command in BASIC 
    1223.  01:4010  (01:FB39)           SAVVOL	=	$FB39	; Used by PLAY command in BASIC 
    1224.  01:4010  (01:FB3B)           MCLLEN	=	$FB3B	; Used by PLAY command in BASIC 
    1225.  01:4010  (01:FB3C)           MCLPTR	=	$FB3C	; Used by PLAY command in BASIC 
    1226.  01:4010  (01:FB3E)           QUEUEN	=	$FB3E  
    1227.  01:4010  (01:FB3F)           MUSICF	=	$FB3F  
    1228.  01:4010  (01:FB40)           PLYCNT	=	$FB40  
    1229.  01:4010  (01:FB41)           VCBA	=	$FB41  
    1230.  01:4010  (01:FB66)           VCBB	=	$FB66  
    1231.  01:4010  (01:FB8B)           VCBC	=	$FB8B  
    1232.  01:4010  (01:FBB0)           ENSTOP	=	$FBB0	; <>0 if warm start enabled (CTRL+SHIFT+GRPH+KANA/CODE for warm start) 
    1233.  01:4010  (01:FBB1)           BASROM	=	$FBB1	; <>0 if basic is in rom (CTRL+STOP disabled) 
    1234.  01:4010  (01:FBB2)           LINTTB	=	$FBB2	; line terminator table (<>0 if line terminates) 
    1235.  01:4010  (01:FBCA)           FSTPOS	=	$FBCA	; first position for inlin 
    1236.  01:4010  (01:FBCC)           CODSAV	=	$FBCC	; code save area for cursor 
    1237.  01:4010  (01:FBCD)           FNKSWI	=	$FBCD	; indicate which func key is displayed 
    1238.  01:4010  (01:FBCE)           FNKFLG	=	$FBCE	; fkey which have subroutine 
    1239.  01:4010  (01:FBD8)           ONGSBF	=	$FBD8	; global event flag 
    1240.  01:4010  (01:FBD9)           CLIKFL	=	$FBD9	
    1241.  01:4010  (01:FBDA)           OLDKEY	=	$FBDA  
    1242.  01:4010  (01:FBE5)           NEWKEY	=	$FBE5 
    1243.  01:4010                      ; - Example of European Keyboard Layout 
    1244.  01:4010                      ; FBE5 0 => 7     | 6     | 5     | 4     | 3     | 2     | 1     | 0 
    1245.  01:4010                      ; FBE6 1 => ;     | ]     | [     | \     | =     | -     | 9     | 8 
    1246.  01:4010                      ; FBE7 2 => B     | A     | ACCENT| /     | .     | ,     | `     | ' 
    1247.  01:4010                      ; FBE8 3 => J     | I     | H     | G     | F     | E     | D     | C 
    1248.  01:4010                      ; FBE9 4 => R     | Q     | P     | O     | N     | M     | L     | K 
    1249.  01:4010                      ; FBEA 5 => Z     | Y     | X     | W     | V     | U     | T     | S 
    1250.  01:4010                      ; FBEB 6 => F3    | F2    | F1    | CODE  | CAPS  | GRPH  | CTRL  | SHIFT 
    1251.  01:4010                      ; FBEC 7 => RET   | SEL   | BS    | STOP  | TAB   | ESC   | F5    | F4 
    1252.  01:4010                      ; FBED 8 => RIGHT | DOWN  | UP    | LEFT  | DEL   | INS   | HOME  | SPACE 
    1253.  01:4010                      ; FBEE 9 => 4 3 2 1 0 / + * 
    1254.  01:4010                      ; FBEF 10 => . , - 9 8 7 6 5 
    1255.  01:4010  (01:FBF0)           KEYBUF	=	$FBF0	; key code buffer 
    1256.  01:4010  (01:FC18)           BUFEND	=	$FC18	; end of key buffer 
    1257.  01:4010  (01:FC18)           LINWRK	=	$FC18  
    1258.  01:4010  (01:FC40)           PATWRK	=	$FC40	; Pattern Buffer 
    1259.  01:4010  (01:FC48)           BOTTOM	=	$fc48	; (2) Bottom of EQUiped RAM
    1260.  01:4010  (01:FC4A)           HIMEM	=	$fc4a	; (2) High free RAM address available (init stack with)
    1261.  01:4010  (01:FC4C)           TRPTBL	=	$FC4C  
    1262.  01:4010  (01:FC9A)           RTYCNT	=	$FC9A  
    1263.  01:4010  (01:FC9B)           INTFLG	=	$FC9B	; This flag is set if STOP or CTRL + STOP is pressed
    1264.  01:4010                      			; 0 = Not Pressed
    1265.  01:4010                      			; 3 = CTRL +STOP Pressed
    1266.  01:4010                      			; 4 = STOP Pressed
    1267.  01:4010  (01:FC9C)           PADY	=	$FC9C	; (1) Y-coordinate of a connected Graphics Tablet (PAD) 
    1268.  01:4010  (01:FC9D)           PADX	=	$FC9D	; (1) X-coordinate of a connected Graphics Tablet (PAD) 
    1269.  01:4010  (01:FC9E)           JIFFY	=	$FC9E	; (1) Contains value of the software clock, each interrupt of the VDP it is increased by 1. 
    1270.  01:4010                      			; The contents can be read or changed by the 'TIME' function or 'TIME' statement.
    1271.  01:4010  (01:FCA0)           INTVAL	=	$FCA0	; (2) Contains length of the interval when the ON INTERVAL routine was established. 
    1272.  01:4010  (01:FCA2)           INTCNT	=	$FCA2	; (2) ON INTERVAL counter (counts backwards) 
    1273.  01:4010  (01:FCA4)           LOWLIM	=	$FCA4	; (2) Used by the Cassette system (minimal length of startbit) 
    1274.  01:4010  (01:FCA5)           WINWID	=	$FCA5	; (1) Used by the Cassette system (store the difference between a low-and high-cycle) 
    1275.  01:4010  (01:FCA6)           GRPHED	=	$FCA6	; (1) flag for graph. char 
    1276.  01:4010  (01:FCA7)           ESCCNT	=	$FCA7	; (1) escape sEQUence counter 
    1277.  01:4010  (01:FCA8)           INSFLG	=	$FCA8	; (1) insert mode flag 
    1278.  01:4010  (01:FCA9)           CSRSW	=	$FCA9	; (1) cursor display switch 
    1279.  01:4010  (01:FCAA)           CSTYLE	=	$FCAA	; (1) cursor style i.e. Used if INS Key is used ( 00# = Full Cursor / FF# = Halve Cursor ) 
    1280.  01:4010  (01:FCAB)           CAPST	=	$FCAB	; (1) capital status ( 00# = Off / FF# = On ) 
    1281.  01:4010  (01:FCAC)           KANAST	=	$FCAC	; (1) russian key status (Dead Keys)
    1282.  01:4010                      			; 0 = No Dead Keys
    1283.  01:4010                      			; 1 = Dead Key > Accent Grave
    1284.  01:4010                      			; 2 = SHIFT + Dead Key > Accent Egu
    1285.  01:4010                      			; 3 = CODE + Dead Key > Accent Circumflex
    1286.  01:4010                      			; 4 = SHIFT + CODE + Dead Key > Trema
    1287.  01:4010  (01:FCAD)           KANAMD	=	$FCAD  
    1288.  01:4010  (01:FCAE)           FLBMEM	=	$FCAE	; (1) 0 if loading basic programm 
    1289.  01:4010  (01:FCAF)           SCRMOD	=	$FCAF	; (1) screen mode 
    1290.  01:4010  (01:FCB0)           OLDSCR	=	$FCB0	; (1) old screen mode 
    1291.  01:4010  (01:FCB1)           CASPRV	=	$FCB1  
    1292.  01:4010  (01:FCB2)           BRDATR	=	$FCB2	; (1) border color for paint 
    1293.  01:4010  (01:FCB3)           GXPOS	=	$FCB3	; (1) X-position 
    1294.  01:4010  (01:FCB5)           GYPOS	=	$FCB5	; (1) Y-position 
    1295.  01:4010  (01:FCB7)           GRPACX	=	$FCB7  
    1296.  01:4010  (01:FCB9)           GRPACY	=	$FCB9  
    1297.  01:4010  (01:FCBB)           DRWFLG	=	$FCBB	; (1) Used by the DRAW statement (DrawFlag)
    1298.  01:4010                      			; Bit 7 = Draw Line 0 = No / 1 = Yes ( ,N )
    1299.  01:4010                      			; Bit 6 = Move Cursor 0 = Yes / 1 = Yes ( ,B )
    1300.  01:4010                      			; Bit 5 - 0 Unused
    1301.  01:4010  (01:FCBC)           DRWSCL	=	$FCBC	; (1) Used by the DRAW statement (DrawScaling) 
    1302.  01:4010  (01:FCBD)           DRWANG	=	$FCBD	; (1) Used by the DRAW statement (DrawAngle)
    1303.  01:4010                      			; 0 = 0°  rotation
    1304.  01:4010                      			; 1 = 90° rotation
    1305.  01:4010                      			; 2 = 180° rotation
    1306.  01:4010                      			; 3 = 270° Rotation
    1307.  01:4010  (01:FCBE)           RUNBNF	=	$FCBE	; (1) Run Binary File After loading ( Bload"File.Bin",R ) 0 = Don't Run / 1 = Run 
    1308.  01:4010  (01:FCBF)           SAVENT	=	$FCBF	; (2) start address for BSAVE / BLOAD operations
    1309.  01:4010  (01:FCC1)           EXPTBL	=	$fcc1	; (1) Slot 0: #80 = expanded, 0 = not expanded. Also slot address of the main BIOS-ROM.
    1310.  01:4010  (01:FCC1)           EXPTBL0	=	$fcc1	; (1) Slot 0: #80 = expanded, 0 = not expanded. Also slot address of the main BIOS-ROM.
    1311.  01:4010  (01:FCC2)           EXPTBL1	=	$fcc2	; (1) Slot 1: #80 = expanded, 0 = not expanded.
    1312.  01:4010  (01:FCC3)           EXPTBL2	=	$fcc3	; (1) Slot 2: #80 = expanded, 0 = not expanded.
    1313.  01:4010  (01:FCC4)           EXPTBL3	=	$fcc4	; (1) Slot 3: #80 = expanded, 0 = not expanded.
    1314.  01:4010  (01:FCC5)           SLTTBL	=	$fcc5	; (1) Mirror of slot 0 secondary slot selection register.
    1315.  01:4010  (01:FCC5)           SLTTBL0	=	$fcc5	; (1) Mirror of slot 0 secondary slot selection register.
    1316.  01:4010  (01:FCC6)           SLTTBL1	=	$fcc6	; (1) Mirror of slot 1 secondary slot selection register.
    1317.  01:4010  (01:FCC7)           SLTTBL2 =	$fcc7	; (1) Mirror of slot 2 secondary slot selection register.
    1318.  01:4010  (01:FCC8)           SLTTBL3	=	$fcc8	; (1) Mirror of slot 3 secondary slot selection register.
    1319.  01:4010  (01:FCC9)           SLTATR	=	$fcc9	; (1) Slot attributes found during start process
    1320.  01:4010                      			; bit 7 = Basic programm 0 = No / 1 = Yes
    1321.  01:4010                      			; bit 6 = Device Extention  0 = No / 1 = Yes
    1322.  01:4010                      			; bit 5 = Statement Extention  0 = No / 1 = Yes
    1323.  01:4010                      			; bit 4 - 0 = Unused
    1324.  01:4010                      ;---------------------------------------------------------
    1325.  01:4010                      ;                        Hook area
    1326.  01:4010                      ;---------------------------------------------------------
    1327.  01:4010  (01:FD09)           SLTWRK	=	$FD09	; (free word = FD09H + 32*basic slot + 8*expansion slot + 2*page)
    1328.  01:4010  (01:FD89)           PROCNM	=	$FD89	; name of expanded statement
    1329.  01:4010  (01:FD99)           DEVICE	=	$FD99	; (1) device ID for cartrige 0-3
    1330.  01:4010  (01:FD9A)           KEYI 	=	$FD9A
    1331.  01:4010                      ;  meaning:	beginning of MSXIO interrupt handling
    1332.  01:4010                      ;  purpose:	adds the interrupt operation such as RS-232C
    1333.  01:4010  (01:FD9F)           TIMI	=	$FD9F
    1334.  01:4010                      ;  meaning:	MSXIO timer interrupt handling
    1335.  01:4010                      ;  purpose:	adds the timer interrupt handling
    1336.  01:4010                      ;---------------------------------------------------------
    1337.  01:4010                      ;              Program for expansion BIOS calls
    1338.  01:4010                      ;---------------------------------------------------------
    1339.  01:4010  (01:FFCA)           FCALL	=	$FFCA	; hook used by expanded BIOS
    1340.  01:4010  (01:FFCF)           DISINT	=	$FFCF	; used by DOS
    1341.  01:4010  (01:FFD4)           ENAINT	=	$FFD4	; used by DOS
    1342.  01:4010                      ;---------------------------------------------------------
    1343.  01:4010                      ;      Register reservation area for neW VDP (9938)	
    1344.  01:4010                      ;---------------------------------------------------------
    1345.  01:4010  (01:FFE7)           RG08SAV	=	$ffe7	; (1) Content of VDP(09) register (R#08)
    1346.  01:4010  (01:FFE8)           RG09SAV	=	$ffe8	; (1) Content of VDP(10) register (R#09)
    1347.  01:4010  (01:FFE9)           RG10SAV	=	$ffe9	; (1) Content of VDP(11) register (R#10)
    1348.  01:4010  (01:FFEA)           RG11SAV	=	$ffea	; (1) Content of VDP(12) register (R#11)
    1349.  01:4010  (01:FFEB)           RG12SAV	=	$ffeb	; (1) Content of VDP(13) register (R#12)
    1350.  01:4010  (01:FFEC)           RG13SAV	=	$ffec	; (1) Content of VDP(14) register (R#13)
    1351.  01:4010  (01:FFED)           RG14SAV	=	$ffed	; (1) Content of VDP(15) register (R#14)
    1352.  01:4010  (01:FFEE)           RG15SAV	=	$ffee	; (1) Content of VDP(16) register (R#15)
    1353.  01:4010  (01:FFEF)           RG16SAV	=	$ffef	; (1) Content of VDP(17) register (R#16)
    1354.  01:4010  (01:FFF0)           RG17SAV	=	$fff0	; (1) Content of VDP(18) register (R#17)
    1355.  01:4010  (01:FFF1)           RG18SAV	=	$fff1	; (1) Content of VDP(19) register (R#18)
    1356.  01:4010  (01:FFF2)           RG19SAV	=	$fff2	; (1) Content of VDP(20) register (R#19)
    1357.  01:4010  (01:FFF3)           RG20SAV	=	$fff3	; (1) Content of VDP(21) register (R#20)
    1358.  01:4010  (01:FFF4)           RG21SAV	=	$fff4	; (1) Content of VDP(22) register (R#21)
    1359.  01:4010  (01:FFF5)           RG22SAV	=	$fff5	; (1) Content of VDP(23) register (R#22)
    1360.  01:4010  (01:FFF6)           RG23SAV	=	$fff6	; (1) Content of VDP(24) register (R#23)
    1361.  01:4010                      ;---------------------------------------------------------
    1362.  01:4010                      ;	           MAIN-ROM slot address
    1363.  01:4010                      ;---------------------------------------------------------
    1364.  01:4010  (01:FFF7)           ROMSLT	  =	$fff7	; (1) Slotadress of Main-ROM
    1365.  01:4010                      ;reserved =	$fff8	; (2) Reserved
    1366.  01:4010                      ;RG25SAV  =	$fffa	; (1) Content of VDP(26) register (R#25) MSX2+
    1367.  01:4010                      ;RG26SAV  =	$fffb	; (1) Content of VDP(27) register (R#26) MSX2+
    1368.  01:4010                      ;RG27SAV  =	$fffc	; (1) Content of VDP(28) register (R#27) MSX2+
    1369.  01:4010                      ;TMPSTK	  =	$fffd	; (2) Temporary stack pointer storage
    1370.  01:4010                      ;---------------------------------------------------------
    1371.  01:4010                      ;                    Slot selection register
    1372.  01:4010                      ;---------------------------------------------------------
    1373.  01:4010  (01:FFFF)           SLTSL	=	$ffff	; (1) Secondary slot select register (Reading returns INVERTED! previous written value)
    1374.  01:4010  (01:FFFF)           SLTALL	=	$ffff	; (1) (all slots) Secondary slot select register. Reading returns the inverted previously written value.
    1375.  01:4010                      ;---------------------------------------------------------
    1376.  01:4010                      
    1377.  01:4010                      ;-----------------------------------------------------------
    1378.  01:4010                      ;| ------------------------------------------------------- |
    1379.  01:4010                      ;| |                      F I N                          | |
    1380.  01:4010                      ;| ------------------------------------------------------- |
    1381.  01:4010                      ;-----------------------------------------------------------
    1382.  01:4010                      
      37   01:4010                      INCLUDE "lib/setpages.asm"	; ROM 48K
       1.  01:4010                      ;-----------------------------------------------------------
       2.  01:4010                      ;| ------------------------------------------------------- |
       3.  01:4010                      ;| |                    I N I C I O                      | |
       4.  01:4010                      ;| ------------------------------------------------------- |
       5.  01:4010                      ;-----------------------------------------------------------
       6.  01:4010                      
       7.  01:4010                      ; -----------------------------------------------------
       8.  01:4010                      ; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
       9.  01:4010                      ; -----------------------------------------------------
      10.  01:4010                      ; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
      11.  01:4010                      ; -----------------------------------------------------
      12.  01:4010                      ; --- RUTINAS PRINCIPALES DEL MODULO 32K ---
      13.  01:4010                      ; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
      14.  01:4010                      ; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
      15.  01:4010                      ; --- VARIABLES EN RAM NECESARIAS ---
      16.  01:4010                      ; NINGUNA
      17.  01:4010                      ; -----------------------------------------------------
      18.  01:4010                      ; --- RUTINAS PRINCIPALES DEL MODULO 48K ---
      19.  01:4010                      ; SETPAGES48K:	BIOS-ROM-YY-ZZ	 -> ROM-ROM-ROM-ZZ (SITUA PAGINAS 2 Y 0, EN ESTE ORDEN)
      20.  01:4010                      ;               ADEMAS GUARDA LOS SLOTS DEL JUEGO Y LA BIOS POR SI HAY QUE INTERCAMBIAR
      21.  01:4010                      ; SETGAMEPAGE0:	XX-ROM-YY-ZZ     -> ROM-ROM-YY-ZZ (NO TOCA LA PAGINA 2)
      22.  01:4010                      ; RESTOREBIOS:  XX-ROM-YY-ZZ     -> BIOS-ROM-YY-ZZ (VUELVE A SITUAR LA BIOS)
      23.  01:4010                      ; SETPAGE0:	POSICIONA SLOT EN LA PAGINA 0
      24.  01:4010                      ; --- VARIABLES EN RAM NECESARIAS ---
      25.  01:4010                      ; SLOTBIOS:	BYTE PARA ALMACENAR EL SLOT DE LA BIOS
      26.  01:4010                      ; SLOTGAME:	BYTE PARA ALMACENAR EL SLOT DEL JUEGO
      27.  01:4010                      ; -----------------------------------------------------
      28.  01:4010                      	MODULE SETPAGES
      29.  01:4010                      
      30.  01:4010                      DEFINE USAR_SETPAGES48K 1
      31.  01:4010                      
      32.  01:4010  (01:FCC1)           EXPTBL0 = $FCC1
      33.  01:4010  (01:FCC2)           EXPTBL1 = $FCC2
      34.  01:4010  (01:FCC3)           EXPTBL2 = $FCC3
      35.  01:4010  (01:FCC4)           EXPTBL3 = $FCC4
      36.  01:4010  (01:0024)           ENASLT  = $0024
      37.  01:4010                      
      38.  01:4010                      ; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
      39.  01:4010                      ; --- Entrada: a = SLOT                                           ---
      40.  01:4010                      ; --- Salida: a = valor para ENASLT                               ---
      41.  01:4010                      ; --- AUTOR: Konamiman                                            ---
      42.  01:4010                      @GETSLOT:
      43.  01:4010  E6 03               	AND	$03		; Proteccion, nos aseguramos de que el valor esta en 0-3
      44.  01:4012  4F                  	LD	C, A		; c = slot de la pagina
      45.  01:4013  06 00               	LD	B, 0		; bc = slot de la pagina
      46.  01:4015  21 C1 FC            	LD	HL, EXPTBL0	; Tabla de slots expandidos
      47.  01:4018  09                  	ADD	HL, BC		; hl -> variable que indica si este slot esta expandido
      48.  01:4019  7E                  	LD	A, [HL]		; Tomamos el valor
      49.  01:401A  E6 80               	AND	$80		; Si el bit mas alto es cero...
      50.  01:401C  28 09               	JR	Z, .exit	; ...nos vamos a .exit
      51.  01:401E                      	; --- El slot esta expandido ---
      52.  01:401E  B1                  	OR	C		; Slot basico en el lugar adecuado
      53.  01:401F  4F                  	LD	C, A		; Guardamos el valor en c
      54.  01:4020  23 23 23 23         [4]	INC	HL		; Incrementamos hl ...cuatro veces
      55.  01:4024  7E                  	LD	A, [HL]		; a = valor del registro de subslot del slot donde estamos
      56.  01:4025  E6 0C               	AND	$0C		; Nos quedamos con el valor donde esta nuestro cartucho
      57.  01:4027                      .exit:
      58.  01:4027  B1                  	OR	C		; Slot extendido/basico en su lugar
      59.  01:4028  C9                  	RET			; Volvemos
      60.  01:4029                      ; --- Posiciona las paginas de un megarom o un 32K ---
      61.  01:4029                      @SETPAGES32K:
      62.  01:4029  3E C9               	LD	A, $C9		; Codigo de RET
      63.  01:402B  32 2E 40            	LD	[.nopret], A	; Modificamos la siguiente instruccion si estamos en RAM
      64.  01:402E                      .nopret:
      65.  01:402E  00                  	nop			; No hacemos nada si no estamos en RAM
      66.  01:402F                      	; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
      67.  01:402F                      ;	CALL	RSLREG		; Leemos el contenido del registro de seleccion de slots
      68.  01:402F  DB A8               	IN	A, [$A8]	; Leemos el contenido del registro de seleccion de slots
      69.  01:4031  0F 0F               [2]	RRCA			; Rotamos a la derecha...dos veces
      70.  01:4033  CD 10 40            	CALL	GETSLOT		; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
      71.  01:4036  26 80               	LD	H, $80		; Seleccionamos pagina 2 ($8000-$BFFF)
      72.  01:4038  C3 24 00            	JP	ENASLT		; Posicionamos la pagina 2 y volvemos
      73.  01:403B                      
      74.  01:403B                      ; --- Posiciona las paginas de un cartucho de 48K ---
      75.  01:403B                      IFDEF USAR_SETPAGES48K
      76.  01:403B  (01:C000)           SLOTBIOS # 1	; BYTE PARA ALMACENAR EL SLOT DE LA BIOS
      77.  01:403B  (01:C001)           SLOTGAME # 1	; BYTE PARA ALMACENAR EL SLOT DEL JUEGO
      78.  01:403B                      @SETPAGES48K:	
      79.  01:403B  CD 29 40            	CALL	SETPAGES32K	; Colocamos la pagina 2 del cartucho
      80.  01:403E                      ; --- Guardamos el slot de la BIOS por si tenemos que restaurarla ---
      81.  01:403E  3A C1 FC            	LD	A, [EXPTBL0]	; Valor del slot de la BIOS
      82.  01:4041  32 00 C0            	LD	[SLOTBIOS], A	; Grabamos el slot de la BIOS para recuperarlo si hace falta
      83.  01:4044                      ; --- Guardamos el slot del juego por si hay que restaurarlo ---
      84.  01:4044  DB A8               	IN	A, [$A8]	; Leemos el contenido del registro de seleccion de slots
      85.  01:4046  0F 0F               [2]	RRCA			; Rotamos a la derecha...dos veces
      86.  01:4048  CD 10 40            	CALL	GETSLOT		; Obtenemos el slot de la pagina 1 ($4000-$7FFF) y volvemos
      87.  01:404B  32 01 C0            	LD	[SLOTGAME], A	; Grabamos el slot del juego para recuperarlo si hace falta
      88.  01:404E                      ; --- RUTINA QUE POSICIONA LA PAGINA 0 DEL JUEGO ---
      89.  01:404E                      ; ---     ANTES HAY QUE LLAMAR A SETPAGES48K     ---
      90.  01:404E                      @SETGAMEPAGE0:	
      91.  01:404E  3A 01 C0            	LD	A, [SLOTGAME]	; Leemos el slot del juego
      92.  01:4051  C3 57 40            	JP	SETPAGE0	; Situamos la pagina 0 del juego y volvemos
      93.  01:4054                      ; --- RUTINA QUE VUELVE A SITUAR LA BIOS ---
      94.  01:4054                      ; --- ANTES HAY QUE LLAMAR A SETPAGES48K ---
      95.  01:4054                      @RESTOREBIOS:	
      96.  01:4054  3A 00 C0            	LD	A, [SLOTBIOS]	; Leemos el slot de la BIOS
      97.  01:4057                      ; --- RUTINA QUE POSICIONA SLOT EN LA PAGINA 0 ---
      98.  01:4057                      ; --- AUTOR: Ramones                           ---
      99.  01:4057                      ; --- ENTRADA: a = slot con formato FxxxSSPP   ---
     100.  01:4057                      SETPAGE0:	
     101.  01:4057  F3                  	DI			; Desactivamos las interrupciones
     102.  01:4058  47                  	LD	B, A		; Guardamos el slot
     103.  01:4059  DB A8               	IN	A, [$A8]	; Leemos el registro principal de slots
     104.  01:405B  E6 FC               	AND	$FC		; Nos quedamos con los valores de las tres paginas superiores
     105.  01:405D  57                  	LD	D, A		; D = Valor del slot primario
     106.  01:405E  78                  	LD	A, B		; Recuperamos el slot
     107.  01:405F  E6 03               	AND	$03		; Nos fijamos en el slot primario
     108.  01:4061  B2                  	OR	D		; Colocamos los bits de las paginas superiores
     109.  01:4062  57                  	LD	D, A		; Guardamos en D el valor final para el slot primario
     110.  01:4063                      	; Comprobamos si esta expandido
     111.  01:4063  78                  	LD	A, B		; Recuperamos el slot
     112.  01:4064  CB 7F               	BIT	7, A		; Miramos el bit de expansion
     113.  01:4066  28 1D               	JR	Z, .setprimary	; ...y saltamos si no esta expandido
     114.  01:4068                      	; Si llegamos aqui el slot esta expandido
     115.  01:4068  E6 03               	AND	$03		; Nos quedamos con el slot primario
     116.  01:406A  0F 0F               [2]	RRCA			; Rotamos ciclicamente a la derecha una...y dos veces
     117.  01:406C  4F                  	LD	C, A		; Guardamos el valor en c
     118.  01:406D  7A                  	LD	A, D		; Recuperamos el valor final para el slot primario
     119.  01:406E  E6 3F               	AND	$3F		; Nos quedamos con las paginas 0, 1 y 2
     120.  01:4070  B1                  	OR	C		; Colocamos los bits para la pagina 3
     121.  01:4071  4F                  	LD	C, A		; C:=valor del slot primario incluso en pagina 3
     122.  01:4072  78                  	LD	A, B		; Recuperamos otra vez el slot
     123.  01:4073  E6 0C               	AND	$0C		; Nos quedamos con el valor del subslot
     124.  01:4075  0F 0F               [2]	RRCA			; Rotamos ciclicamente a la derecha una...y dos veces
     125.  01:4077  47                  	LD	B, A		; B:= Slot expandido en pagina 3
     126.  01:4078  79                  	LD	A, c		; valor del slot primario incluyendo pagina 3
     127.  01:4079  D3 A8               	OUT	[$A8], A	; Slots : Primario, xx, xx, Primario
     128.  01:407B  3A FF FF            	LD	A,[$FFFF]	; Leemos registro de seleccion de subslots
     129.  01:407E  2F                  	CPL			; Complementamos (recordemos que siempre hay que complementarlo)
     130.  01:407F  E6 FC               	AND	$FC		; Nos quedamos con las paginas superiores
     131.  01:4081  B0                  	OR	b		; Colocamos el valor del slot expandido en pagina 0
     132.  01:4082  32 FF FF            	LD	[$FFFF], A	; Seleccionamos el slot expandido
     133.  01:4085                      .setprimary:			; --- Colocamos el slot primario ---
     134.  01:4085  7A                  	LD	A, D		; Valor final del slot primario
     135.  01:4086  D3 A8               	OUT	[$A8], A	; Slots: Seleccionado, xx, xx, Ram
     136.  01:4088  C9                  	RET			; Volvemos
     137.  01:4089                      ENDIF
     138.  01:4089                      
     139.  01:4089                      	ENDMODULE SETPAGES
     140.  01:4089                      
     141.  01:4089                      ;-----------------------------------------------------------
     142.  01:4089                      ;| ------------------------------------------------------- |
     143.  01:4089                      ;| |                      F I N                          | |
     144.  01:4089                      ;| ------------------------------------------------------- |
     145.  01:4089                      ;-----------------------------------------------------------
      38   01:4089                      INCLUDE "lib/sonido.asm"
       1.  01:4089                      ;-----------------------------------------------------------
       2.  01:4089                      ;| ------------------------------------------------------- |
       3.  01:4089                      ;| |                    I N I C I O                      | |
       4.  01:4089                      ;| ------------------------------------------------------- |
       5.  01:4089                      ;-----------------------------------------------------------
       6.  01:4089                      
       7.  01:4089  (01:0080)           SONIDO_50HZ	=	$80	; Intenta usar 50Hz CF = 0
       8.  01:4089  (01:0000)           SONIDO_60HZ	=	$00	; Intenta usar 60Hz CF = 0
       9.  01:4089                      
      10.  01:4089                      	MODULE SONIDO
      11.  01:4089                      
      12.  01:4089                      INCLUDE	"ayFX_replayer.asm"
       1:  01:4089                      ;-----------------------------------------------------------
       2:  01:4089                      ;| ------------------------------------------------------- |
       3:  01:4089                      ;| |                    I N I C I O                      | |
       4:  01:4089                      ;| ------------------------------------------------------- |
       5:  01:4089                      ;-----------------------------------------------------------
       6:  01:4089                      	MODULE AYFX_REPLAYER
       7:  01:4089                      	
       8:  01:4089                      ; --- ayFX REPLAYER v1.31 ---
       9:  01:4089                      ; --- v1.31	Fixed bug on previous version, only PSG channel C worked
      10:  01:4089                      ; --- v1.3	Fixed volume and Relative volume versions on the same file, conditional compilation
      11:  01:4089                      ; ---		Support for dynamic or fixed channel allocation
      12:  01:4089                      ; --- v1.2f/r	ayFX bank support
      13:  01:4089                      ; --- v1.11f/r	If a frame volume is zero then no AYREGS update
      14:  01:4089                      ; --- v1.1f/r	Fixed volume for all ayFX streams
      15:  01:4089                      ; --- v1.1	Explicit priority (as suggested by AR)
      16:  01:4089                      ; --- v1.0f	Bug fixed (error when using noise)
      17:  01:4089                      ; --- v1.0	Initial release
      18:  01:4089                      
      19:  01:4089                      ; --- DEFINE AYFXRELATIVE AS 0 FOR FIXED VOLUME VERSION ---
      20:  01:4089                      ; --- DEFINE AYFXRELATIVE AS 1 FOR RELATIVE VOLUME VERSION ---
      21:  01:4089  (01:0000)           AYFXRELATIVE=0
      22:  01:4089                      
      23:  01:4089  (01:C002)           ayFX_MODE:	#	1	; ayFX mode = 1 to switching channel routine
      24:  01:4089  (01:C003)           ayFX_BANK:	#	2	; Current ayFX Bank
      25:  01:4089  (01:C005)           @ayFX_PRIORITY:	#	1	; Current ayFX stream priotity
      26:  01:4089  (01:C006)           ayFX_POINTER:	#	2	; Pointer to the current ayFX stream
      27:  01:4089  (01:C008)           ayFX_TONE:	#	2	; Current tone of the ayFX stream
      28:  01:4089  (01:C00A)           ayFX_NOISE:	#	1	; Current noise of the ayFX stream
      29:  01:4089  (01:C00B)           ayFX_VOLUME:	#	1	; Current volume of the ayFX stream
      30:  01:4089  (01:C00C)           ayFX_CHANNEL:	#	1	; PSG channel to play the ayFX stream
      31:  01:4089                      
      32:  01:4089                      	IF ( AYFXRELATIVE == 1 )
      33:  01:4089                    ~ ayFX_VT:	#	2	; ayFX relative volume table pointer
      34:  01:4089                    ~ 	ENDIF
      35:  01:4089                      
      36:  01:4089                      ; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
      37:  01:4089                      ; PT3_AYREGS:	#	14	; Ram copy of PSG registers
      38:  01:4089                      ; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
      39:  01:4089                      
      40:  01:4089                      ; ---          ayFX replayer setup          ---
      41:  01:4089                      ; --- INPUT: HL -> pointer to the ayFX bank ---
      42:  01:4089                      @ayFX_SETUP:
      43:  01:4089  22 03 C0            	ld	[ayFX_BANK],hl		; Current ayFX bank
      44:  01:408C  AF                  	xor	a			; a:=0
      45:  01:408D  32 02 C0            	ld	[ayFX_MODE],a		; Initial mode: fixed channel
      46:  01:4090  3C                  	inc	a			; Starting channel (=1)
      47:  01:4091  32 0C C0            	ld	[ayFX_CHANNEL],a	; Updated
      48:  01:4094                      ; --- End of an ayFX stream ---
      49:  01:4094                      ayFX_END:
      50:  01:4094  3E FF               	ld	a,255			; Lowest ayFX priority
      51:  01:4096  32 05 C0            	ld	[ayFX_PRIORITY],a	; Priority saved (not playing ayFX stream)
      52:  01:4099  C9                  	ret				; Return
      53:  01:409A                      ; ---     INIT A NEW ayFX STREAM     ---
      54:  01:409A                      ; --- INPUT: A -> sound to be played ---
      55:  01:409A                      ; ---        C -> sound priority     ---
      56:  01:409A                      @ayFX_INIT:	
      57:  01:409A  C5                  	push	bc			; Store bc in stack
      58:  01:409B  D5                  	push	de			; Store de in stack
      59:  01:409C  E5                  	push	hl			; Store hl in stack
      60:  01:409D                      ; --- Check if the index is in the bank ---
      61:  01:409D  47                  	ld	b,a			; b:=a (new ayFX stream index)
      62:  01:409E  2A 03 C0            	ld	hl,[ayFX_BANK]		; Current ayFX BANK
      63:  01:40A1  7E                  	ld	a,[hl]			; Number of samples in the bank
      64:  01:40A2  B7                  	or	a			; If zero (means 256 samples)...
      65:  01:40A3  28 06               	jr	z,.CHECK_PRI		; ...goto .CHECK_PRI
      66:  01:40A5                      ; The bank has less than 256 samples
      67:  01:40A5  78                  	ld	a,b			; a:=b (new ayFX stream index)
      68:  01:40A6  BE                  	cp	[hl]			; If new index is not in the bank...
      69:  01:40A7  3E 02               	ld	a,2			; a:=2 (error 2: Sample not in the bank)
      70:  01:40A9  30 21               	jr	nc,.INIT_END		; ...we can't init it
      71:  01:40AB                      ; --- Check if the new priority is lower than the current one ---
      72:  01:40AB                      ; ---   Remember: 0 = highest priority, 15 = lowest priority  ---
      73:  01:40AB                      .CHECK_PRI:	
      74:  01:40AB  78                  	ld	a,b			; a:=b (new ayFX stream index)
      75:  01:40AC  3A 05 C0            	ld	a,[ayFX_PRIORITY]	; a:=Current ayFX stream priority
      76:  01:40AF  B9                  	cp	c			; If new ayFX stream priority is lower than current one...
      77:  01:40B0  3E 01               	ld	a,1			; a:=1 (error 1: A sample with higher priority is being played)
      78:  01:40B2  38 18               	jr	c,.INIT_END		; ...we don't start the new ayFX stream
      79:  01:40B4                      ; --- Set new priority ---
      80:  01:40B4  79                  	ld	a,c			; a:=New priority
      81:  01:40B5  E6 0F               	and	$0F			; We mask the priority
      82:  01:40B7  32 05 C0            	ld	[ayFX_PRIORITY],a	; new ayFX stream priority saved in RAM
      83:  01:40BA                      ; --- Volume adjust using PT3 volume table ---
      84:  01:40BA                      	IF ( AYFXRELATIVE == 1 )
      85:  01:40BA                    ~ 	ld	c,a			; c:=New priority (fixed)
      86:  01:40BA                    ~ 	ld	a,15			; a:=15
      87:  01:40BA                    ~ 	sub	c			; a:=15-New priority = relative volume
      88:  01:40BA                    ~ 	jr	z,.INIT_NOSOUND	; If priority is 15 -> no sound output (volume is zero)
      89:  01:40BA                    ~ 	add	a,a			; a:=a*2
      90:  01:40BA                    ~ 	add	a,a			; a:=a*4
      91:  01:40BA                    ~ 	add	a,a			; a:=a*8
      92:  01:40BA                    ~ 	add	a,a			; a:=a*16
      93:  01:40BA                    ~ 	ld	e,a			; e:=a
      94:  01:40BA                    ~ 	ld	d,0			; de:=a
      95:  01:40BA                    ~ 	ld	hl, PT3_VT_			; hl:=PT3 volume table
      96:  01:40BA                    ~ 	add	hl,de			; hl is a pointer to the relative volume table
      97:  01:40BA                    ~ 	ld	[ayFX_VT],hl		; Save pointer
      98:  01:40BA                    ~ 	ENDIF
      99:  01:40BA                      ; --- Calculate the pointer to the new ayFX stream ---
     100:  01:40BA  ED 5B 03 C0         	ld	de,[ayFX_BANK]		; de:=Current ayFX bank
     101:  01:40BE  13                  	inc	de			; de points to the increments table of the bank
     102:  01:40BF  68                  	ld	l,b			; l:=b (new ayFX stream index)
     103:  01:40C0  26 00               	ld	h,0			; hl:=b (new ayFX stream index)
     104:  01:40C2  29                  	add	hl,hl			; hl:=hl*2
     105:  01:40C3  19                  	add	hl,de			; hl:=hl+de (hl points to the correct increment)
     106:  01:40C4  5E                  	ld	e,[hl]			; e:=lower byte of the increment
     107:  01:40C5  23                  	inc	hl			; hl points to the higher byte of the correct increment
     108:  01:40C6  56                  	ld	d,[hl]			; de:=increment
     109:  01:40C7  19                  	add	hl,de			; hl:=hl+de (hl points to the new ayFX stream)
     110:  01:40C8  22 06 C0            	ld	[ayFX_POINTER],hl	; Pointer saved in RAM
     111:  01:40CB  AF                  	xor	a			; a:=0 (no errors)
     112:  01:40CC                      .INIT_END:
     113:  01:40CC  E1                  	pop	hl			; Retrieve hl from stack
     114:  01:40CD  D1                  	pop	de			; Retrieve de from stack
     115:  01:40CE  C1                  	pop	bc			; Retrieve bc from stack
     116:  01:40CF  C9                  	ret				; Return
     117:  01:40D0                      
     118:  01:40D0                      ; --- Init a sample with relative volume zero -> no sound output ---
     119:  01:40D0                      	IF ( AYFXRELATIVE == 1 )
     120:  01:40D0                    ~ .INIT_NOSOUND:
     121:  01:40D0                    ~ 	ld	a,255			; Lowest ayFX priority
     122:  01:40D0                    ~ 	ld	[ayFX_PRIORITY],a	; Priority saved (not playing ayFX stream)
     123:  01:40D0                    ~ 	jr	.INIT_END		; Jumps to .INIT_END
     124:  01:40D0                    ~ 	ENDIF
     125:  01:40D0                      
     126:  01:40D0                      ; --- PLAY A FRAME OF AN ayFX STREAM ---
     127:  01:40D0                      @ayFX_PLAY:	
     128:  01:40D0  3A 05 C0            	ld	a,[ayFX_PRIORITY]	; a:=Current ayFX stream priority
     129:  01:40D3  B7                  	or	a			; If priority has bit 7 on...
     130:  01:40D4  F8                  	ret	m			; ...return
     131:  01:40D5                      ; --- Calculate next ayFX channel (if needed) ---
     132:  01:40D5  3A 02 C0            	ld	a,[ayFX_MODE]		; ayFX mode
     133:  01:40D8  E6 01               	and	1			; If bit0=0 (fixed channel)...
     134:  01:40DA  28 08               	jr	z,.TAKECB		; ...skip channel changing
     135:  01:40DC  21 0C C0            	ld	hl,ayFX_CHANNEL		; Old ayFX playing channel
     136:  01:40DF  35                  	dec	[hl]			; New ayFX playing channel
     137:  01:40E0  20 02               	jr	nz,.TAKECB		; If not zero jump to .TAKECB
     138:  01:40E2  36 03               	ld	[hl],3			; If zero -> set channel 3
     139:  01:40E4                      ; --- Extract control byte from stream ---
     140:  01:40E4                      .TAKECB:	
     141:  01:40E4  2A 06 C0            	ld	hl,[ayFX_POINTER]	; Pointer to the current ayFX stream
     142:  01:40E7  4E                  	ld	c,[hl]			; c:=Control byte
     143:  01:40E8  23                  	inc	hl			; Increment pointer
     144:  01:40E9                      ; --- Check if there's new tone on stream ---
     145:  01:40E9  CB 69               	bit	5,c			; If bit 5 c is off...
     146:  01:40EB  28 08               	jr	z,.CHECK_NN		; ...jump to .CHECK_NN (no new tone)
     147:  01:40ED                      ; --- Extract new tone from stream ---
     148:  01:40ED  5E                  	ld	e,[hl]			; e:=lower byte of new tone
     149:  01:40EE  23                  	inc	hl			; Increment pointer
     150:  01:40EF  56                  	ld	d,[hl]			; d:=higher byte of new tone
     151:  01:40F0  23                  	inc	hl			; Increment pointer
     152:  01:40F1  ED 53 08 C0         	ld	[ayFX_TONE],de		; ayFX tone updated
     153:  01:40F5                      ; --- Check if there's new noise on stream ---
     154:  01:40F5                      .CHECK_NN:	
     155:  01:40F5  CB 71               	bit	6,c			; if bit 6 c is off...
     156:  01:40F7  28 0A               	jr	z,.SETPOINTER		; ...jump to .SETPOINTER (no new noise)
     157:  01:40F9                      ; --- Extract new noise from stream ---
     158:  01:40F9  7E                  	ld	a,[hl]			; a:=New noise
     159:  01:40FA  23                  	inc	hl			; Increment pointer
     160:  01:40FB  FE 20               	cp	$20			; If it's an illegal value of noise (used to mark end of stream)...
     161:  01:40FD                      ;	jr	z, ayFX_END		; ...jump to ayFX_END
     162:  01:40FD  CA 94 40            	jp	z, ayFX_END		; ...jump to ayFX_END
     163:  01:4100  32 0A C0            	ld	[ayFX_NOISE],a		; ayFX noise updated
     164:  01:4103                      ; --- Update ayFX pointer ---
     165:  01:4103                      .SETPOINTER:	
     166:  01:4103  22 06 C0            	ld	[ayFX_POINTER],hl	; Update ayFX stream pointer
     167:  01:4106                      ; --- Extract volume ---
     168:  01:4106  79                  	ld	a,c			; a:=Control byte
     169:  01:4107  E6 0F               	and	$0F			; lower nibble
     170:  01:4109                      ; --- Fix the volume using PT3 Volume Table ---
     171:  01:4109                      	IF ( AYFXRELATIVE == 1 )
     172:  01:4109                    ~ 	ld	hl,[ayFX_VT]		; hl:=Pointer to relative volume table
     173:  01:4109                    ~ 	ld	e,a			; e:=a (ayFX volume)
     174:  01:4109                    ~ 	ld	d,0			; d:=0
     175:  01:4109                    ~ 	add	hl,de			; hl:=hl+de (hl points to the relative volume of this frame
     176:  01:4109                    ~ 	ld	a,[hl]			; a:=ayFX relative volume
     177:  01:4109                    ~ 	or	a			; If relative volume is zero...
     178:  01:4109                    ~ 	ENDIF
     179:  01:4109  32 0B C0            	ld	[ayFX_VOLUME],a		; ayFX volume updated
     180:  01:410C  C8                  	ret	z			; ...return (don't copy ayFX values in to AYREGS)
     181:  01:410D                      ; -------------------------------------
     182:  01:410D                      ; --- COPY ayFX VALUES IN TO AYREGS ---
     183:  01:410D                      ; -------------------------------------
     184:  01:410D                      ; --- Set noise channel ---
     185:  01:410D  CB 79               	bit	7,c			; If noise is off...
     186:  01:410F  20 06               	jr	nz,.SETMASKS		; ...jump to .SETMASKS
     187:  01:4111  3A 0A C0            	ld	a,[ayFX_NOISE]		; ayFX noise value
     188:  01:4114  32 91 C0            	ld	[PT3_AYREGS+6],a	; copied in to AYREGS (noise channel)
     189:  01:4117                      ; --- Set mixer masks ---
     190:  01:4117                      .SETMASKS:
     191:  01:4117  79                  	ld	a,c			; a:=Control byte
     192:  01:4118  E6 90               	and	$90			; Only bits 7 and 4 (noise and tone mask for psg reg 7)
     193:  01:411A  FE 90               	cp	$90			; If no noise and no tone...
     194:  01:411C  C8                  	ret	z			; ...return (don't copy ayFX values in to AYREGS)
     195:  01:411D                      ; --- Copy ayFX values in to ARYREGS ---
     196:  01:411D  0F                  	rrca				; Rotate a to the right (1 TIME)
     197:  01:411E  0F                  	rrca				; Rotate a to the right (2 TIMES) (OR mask)
     198:  01:411F                      ;	ld	d, $DB			; d:=Mask for psg mixer (AND mask)
     199:  01:411F  16 DB               	ld	d, 0DBH		; d:=Mask for psg mixer (AND mask)
     200:  01:4121                      ; --- Dump to correct channel ---
     201:  01:4121  21 0C C0            	ld	hl,ayFX_CHANNEL		; Next ayFX playing channel
     202:  01:4124  46                  	ld	b,[hl]			; Channel counter
     203:  01:4125                      ; --- Check if playing channel was 1 ---
     204:  01:4125                      .CHK1:
     205:  01:4125  10 0D               	djnz	.CHK2			; Decrement and jump if channel was not 1
     206:  01:4127                      ; --- Play ayFX stream on channel C ---
     207:  01:4127                      .PLAY_C:	
     208:  01:4127  CD 56 41            	call	.SETMIXER		; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     209:  01:412A  32 95 C0            	ld	[PT3_AYREGS+10],a	; Volume copied in to AYREGS (channel C volume)
     210:  01:412D  CB 51               	bit	2,c			; If tone is off...
     211:  01:412F  C0                  	ret	nz			; ...return
     212:  01:4130  22 8F C0            	ld	[PT3_AYREGS+4],hl	; copied in to AYREGS (channel C tone)
     213:  01:4133  C9                  	ret				; Return
     214:  01:4134                      ; --- Check if playing channel was 2 ---
     215:  01:4134                      .CHK2:
     216:  01:4134  CB 0A               	rrc	d			; Rotate right AND mask
     217:  01:4136  0F                  	rrca				; Rotate right OR mask
     218:  01:4137  10 0D               	djnz	.CHK3			; Decrement and jump if channel was not 2
     219:  01:4139                      .PLAY_B:	; --- Play ayFX stream on channel B ---
     220:  01:4139  CD 56 41            	call	.SETMIXER		; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     221:  01:413C  32 94 C0            	ld	[PT3_AYREGS+9],a	; Volume copied in to AYREGS (channel B volume)
     222:  01:413F  CB 49               	bit	1,c			; If tone is off...
     223:  01:4141  C0                  	ret	nz			; ...return
     224:  01:4142  22 8D C0            	ld	[PT3_AYREGS+2],hl	; copied in to AYREGS (channel B tone)
     225:  01:4145  C9                  	ret				; Return
     226:  01:4146                      ; --- Check if playing channel was 3 ---
     227:  01:4146                      .CHK3:
     228:  01:4146  CB 0A               	rrc	d			; Rotate right AND mask
     229:  01:4148  0F                  	rrca				; Rotate right OR mask
     230:  01:4149                      ; --- Play ayFX stream on channel A ---
     231:  01:4149                      .PLAY_A:
     232:  01:4149  CD 56 41            	call	.SETMIXER		; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     233:  01:414C  32 93 C0            	ld	[PT3_AYREGS+8],a	; Volume copied in to AYREGS (channel A volume)
     234:  01:414F  CB 41               	bit	0,c			; If tone is off...
     235:  01:4151  C0                  	ret	nz			; ...return
     236:  01:4152  22 8B C0            	ld	[PT3_AYREGS+0],hl	; copied in to AYREGS (channel A tone)
     237:  01:4155  C9                  	ret				; Return
     238:  01:4156                      ; --- Set PSG mixer value ---
     239:  01:4156                      .SETMIXER:	
     240:  01:4156  4F                  	ld	c,a			; c:=OR mask
     241:  01:4157  3A 92 C0            	ld	a,[PT3_AYREGS+7]	; a:=PSG mixer value
     242:  01:415A  A2                  	and	d			; AND mask
     243:  01:415B  B1                  	or	c			; OR mask
     244:  01:415C  32 92 C0            	ld	[PT3_AYREGS+7],a	; PSG mixer value updated
     245:  01:415F  3A 0B C0            	ld	a,[ayFX_VOLUME]		; a:=ayFX volume value
     246:  01:4162  2A 08 C0            	ld	hl,[ayFX_TONE]		; ayFX tone value
     247:  01:4165  C9                  	ret				; Return
     248:  01:4166                      	
     249:  01:4166                      	IF ( AYFXRELATIVE == 1 )
     250:  01:4166                    ~ ; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     251:  01:4166                    ~ ; PT3_VT_:	.INCBIN	"VT.BIN"
     252:  01:4166                    ~ ; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     253:  01:4166                    ~ 	ENDIF
     254:  01:4166                      
     255:  01:4166                      	ENDMODULE AYFX_REPLAYER
     256:  01:4166                      ;-----------------------------------------------------------
     257:  01:4166                      ;| ------------------------------------------------------- |
     258:  01:4166                      ;| |                      F I N                          | |
     259:  01:4166                      ;| ------------------------------------------------------- |
     260:  01:4166                      ;-----------------------------------------------------------
      13.  01:4166                      INCLUDE	"PT3_replayer.asm"
       1:  01:4166                      ;-----------------------------------------------------------
       2:  01:4166                      ;| ------------------------------------------------------- |
       3:  01:4166                      ;| |                    I N I C I O                      | |
       4:  01:4166                      ;| ------------------------------------------------------- |
       5:  01:4166                      ;-----------------------------------------------------------
       6:  01:4166                      	MODULE PT3_REPLAYER
       7:  01:4166                      	
       8:  01:4166                      ; --- PT3 REPLAYER WORKING ON ROM ---
       9:  01:4166                      ; --- Can be assembled with asMSX ---
      10:  01:4166                      ; --- ROM version: MSX-KUN        ---
      11:  01:4166                      ; --- asMSX version: SapphiRe     ---
      12:  01:4166                      ; Based on MSX version of PT3 by Dioniso
      13:  01:4166                      ;
      14:  01:4166                      ; This version of the replayer uses a fixed volume and note table, if you need a 
      15:  01:4166                      ; different note table you can copy it from TABLES.TXT file, distributed with the
      16:  01:4166                      ; original PT3 distribution. This version also allows the use of PT3 commands.
      17:  01:4166                      ;
      18:  01:4166                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      19:  01:4166                      ;
      20:  01:4166                      ; ROM LENGTH: 1528 bytes
      21:  01:4166                      ; RAM LENGTH:  382 bytes
      22:  01:4166                      
      23:  01:4166                      ; --- VARIABLES ---
      24:  01:4166                      
      25:  01:4166  (01:C00D)           @PT3_SETUP:	#	1	;set bit0 to 1, if you want to play without looping
      26:  01:4166                      				;bit7 is set each time, when loop point is passed
      27:  01:4166  (01:C00E)           PT3_MODADDR:	#	2
      28:  01:4166  (01:C010)           PT3_CrPsPtr:	#	2
      29:  01:4166  (01:C012)           PT3_SAMPTRS:	#	2
      30:  01:4166  (01:C014)           PT3_OrnPtrs:	#	2
      31:  01:4166  (01:C016)           PT3_PDSP:	#	2
      32:  01:4166  (01:C018)           PT3_CSP:	#	2
      33:  01:4166  (01:C01A)           PT3_PSP:	#	2
      34:  01:4166  (01:C01C)           PT3_PrNote:	#	1
      35:  01:4166  (01:C01D)           PT3_PrSlide:	#	2
      36:  01:4166  (01:C01F)           PT3_AdInPtA:	#	2
      37:  01:4166  (01:C021)           PT3_AdInPtB:	#	2
      38:  01:4166  (01:C023)           PT3_AdInPtC:	#	2
      39:  01:4166  (01:C025)           PT3_LPosPtr:	#	2
      40:  01:4166  (01:C027)           PT3_PatsPtr:	#	2
      41:  01:4166  (01:C029)           PT3_Delay:	#	1
      42:  01:4166  (01:C02A)           PT3_AddToEn:	#	1
      43:  01:4166  (01:C02B)           PT3_Env_Del:	#	1
      44:  01:4166  (01:C02C)           PT3_ESldAdd:	#	2
      45:  01:4166  (01:C02E)           PT3_VARS:	#	0
      46:  01:4166  (01:C02E)           PT3_ChanA:	#	29	; CHNPRM_Size
      47:  01:4166  (01:C04B)           PT3_ChanB:	#	29	; CHNPRM_Size
      48:  01:4166  (01:C068)           PT3_ChanC:	#	29	; CHNPRM_Size
      49:  01:4166                      ;GlobalVars:
      50:  01:4166  (01:C085)           PT3_DelyCnt:	#	1
      51:  01:4166  (01:C086)           PT3_CurESld:	#	2
      52:  01:4166  (01:C088)           PT3_CurEDel:	#	1
      53:  01:4166                      PT3_Ns_Base_AddToNs:
      54:  01:4166  (01:C089)           PT3_Ns_Base:	#	1
      55:  01:4166  (01:C08A)           PT3_AddToNs:	#	1
      56:  01:4166  (01:C08B)           @PT3_AYREGS:	#	0
      57:  01:4166  (01:C08B)           PT3_VT_:	#	14
      58:  01:4166  (01:C099)           PT3_EnvBase:	#	2
      59:  01:4166  (01:C09B)           PT3_VAR0END:	#	240
      60:  01:4166                      
      61:  01:4166                      ; --- CONSTANT VALUES DEFINITION ---
      62:  01:4166                      
      63:  01:4166                      ;ChannelsVars
      64:  01:4166                      ;struc	CHNPRM
      65:  01:4166                      ;reset group
      66:  01:4166  (01:0000)           CHNPRM_PsInOr	= 0	;RESB 1
      67:  01:4166  (01:0001)           CHNPRM_PsInSm	= 1	;RESB 1
      68:  01:4166  (01:0002)           CHNPRM_CrAmSl	= 2	;RESB 1
      69:  01:4166  (01:0003)           CHNPRM_CrNsSl	= 3	;RESB 1
      70:  01:4166  (01:0004)           CHNPRM_CrEnSl	= 4	;RESB 1
      71:  01:4166  (01:0005)           CHNPRM_TSlCnt	= 5	;RESB 1
      72:  01:4166  (01:0006)           CHNPRM_CrTnSl	= 6	;RESW 1
      73:  01:4166  (01:0008)           CHNPRM_TnAcc	= 8	;RESW 1
      74:  01:4166  (01:000A)           CHNPRM_COnOff	= 10	;RESB 1
      75:  01:4166                      ;reset group
      76:  01:4166                      
      77:  01:4166  (01:000B)           CHNPRM_OnOffD	= 11	;RESB 1
      78:  01:4166                      
      79:  01:4166                      ;IX for PT3_DECOD here [+12]
      80:  01:4166  (01:000C)           CHNPRM_OffOnD	= 12	;RESB 1
      81:  01:4166  (01:000D)           CHNPRM_OrnPtr	= 13	;RESW 1
      82:  01:4166  (01:000F)           CHNPRM_SamPtr	= 15	;RESW 1
      83:  01:4166  (01:0011)           CHNPRM_NNtSkp	= 17	;RESB 1
      84:  01:4166  (01:0012)           CHNPRM_Note	= 18	;RESB 1
      85:  01:4166  (01:0013)           CHNPRM_SlToNt	= 19	;RESB 1
      86:  01:4166  (01:0014)           CHNPRM_Env_En	= 20	;RESB 1
      87:  01:4166  (01:0015)           CHNPRM_Flags	= 21	;RESB 1
      88:  01:4166                       ;Enabled - 0,SimpleGliss - 2
      89:  01:4166  (01:0016)           CHNPRM_TnSlDl	= 22	;RESB 1
      90:  01:4166  (01:0017)           CHNPRM_TSlStp	= 23	;RESW 1
      91:  01:4166  (01:0019)           CHNPRM_TnDelt	= 25	;RESW 1
      92:  01:4166  (01:001B)           CHNPRM_NtSkCn	= 27	;RESB 1
      93:  01:4166  (01:001C)           CHNPRM_Volume	= 28	;RESB 1
      94:  01:4166  (01:001D)           CHNPRM_Size	= 29	;RESB 1
      95:  01:4166                      ;endstruc
      96:  01:4166                      
      97:  01:4166                      ;struc	AR
      98:  01:4166  (01:0000)           AR_TonA		= 0	;RESW 1
      99:  01:4166  (01:0002)           AR_TonB		= 2	;RESW 1
     100:  01:4166  (01:0004)           AR_TonC		= 4	;RESW 1
     101:  01:4166  (01:0006)           AR_Noise	= 6	;RESB 1
     102:  01:4166  (01:0007)           AR_Mixer	= 7	;RESB 1
     103:  01:4166  (01:0008)           AR_AmplA	= 8	;RESB 1
     104:  01:4166  (01:0009)           AR_AmplB	= 9	;RESB 1
     105:  01:4166  (01:000A)           AR_AmplC	= 10	;RESB 1
     106:  01:4166  (01:000B)           AR_Env		= 11	;RESW 1
     107:  01:4166  (01:000D)           AR_EnvTp	= 13	;RESB 1
     108:  01:4166                      ;endstruc
     109:  01:4166                      
     110:  01:4166                      ;-----------------------------------------------------------
     111:  01:4166                      ; --- CODE STARTS HERE ---
     112:  01:4166                      PT3_CHECKLP:	
     113:  01:4166  21 0D C0            	LD	HL, PT3_SETUP
     114:  01:4169  CB FE               	SET	7, [HL]
     115:  01:416B  CB 46               	BIT	0, [HL]
     116:  01:416D  C8                  	RET	Z
     117:  01:416E  E1                  	POP	HL
     118:  01:416F  21 85 C0            	LD	HL, PT3_DelyCnt
     119:  01:4172  34                  	INC	[HL]
     120:  01:4173  21 49 C0            	LD	HL, PT3_ChanA + CHNPRM_NtSkCn
     121:  01:4176  34                  	INC	[HL]
     122:  01:4177                      PT3_MUTE:
     123:  01:4177  AF                  	XOR	A
     124:  01:4178  67                  	LD	H, A
     125:  01:4179  6F                  	LD	L, A
     126:  01:417A  32 93 C0            	LD	[PT3_AYREGS+AR_AmplA], A
     127:  01:417D  22 94 C0            	LD	[PT3_AYREGS+AR_AmplB], HL
     128:  01:4180  C3 2A 46            	JP	ROUT_A0
     129:  01:4183                      ;-----------------------------------------------------------
     130:  01:4183                      @PT3_INIT:	;HL - AddressOfModule - 100
     131:  01:4183  22 0E C0            	LD	[PT3_MODADDR], HL
     132:  01:4186  E5                  	PUSH	HL
     133:  01:4187  11 64 00            	LD 	DE, 100
     134:  01:418A  19                  	ADD	HL, DE
     135:  01:418B  7E                  	LD	A, [HL]
     136:  01:418C  32 29 C0            	LD	[PT3_Delay], A
     137:  01:418F  E5                  	PUSH	HL
     138:  01:4190  DD E1               	POP	IX
     139:  01:4192  19                  	ADD	HL, DE
     140:  01:4193  22 10 C0            	LD	[PT3_CrPsPtr], HL
     141:  01:4196  DD 5E 02            	LD	E, [IX+102-100]
     142:  01:4199  19                  	ADD	HL, DE
     143:  01:419A  23                  	INC	HL
     144:  01:419B  22 25 C0            	LD	[PT3_LPosPtr], HL
     145:  01:419E  D1                  	POP	DE
     146:  01:419F  DD 6E 03            	LD	L, [IX+103-100]
     147:  01:41A2  DD 66 04            	LD	H, [IX+104-100]
     148:  01:41A5  19                  	ADD	HL, DE
     149:  01:41A6  22 27 C0            	LD	[PT3_PatsPtr], HL
     150:  01:41A9  21 A9 00            	LD	HL, 169
     151:  01:41AC  19                  	ADD	HL, DE
     152:  01:41AD  22 14 C0            	LD	[PT3_OrnPtrs], HL
     153:  01:41B0  21 69 00            	LD	HL, 105
     154:  01:41B3  19                  	ADD	HL, DE
     155:  01:41B4  22 12 C0            	LD	[PT3_SAMPTRS], HL
     156:  01:41B7  21 0D C0            	LD	HL, PT3_SETUP
     157:  01:41BA  CB BE               	RES	7, [HL]
     158:  01:41BC                      ; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     159:  01:41BC  21 11 00            	ld	hl, $11
     160:  01:41BF  54                  	ld	d, h
     161:  01:41C0  5C                  	ld	e, h
     162:  01:41C1  DD 21 9B C0         	ld	IX, PT3_VT_+16
     163:  01:41C5  06 0F               	ld	b, 15
     164:  01:41C7                      .INITV1:
     165:  01:41C7  E5                  	push	hl
     166:  01:41C8  19                  	add	hl,de
     167:  01:41C9  EB                  	ex	de,hl
     168:  01:41CA  ED 62               	sbc	hl,hl
     169:  01:41CC  48                  	ld	c,b
     170:  01:41CD  06 10               	ld	b,16
     171:  01:41CF                      .INITV2:
     172:  01:41CF  7D                  	ld	a,l
     173:  01:41D0  17                  	rla
     174:  01:41D1  7C                  	ld	a,h
     175:  01:41D2  CE 00               	adc	a,0
     176:  01:41D4  DD 77 00            	ld	[ix],a
     177:  01:41D7  DD 23               	inc	ix
     178:  01:41D9  19                  	add	hl,de
     179:  01:41DA  10 F3               	djnz	.INITV2
     180:  01:41DC  E1                  	pop	hl
     181:  01:41DD  7B                  	ld	a,e
     182:  01:41DE  FE 77               	cp	$77
     183:  01:41E0  20 01               	jr	nz,.INITV3
     184:  01:41E2  1C                  	inc	e
     185:  01:41E3                      .INITV3:
     186:  01:41E3  41                  	ld	b,c
     187:  01:41E4  10 E1               	djnz	.INITV1
     188:  01:41E6                      ; --- INITIALIZE PT3 VARIABLES ---
     189:  01:41E6  AF                  	XOR A
     190:  01:41E7  21 2E C0            	LD HL, PT3_VARS
     191:  01:41EA  77                  	LD [HL],A
     192:  01:41EB  11 2F C0            	LD DE, PT3_VARS+1
     193:  01:41EE  01 6C 00            	LD BC, PT3_VAR0END-PT3_VARS-1
     194:  01:41F1  ED B0               	LDIR
     195:  01:41F3  3C                  	INC A
     196:  01:41F4  32 85 C0            	LD [PT3_DelyCnt],A
     197:  01:41F7  21 01 F0            	LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     198:  01:41FA  22 49 C0            	LD [PT3_ChanA+CHNPRM_NtSkCn],HL
     199:  01:41FD  22 66 C0            	LD [PT3_ChanB+CHNPRM_NtSkCn],HL
     200:  01:4200  22 83 C0            	LD [PT3_ChanC+CHNPRM_NtSkCn],HL
     201:  01:4203  21 4A 46            	LD HL, EMPTYSAMORN
     202:  01:4206  22 1F C0            	LD [PT3_AdInPtA],HL ;ptr to zero
     203:  01:4209  22 3B C0            	LD [PT3_ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
     204:  01:420C  22 58 C0            	LD [PT3_ChanB+CHNPRM_OrnPtr],HL ;in all versions from
     205:  01:420F  22 75 C0            	LD [PT3_ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
     206:  01:4212  22 3D C0            	LD [PT3_ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
     207:  01:4215  22 5A C0            	LD [PT3_ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
     208:  01:4218  22 77 C0            	LD [PT3_ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
     209:  01:421B                      				    ;also EMPTYSAMORN comment
     210:  01:421B  C9                  	RET
     211:  01:421C                      ;-----------------------------------------------------------
     212:  01:421C                      
     213:  01:421C                      ;-----------------------------------------------------------
     214:  01:421C                      ;pattern decoder
     215:  01:421C                      PD_OrSm:
     216:  01:421C  DD 36 08 00         	LD	[IX+(CHNPRM_Env_En-12)], 0
     217:  01:4220  CD A6 43            	CALL	PT3_SETORN
     218:  01:4223  0A                  	LD	A, [BC]
     219:  01:4224  03                  	INC	BC
     220:  01:4225  0F                  	RRCA
     221:  01:4226                      PD_SAM:
     222:  01:4226  87                  	ADD	A, A
     223:  01:4227                      PD_SAM_:
     224:  01:4227  5F                  	LD	E, A
     225:  01:4228  16 00               	LD D,0
     226:  01:422A  2A 12 C0            	LD HL,[PT3_SAMPTRS]
     227:  01:422D  19                  	ADD HL,DE
     228:  01:422E  5E                  	LD E,[HL]
     229:  01:422F  23                  	INC HL
     230:  01:4230  56                  	LD D,[HL]
     231:  01:4231  2A 0E C0            	LD HL,[PT3_MODADDR]
     232:  01:4234  19                  	ADD HL,DE
     233:  01:4235  DD 75 03            	LD [IX+(CHNPRM_SamPtr-12)],L
     234:  01:4238  DD 74 04            	LD [IX+(CHNPRM_SamPtr+1-12)],H
     235:  01:423B  18 41               	JR PD_LOOP
     236:  01:423D                      PD_VOL:
     237:  01:423D  07                  	RLCA
     238:  01:423E  07                  	RLCA
     239:  01:423F  07                  	RLCA
     240:  01:4240  07                  	RLCA
     241:  01:4241  DD 77 10            	LD [IX+(CHNPRM_Volume-12)],A
     242:  01:4244  18 3B               	JR PD_LP2
     243:  01:4246                      PD_EOff:
     244:  01:4246  DD 77 08            	LD [IX+(CHNPRM_Env_En-12)],A
     245:  01:4249  DD 77 F4            	LD [IX+(CHNPRM_PsInOr-12)],A
     246:  01:424C  18 33               	JR PD_LP2
     247:  01:424E                      PD_SorE:
     248:  01:424E  3D                  	DEC A
     249:  01:424F  20 07               	JR NZ, .PD_ENV
     250:  01:4251  0A                  	LD A,[BC]
     251:  01:4252  03                  	INC BC
     252:  01:4253  DD 77 05            	LD [IX+(CHNPRM_NNtSkp-12)],A
     253:  01:4256  18 29               	JR PD_LP2
     254:  01:4258                      .PD_ENV:
     255:  01:4258  CD 8A 43            	CALL PT3_SETENV
     256:  01:425B  18 24               	JR PD_LP2
     257:  01:425D                      PD_ORN:
     258:  01:425D  CD A6 43            	CALL PT3_SETORN
     259:  01:4260  18 1C               	JR PD_LOOP
     260:  01:4262                      PD_ESAM:	
     261:  01:4262  DD 77 08            	LD [IX+(CHNPRM_Env_En-12)],A
     262:  01:4265  DD 77 F4            	LD [IX+(CHNPRM_PsInOr-12)],A
     263:  01:4268  C4 8A 43            	CALL NZ, PT3_SETENV
     264:  01:426B  0A                  	LD A,[BC]
     265:  01:426C  03                  	INC BC
     266:  01:426D  18 B8               	JR PD_SAM_
     267:  01:426F                      PT3_DECOD:
     268:  01:426F  DD 7E 06            	LD A,[IX+(CHNPRM_Note-12)]
     269:  01:4272  32 1C C0            	LD [PT3_PrNote],A
     270:  01:4275  DD 6E FA            	LD L,[IX+(CHNPRM_CrTnSl-12)]
     271:  01:4278  DD 66 FB            	LD H,[IX+(CHNPRM_CrTnSl+1-12)]
     272:  01:427B  22 1D C0            	LD [PT3_PrSlide],HL
     273:  01:427E                      PD_LOOP:
     274:  01:427E  11 10 20            	LD DE,$2010
     275:  01:4281                      PD_LP2:
     276:  01:4281  0A                  	LD A,[BC]
     277:  01:4282  03                  	INC BC
     278:  01:4283  83                  	ADD A,E
     279:  01:4284  38 96               	JR C, PD_OrSm
     280:  01:4286  82                  	ADD A,D
     281:  01:4287  28 4A               	JR Z,PD_FIN
     282:  01:4289  38 9B               	JR C, PD_SAM
     283:  01:428B  83                  	ADD A,E
     284:  01:428C  28 25               	JR Z,PD_REL
     285:  01:428E  38 AD               	JR C, PD_VOL
     286:  01:4290  83                  	ADD A,E
     287:  01:4291  28 B3               	JR Z, PD_EOff
     288:  01:4293  38 B9               	JR C, PD_SorE
     289:  01:4295  C6 60               	ADD A,96
     290:  01:4297  38 20               	JR C,PD_NOTE
     291:  01:4299  83                  	ADD A,E
     292:  01:429A  38 C1               	JR C, PD_ORN
     293:  01:429C  82                  	ADD A,D
     294:  01:429D  38 0F               	JR C,PD_NOIS
     295:  01:429F  83                  	ADD A,E
     296:  01:42A0  38 C0               	JR C, PD_ESAM
     297:  01:42A2  87                  	ADD A,A
     298:  01:42A3  5F                  	LD E,A
     299:  01:42A4                      ; Esto funciona en AsMSX pero nó en sjasm y se cuelga...
     300:  01:42A4                      ;	LD HL,((SPCCOMS+$DF20)%65536)	; Adapted from original Speccy version (saves 6 bytes)
     301:  01:42A4                      ; Corrección para que funcione en sjasm y no pete...
     302:  01:42A4  21 DF 22            	LD HL,(SPCCOMS+57120)%65536	; Adapted from original Speccy version (saves 6 bytes)
     303:  01:42A7  19                  	ADD HL,DE
     304:  01:42A8  5E                  	LD E,[HL]
     305:  01:42A9  23                  	INC HL
     306:  01:42AA  56                  	LD D,[HL]
     307:  01:42AB  D5                  	PUSH DE
     308:  01:42AC  18 D0               	JR PD_LOOP
     309:  01:42AE                      PD_NOIS:
     310:  01:42AE  32 89 C0            	LD [PT3_Ns_Base],A
     311:  01:42B1  18 CE               	JR PD_LP2
     312:  01:42B3                      PD_REL:
     313:  01:42B3  DD CB 09 86         	RES 0,[IX+(CHNPRM_Flags-12)]
     314:  01:42B7  18 08               	JR PD_RES
     315:  01:42B9                      PD_NOTE:
     316:  01:42B9  DD 77 06            	LD [IX+(CHNPRM_Note-12)],A
     317:  01:42BC  DD CB 09 C6         	SET 0,[IX+(CHNPRM_Flags-12)]
     318:  01:42C0  AF                  	XOR A
     319:  01:42C1                      PD_RES:	
     320:  01:42C1  ED 73 16 C0         	LD [PT3_PDSP],SP
     321:  01:42C5  DD F9               	LD SP,IX
     322:  01:42C7  67                  	LD H,A
     323:  01:42C8  6F                  	LD L,A
     324:  01:42C9  E5                  	PUSH HL
     325:  01:42CA  E5                  	PUSH HL
     326:  01:42CB  E5                  	PUSH HL
     327:  01:42CC  E5                  	PUSH HL
     328:  01:42CD  E5                  	PUSH HL
     329:  01:42CE  E5                  	PUSH HL
     330:  01:42CF  ED 7B 16 C0         	LD SP,[PT3_PDSP]
     331:  01:42D3                      PD_FIN:	
     332:  01:42D3  DD 7E 05            	LD A,[IX+(CHNPRM_NNtSkp-12)]
     333:  01:42D6  DD 77 0F            	LD [IX+(CHNPRM_NtSkCn-12)],A
     334:  01:42D9  C9                  	RET
     335:  01:42DA                      C_PORTM:
     336:  01:42DA  DD CB 09 96         	RES 2,[IX+(CHNPRM_Flags-12)]
     337:  01:42DE  0A                  	LD A,[BC]
     338:  01:42DF  03                  	INC BC
     339:  01:42E0                      ;SKIP PRECALCULATED TONE DELTA [BECAUSE CANNOT BE RIGHT AFTER PT3 COMPILATION]
     340:  01:42E0  03                  	INC BC
     341:  01:42E1  03                  	INC BC
     342:  01:42E2  DD 77 0A            	LD [IX+(CHNPRM_TnSlDl-12)],A
     343:  01:42E5  DD 77 F9            	LD [IX+(CHNPRM_TSlCnt-12)],A
     344:  01:42E8  11 4E 46            	LD DE, PT3_NT_
     345:  01:42EB  DD 7E 06            	LD A,[IX+(CHNPRM_Note-12)]
     346:  01:42EE  DD 77 07            	LD [IX+(CHNPRM_SlToNt-12)],A
     347:  01:42F1  87                  	ADD A,A
     348:  01:42F2  6F                  	LD L,A
     349:  01:42F3  26 00               	LD H,0
     350:  01:42F5  19                  	ADD HL,DE
     351:  01:42F6  7E                  	LD A,[HL]
     352:  01:42F7  23                  	INC HL
     353:  01:42F8  66                  	LD H,[HL]
     354:  01:42F9  6F                  	LD L,A
     355:  01:42FA  E5                  	PUSH HL
     356:  01:42FB  3A 1C C0            	LD A,[PT3_PrNote]
     357:  01:42FE  DD 77 06            	LD [IX+(CHNPRM_Note-12)],A
     358:  01:4301  87                  	ADD A,A
     359:  01:4302  6F                  	LD L,A
     360:  01:4303  26 00               	LD H,0
     361:  01:4305  19                  	ADD HL,DE
     362:  01:4306  5E                  	LD E,[HL]
     363:  01:4307  23                  	INC HL
     364:  01:4308  56                  	LD D,[HL]
     365:  01:4309  E1                  	POP HL
     366:  01:430A  ED 52               	SBC HL,DE
     367:  01:430C  DD 75 0D            	LD [IX+(CHNPRM_TnDelt-12)],L
     368:  01:430F  DD 74 0E            	LD [IX+(CHNPRM_TnDelt+1-12)],H
     369:  01:4312  ED 5B 1D C0         	LD DE,[PT3_PrSlide]
     370:  01:4316  DD 73 FA            	LD [IX+(CHNPRM_CrTnSl-12)],E
     371:  01:4319  DD 72 FB            	LD [IX+(CHNPRM_CrTnSl+1-12)],D
     372:  01:431C  0A                  	LD A,[BC] ;SIGNED TONE STEP
     373:  01:431D  03                  	INC BC
     374:  01:431E  08                  	EX AF,AF'
     375:  01:431F  0A                  	LD A,[BC]
     376:  01:4320  03                  	INC BC
     377:  01:4321  A7                  	AND A
     378:  01:4322  28 01               	JR Z,.NOSIG
     379:  01:4324  EB                  	EX DE,HL
     380:  01:4325                      .NOSIG:
     381:  01:4325  ED 52               	SBC HL,DE
     382:  01:4327  F2 2F 43            	JP P, SET_STP
     383:  01:432A  2F                  	CPL
     384:  01:432B  08                  	EX AF,AF'
     385:  01:432C  ED 44               	NEG
     386:  01:432E  08                  	EX AF,AF'
     387:  01:432F                      SET_STP:
     388:  01:432F  DD 77 0C            	LD [IX+(CHNPRM_TSlStp+1-12)],A
     389:  01:4332  08                  	EX AF,AF'
     390:  01:4333  DD 77 0B            	LD [IX+(CHNPRM_TSlStp-12)],A
     391:  01:4336  DD 36 FE 00         	LD [IX+(CHNPRM_COnOff-12)],0
     392:  01:433A  C9                  	RET
     393:  01:433B                      C_GLISS:
     394:  01:433B  DD CB 09 D6         	SET 2,[IX+(CHNPRM_Flags-12)]
     395:  01:433F  0A                  	LD A,[BC]
     396:  01:4340  03                  	INC BC
     397:  01:4341  DD 77 0A            	LD [IX+(CHNPRM_TnSlDl-12)],A
     398:  01:4344  DD 77 F9            	LD [IX+(CHNPRM_TSlCnt-12)],A
     399:  01:4347  0A                  	LD A,[BC]
     400:  01:4348  03                  	INC BC
     401:  01:4349  08                  	EX AF,AF'
     402:  01:434A  0A                  	LD A,[BC]
     403:  01:434B  03                  	INC BC
     404:  01:434C  18 E1               	JR SET_STP
     405:  01:434E                      C_SMPOS:
     406:  01:434E  0A                  	LD A,[BC]
     407:  01:434F  03                  	INC BC
     408:  01:4350  DD 77 F5            	LD [IX+(CHNPRM_PsInSm-12)],A
     409:  01:4353  C9                  	RET
     410:  01:4354                      C_ORPOS:
     411:  01:4354  0A                  	LD A,[BC]
     412:  01:4355  03                  	INC BC
     413:  01:4356  DD 77 F4            	LD [IX+(CHNPRM_PsInOr-12)],A
     414:  01:4359  C9                  	RET
     415:  01:435A                      C_VIBRT:
     416:  01:435A  0A                  	LD A,[BC]
     417:  01:435B  03                  	INC BC
     418:  01:435C  DD 77 FF            	LD [IX+(CHNPRM_OnOffD-12)],A
     419:  01:435F  DD 77 FE            	LD [IX+(CHNPRM_COnOff-12)],A
     420:  01:4362  0A                  	LD A,[BC]
     421:  01:4363  03                  	INC BC
     422:  01:4364  DD 77 00            	LD [IX+(CHNPRM_OffOnD-12)],A
     423:  01:4367  AF                  	XOR A
     424:  01:4368  DD 77 F9            	LD [IX+(CHNPRM_TSlCnt-12)],A
     425:  01:436B  DD 77 FA            	LD [IX+(CHNPRM_CrTnSl-12)],A
     426:  01:436E  DD 77 FB            	LD [IX+(CHNPRM_CrTnSl+1-12)],A
     427:  01:4371  C9                  	RET
     428:  01:4372                      C_ENGLS:
     429:  01:4372  0A                  	LD A,[BC]
     430:  01:4373  03                  	INC BC
     431:  01:4374  32 2B C0            	LD [PT3_Env_Del],A
     432:  01:4377  32 88 C0            	LD [PT3_CurEDel],A
     433:  01:437A  0A                  	LD A,[BC]
     434:  01:437B  03                  	INC BC
     435:  01:437C  6F                  	LD L,A
     436:  01:437D  0A                  	LD A,[BC]
     437:  01:437E  03                  	INC BC
     438:  01:437F  67                  	LD H,A
     439:  01:4380  22 2C C0            	LD [PT3_ESldAdd],HL
     440:  01:4383  C9                  	RET
     441:  01:4384                      C_DELAY:
     442:  01:4384  0A                  	LD A,[BC]
     443:  01:4385  03                  	INC BC
     444:  01:4386  32 29 C0            	LD [PT3_Delay],A
     445:  01:4389  C9                  	RET
     446:  01:438A                      ;-----------------------------------------------------------
     447:  01:438A                      PT3_SETENV:
     448:  01:438A  DD 73 08            	LD [IX+(CHNPRM_Env_En-12)],E
     449:  01:438D  32 98 C0            	LD [PT3_AYREGS+AR_EnvTp],A
     450:  01:4390  0A                  	LD A,[BC]
     451:  01:4391  03                  	INC BC
     452:  01:4392  67                  	LD H,A
     453:  01:4393  0A                  	LD A,[BC]
     454:  01:4394  03                  	INC BC
     455:  01:4395  6F                  	LD L,A
     456:  01:4396  22 99 C0            	LD [PT3_EnvBase],HL
     457:  01:4399  AF                  	XOR A
     458:  01:439A  DD 77 F4            	LD [IX+(CHNPRM_PsInOr-12)],A
     459:  01:439D  32 88 C0            	LD [PT3_CurEDel],A
     460:  01:43A0  67                  	LD H,A
     461:  01:43A1  6F                  	LD L,A
     462:  01:43A2  22 86 C0            	LD [PT3_CurESld],HL
     463:  01:43A5                      C_NOP:
     464:  01:43A5  C9                  	RET
     465:  01:43A6                      PT3_SETORN:
     466:  01:43A6  87                  	ADD A,A
     467:  01:43A7  5F                  	LD E,A
     468:  01:43A8  16 00               	LD D,0
     469:  01:43AA  DD 72 F4            	LD [IX+(CHNPRM_PsInOr-12)],D
     470:  01:43AD  2A 14 C0            	LD HL,[PT3_OrnPtrs]
     471:  01:43B0  19                  	ADD HL,DE
     472:  01:43B1  5E                  	LD E,[HL]
     473:  01:43B2  23                  	INC HL
     474:  01:43B3  56                  	LD D,[HL]
     475:  01:43B4  2A 0E C0            	LD HL,[PT3_MODADDR]
     476:  01:43B7  19                  	ADD HL,DE
     477:  01:43B8  DD 75 01            	LD [IX+(CHNPRM_OrnPtr-12)],L
     478:  01:43BB  DD 74 02            	LD [IX+(CHNPRM_OrnPtr+1-12)],H
     479:  01:43BE  C9                  	RET
     480:  01:43BF                      	
     481:  01:43BF                      ;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     482:  01:43BF                      SPCCOMS:
     483:  01:43BF  A5 43               	DW C_NOP
     484:  01:43C1  3B 43               	DW C_GLISS
     485:  01:43C3  DA 42               	DW C_PORTM
     486:  01:43C5  4E 43               	DW C_SMPOS
     487:  01:43C7  54 43               	DW C_ORPOS
     488:  01:43C9  5A 43               	DW C_VIBRT
     489:  01:43CB  A5 43               	DW C_NOP
     490:  01:43CD  A5 43               	DW C_NOP
     491:  01:43CF  72 43               	DW C_ENGLS
     492:  01:43D1  84 43               	DW C_DELAY
     493:  01:43D3  A5 43               	DW C_NOP
     494:  01:43D5  A5 43               	DW C_NOP
     495:  01:43D7  A5 43               	DW C_NOP
     496:  01:43D9  A5 43               	DW C_NOP
     497:  01:43DB  A5 43               	DW C_NOP
     498:  01:43DD  A5 43               	DW C_NOP
     499:  01:43DF                      	
     500:  01:43DF                      PT3_CHREGS:
     501:  01:43DF  AF                  	XOR A
     502:  01:43E0  32 95 C0            	LD [PT3_AYREGS+AR_AmplC],A
     503:  01:43E3  DD CB 15 46         	BIT 0,[IX+CHNPRM_Flags]
     504:  01:43E7  E5                  	PUSH HL
     505:  01:43E8  CA 0E 45            	JP Z,.CH_EXIT
     506:  01:43EB  ED 73 18 C0         	LD [PT3_CSP],SP
     507:  01:43EF  DD 6E 0D            	LD L,[IX+CHNPRM_OrnPtr]
     508:  01:43F2  DD 66 0E            	LD H,[IX+CHNPRM_OrnPtr+1]
     509:  01:43F5  F9                  	LD SP,HL
     510:  01:43F6  D1                  	POP DE
     511:  01:43F7  67                  	LD H,A
     512:  01:43F8  DD 7E 00            	LD A,[IX+CHNPRM_PsInOr]
     513:  01:43FB  6F                  	LD L,A
     514:  01:43FC  39                  	ADD HL,SP
     515:  01:43FD  3C                  	INC A
     516:  01:43FE  BA                  	CP D
     517:  01:43FF  38 01               	JR C,.CH_ORPS
     518:  01:4401  7B                  	LD A,E
     519:  01:4402                      .CH_ORPS:
     520:  01:4402  DD 77 00            	LD [IX+CHNPRM_PsInOr],A
     521:  01:4405  DD 7E 12            	LD A,[IX+CHNPRM_Note]
     522:  01:4408  86                  	ADD A,[HL]
     523:  01:4409  F2 0D 44            	JP P,.CH_NTP
     524:  01:440C  AF                  	XOR A
     525:  01:440D                      .CH_NTP:
     526:  01:440D  FE 60               	CP 96
     527:  01:440F  38 02               	JR C,.CH_NOK
     528:  01:4411  3E 5F               	LD A,95
     529:  01:4413                      .CH_NOK:
     530:  01:4413  87                  	ADD A,A
     531:  01:4414  08                  	EX AF,AF'
     532:  01:4415  DD 6E 0F            	LD L,[IX+CHNPRM_SamPtr]
     533:  01:4418  DD 66 10            	LD H,[IX+CHNPRM_SamPtr+1]
     534:  01:441B  F9                  	LD SP,HL
     535:  01:441C  D1                  	POP DE
     536:  01:441D  26 00               	LD H,0
     537:  01:441F  DD 7E 01            	LD A,[IX+CHNPRM_PsInSm]
     538:  01:4422  47                  	LD B,A
     539:  01:4423  87                  	ADD A,A
     540:  01:4424  87                  	ADD A,A
     541:  01:4425  6F                  	LD L,A
     542:  01:4426  39                  	ADD HL,SP
     543:  01:4427  F9                  	LD SP,HL
     544:  01:4428  78                  	LD A,B
     545:  01:4429  3C                  	INC A
     546:  01:442A  BA                  	CP D
     547:  01:442B  38 01               	JR C,.CH_SMPS
     548:  01:442D  7B                  	LD A,E
     549:  01:442E                      .CH_SMPS:
     550:  01:442E  DD 77 01            	LD [IX+CHNPRM_PsInSm],A
     551:  01:4431  C1                  	POP BC
     552:  01:4432  E1                  	POP HL
     553:  01:4433  DD 5E 08            	LD E,[IX+CHNPRM_TnAcc]
     554:  01:4436  DD 56 09            	LD D,[IX+CHNPRM_TnAcc+1]
     555:  01:4439  19                  	ADD HL,DE
     556:  01:443A  CB 70               	BIT 6,B
     557:  01:443C  28 06               	JR Z,.CH_NOAC
     558:  01:443E  DD 75 08            	LD [IX+CHNPRM_TnAcc],L
     559:  01:4441  DD 74 09            	LD [IX+CHNPRM_TnAcc+1],H
     560:  01:4444                      .CH_NOAC:
     561:  01:4444  EB                  	EX DE,HL
     562:  01:4445  08                  	EX AF,AF'
     563:  01:4446  6F                  	LD L,A
     564:  01:4447  26 00               	LD H,0
     565:  01:4449  31 4E 46            	LD SP, PT3_NT_
     566:  01:444C  39                  	ADD HL,SP
     567:  01:444D  F9                  	LD SP,HL
     568:  01:444E  E1                  	POP HL
     569:  01:444F  19                  	ADD HL,DE
     570:  01:4450  DD 5E 06            	LD E,[IX+CHNPRM_CrTnSl]
     571:  01:4453  DD 56 07            	LD D,[IX+CHNPRM_CrTnSl+1]
     572:  01:4456  19                  	ADD HL,DE
     573:  01:4457  ED 7B 18 C0         	LD SP,[PT3_CSP]
     574:  01:445B  E3                  	EX [SP],HL
     575:  01:445C  AF                  	XOR A
     576:  01:445D  DD B6 05            	OR [IX+CHNPRM_TSlCnt]
     577:  01:4460  28 3E               	JR Z,.CH_AMP
     578:  01:4462  DD 35 05            	DEC [IX+CHNPRM_TSlCnt]
     579:  01:4465  20 39               	JR NZ,.CH_AMP
     580:  01:4467  DD 7E 16            	LD A,[IX+CHNPRM_TnSlDl]
     581:  01:446A  DD 77 05            	LD [IX+CHNPRM_TSlCnt],A
     582:  01:446D  DD 6E 17            	LD L,[IX+CHNPRM_TSlStp]
     583:  01:4470  DD 66 18            	LD H,[IX+CHNPRM_TSlStp+1]
     584:  01:4473  7C                  	LD A,H
     585:  01:4474  19                  	ADD HL,DE
     586:  01:4475  DD 75 06            	LD [IX+CHNPRM_CrTnSl],L
     587:  01:4478  DD 74 07            	LD [IX+CHNPRM_CrTnSl+1],H
     588:  01:447B  DD CB 15 56         	BIT 2,[IX+CHNPRM_Flags]
     589:  01:447F  20 1F               	JR NZ,.CH_AMP
     590:  01:4481  DD 5E 19            	LD E,[IX+CHNPRM_TnDelt]
     591:  01:4484  DD 56 1A            	LD D,[IX+CHNPRM_TnDelt+1]
     592:  01:4487  A7                  	AND A
     593:  01:4488  28 01               	JR Z,.CH_STPP
     594:  01:448A  EB                  	EX DE,HL
     595:  01:448B                      .CH_STPP:
     596:  01:448B  ED 52               	SBC HL,DE
     597:  01:448D  FA A0 44            	JP M,.CH_AMP
     598:  01:4490  DD 7E 13            	LD A,[IX+CHNPRM_SlToNt]
     599:  01:4493  DD 77 12            	LD [IX+CHNPRM_Note],A
     600:  01:4496  AF                  	XOR A
     601:  01:4497  DD 77 05            	LD [IX+CHNPRM_TSlCnt],A
     602:  01:449A  DD 77 06            	LD [IX+CHNPRM_CrTnSl],A
     603:  01:449D  DD 77 07            	LD [IX+CHNPRM_CrTnSl+1],A
     604:  01:44A0                      .CH_AMP:
     605:  01:44A0  DD 7E 02            	LD A,[IX+CHNPRM_CrAmSl]
     606:  01:44A3  CB 79               	BIT 7,C
     607:  01:44A5  28 13               	JR Z,.CH_NOAM
     608:  01:44A7  CB 71               	BIT 6,C
     609:  01:44A9  28 07               	JR Z,.CH_AMIN
     610:  01:44AB  FE 0F               	CP 15
     611:  01:44AD  28 0B               	JR Z,.CH_NOAM
     612:  01:44AF  3C                  	INC A
     613:  01:44B0  18 05               	JR .CH_SVAM
     614:  01:44B2                      .CH_AMIN:
     615:  01:44B2  FE F1               	CP -15
     616:  01:44B4  28 04               	JR Z,.CH_NOAM
     617:  01:44B6  3D                  	DEC A
     618:  01:44B7                      .CH_SVAM:
     619:  01:44B7  DD 77 02            	LD [IX+CHNPRM_CrAmSl],A
     620:  01:44BA                      .CH_NOAM:
     621:  01:44BA  6F                  	LD L,A
     622:  01:44BB  78                  	LD A,B
     623:  01:44BC  E6 0F               	AND 15
     624:  01:44BE  85                  	ADD A,L
     625:  01:44BF  F2 C3 44            	JP P,.CH_APOS
     626:  01:44C2  AF                  	XOR A
     627:  01:44C3                      .CH_APOS:
     628:  01:44C3  FE 10               	CP 16
     629:  01:44C5  38 02               	JR C,.CH_VOL
     630:  01:44C7  3E 0F               	LD A,15
     631:  01:44C9                      .CH_VOL:
     632:  01:44C9  DD B6 1C            	OR [IX+CHNPRM_Volume]
     633:  01:44CC  6F                  	LD L,A
     634:  01:44CD  26 00               	LD H,0
     635:  01:44CF  11 8B C0            	LD DE, PT3_VT_
     636:  01:44D2  19                  	ADD HL,DE
     637:  01:44D3  7E                  	LD A,[HL]
     638:  01:44D4                      .CH_ENV:
     639:  01:44D4  CB 41               	BIT 0,C
     640:  01:44D6  20 03               	JR NZ,.CH_NOEN
     641:  01:44D8  DD B6 14            	OR [IX+CHNPRM_Env_En]
     642:  01:44DB                      .CH_NOEN:
     643:  01:44DB  32 95 C0            	LD [PT3_AYREGS+AR_AmplC],A
     644:  01:44DE  CB 78               	BIT 7,B
     645:  01:44E0  79                  	LD A,C
     646:  01:44E1  28 19               	JR Z,.NO_ENSL
     647:  01:44E3  17                  	RLA
     648:  01:44E4  17                  	RLA
     649:  01:44E5  CB 2F               	SRA A
     650:  01:44E7  CB 2F               	SRA A
     651:  01:44E9  CB 2F               	SRA A
     652:  01:44EB  DD 86 04            	ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
     653:  01:44EE  CB 68               	BIT 5,B
     654:  01:44F0  28 03               	JR Z,.NO_ENAC
     655:  01:44F2  DD 77 04            	LD [IX+CHNPRM_CrEnSl],A
     656:  01:44F5                      .NO_ENAC:
     657:  01:44F5  21 2A C0            	LD HL,PT3_AddToEn
     658:  01:44F8  86                  	ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE. ;FIX IT IN NEXT VERSION?
     659:  01:44F9  77                  	LD [HL],A
     660:  01:44FA  18 0E               	JR .CH_MIX
     661:  01:44FC                      .NO_ENSL:
     662:  01:44FC  1F                  	RRA
     663:  01:44FD  DD 86 03            	ADD A,[IX+CHNPRM_CrNsSl]
     664:  01:4500  32 8A C0            	LD [PT3_AddToNs],A
     665:  01:4503  CB 68               	BIT 5,B
     666:  01:4505  28 03               	JR Z,.CH_MIX
     667:  01:4507  DD 77 03            	LD [IX+CHNPRM_CrNsSl],A
     668:  01:450A                      .CH_MIX:
     669:  01:450A  78                  	LD A,B
     670:  01:450B  1F                  	RRA
     671:  01:450C  E6 48               	AND $48
     672:  01:450E                      .CH_EXIT:
     673:  01:450E  21 92 C0            	LD HL, PT3_AYREGS+AR_Mixer
     674:  01:4511  B6                  	OR [HL]
     675:  01:4512  0F                  	RRCA
     676:  01:4513  77                  	LD [HL],A
     677:  01:4514  E1                  	POP HL
     678:  01:4515  AF                  	XOR A
     679:  01:4516  DD B6 0A            	OR [IX+CHNPRM_COnOff]
     680:  01:4519  C8                  	RET Z
     681:  01:451A  DD 35 0A            	DEC [IX+CHNPRM_COnOff]
     682:  01:451D  C0                  	RET NZ
     683:  01:451E  DD AE 15            	XOR [IX+CHNPRM_Flags]
     684:  01:4521  DD 77 15            	LD [IX+CHNPRM_Flags],A
     685:  01:4524  1F                  	RRA
     686:  01:4525  DD 7E 0B            	LD A,[IX+CHNPRM_OnOffD]
     687:  01:4528  38 03               	JR C,.CH_ONDL
     688:  01:452A  DD 7E 0C            	LD A,[IX+CHNPRM_OffOnD]
     689:  01:452D                      .CH_ONDL:
     690:  01:452D  DD 77 0A            	LD [IX+CHNPRM_COnOff],A
     691:  01:4530  C9                  	RET
     692:  01:4531                      @PT3_PLAY:
     693:  01:4531  AF                  	XOR A
     694:  01:4532  32 2A C0            	LD [PT3_AddToEn],A
     695:  01:4535  32 92 C0            	LD [PT3_AYREGS+AR_Mixer],A
     696:  01:4538  3D                  	DEC A
     697:  01:4539  32 98 C0            	LD [PT3_AYREGS+AR_EnvTp],A
     698:  01:453C  21 85 C0            	LD HL, PT3_DelyCnt
     699:  01:453F  35                  	DEC [HL]
     700:  01:4540  C2 C7 45            	JP NZ,.PL2
     701:  01:4543  21 49 C0            	LD HL, PT3_ChanA + CHNPRM_NtSkCn
     702:  01:4546  35                  	DEC [HL]
     703:  01:4547  20 4E               	JR NZ,.PL1B
     704:  01:4549  ED 4B 1F C0         	LD BC,[PT3_AdInPtA]
     705:  01:454D  0A                  	LD A,[BC]
     706:  01:454E  A7                  	AND A
     707:  01:454F  20 3B               	JR NZ,.PL1A
     708:  01:4551  57                  	LD D,A
     709:  01:4552  32 89 C0            	LD [PT3_Ns_Base],A
     710:  01:4555  2A 10 C0            	LD HL,[PT3_CrPsPtr]
     711:  01:4558  23                  	INC HL
     712:  01:4559  7E                  	LD A,[HL]
     713:  01:455A  3C                  	INC A
     714:  01:455B  20 08               	JR NZ,.PLNLP
     715:  01:455D  CD 66 41            	CALL PT3_CHECKLP
     716:  01:4560  2A 25 C0            	LD HL,[PT3_LPosPtr]
     717:  01:4563  7E                  	LD A,[HL]
     718:  01:4564  3C                  	INC A
     719:  01:4565                      .PLNLP:
     720:  01:4565  22 10 C0            	LD [PT3_CrPsPtr],HL
     721:  01:4568  3D                  	DEC A
     722:  01:4569  87                  	ADD A,A
     723:  01:456A  5F                  	LD E,A
     724:  01:456B  CB 12               	RL D
     725:  01:456D  2A 27 C0            	LD HL,[PT3_PatsPtr]
     726:  01:4570  19                  	ADD HL,DE
     727:  01:4571  ED 5B 0E C0         	LD DE,[PT3_MODADDR]
     728:  01:4575  ED 73 1A C0         	LD [PT3_PSP],SP
     729:  01:4579  F9                  	LD SP,HL
     730:  01:457A  E1                  	POP HL
     731:  01:457B  19                  	ADD HL,DE
     732:  01:457C  44                  	LD B,H
     733:  01:457D  4D                  	LD C,L
     734:  01:457E  E1                  	POP HL
     735:  01:457F  19                  	ADD HL,DE
     736:  01:4580  22 21 C0            	LD [PT3_AdInPtB],HL
     737:  01:4583  E1                  	POP HL
     738:  01:4584  19                  	ADD HL,DE
     739:  01:4585  22 23 C0            	LD [PT3_AdInPtC],HL
     740:  01:4588  ED 7B 1A C0         	LD SP,[PT3_PSP]
     741:  01:458C                      .PL1A:	
     742:  01:458C  DD 21 3A C0         	LD IX, PT3_ChanA + 12
     743:  01:4590  CD 6F 42            	CALL PT3_DECOD
     744:  01:4593  ED 43 1F C0         	LD [PT3_AdInPtA],BC
     745:  01:4597                      .PL1B:
     746:  01:4597  21 66 C0            	LD HL, PT3_ChanB + CHNPRM_NtSkCn
     747:  01:459A  35                  	DEC [HL]
     748:  01:459B  20 0F               	JR NZ,.PL1C
     749:  01:459D  DD 21 57 C0         	LD IX, PT3_ChanB + 12
     750:  01:45A1  ED 4B 21 C0         	LD BC,[PT3_AdInPtB]
     751:  01:45A5  CD 6F 42            	CALL PT3_DECOD
     752:  01:45A8  ED 43 21 C0         	LD [PT3_AdInPtB],BC
     753:  01:45AC                      .PL1C:
     754:  01:45AC  21 83 C0            	LD HL, PT3_ChanC + CHNPRM_NtSkCn
     755:  01:45AF  35                  	DEC [HL]
     756:  01:45B0  20 0F               	JR NZ,.PL1D
     757:  01:45B2  DD 21 74 C0         	LD IX, PT3_ChanC + 12
     758:  01:45B6  ED 4B 23 C0         	LD BC,[PT3_AdInPtC]
     759:  01:45BA  CD 6F 42            	CALL PT3_DECOD
     760:  01:45BD  ED 43 23 C0         	LD [PT3_AdInPtC],BC
     761:  01:45C1                      .PL1D:
     762:  01:45C1  3A 29 C0            	LD A,[PT3_Delay]
     763:  01:45C4  32 85 C0            	LD [PT3_DelyCnt],A
     764:  01:45C7                      .PL2:	
     765:  01:45C7  DD 21 2E C0         	LD IX, PT3_ChanA
     766:  01:45CB  2A 8B C0            	LD HL,[PT3_AYREGS+AR_TonA]
     767:  01:45CE  CD DF 43            	CALL PT3_CHREGS
     768:  01:45D1  22 8B C0            	LD [PT3_AYREGS+AR_TonA],HL
     769:  01:45D4  3A 95 C0            	LD A, [PT3_AYREGS+AR_AmplC]
     770:  01:45D7  32 93 C0            	LD [PT3_AYREGS+AR_AmplA],A
     771:  01:45DA  DD 21 4B C0         	LD IX, PT3_ChanB
     772:  01:45DE  2A 8D C0            	LD HL,[PT3_AYREGS+AR_TonB]
     773:  01:45E1  CD DF 43            	CALL PT3_CHREGS
     774:  01:45E4  22 8D C0            	LD [PT3_AYREGS+AR_TonB],HL
     775:  01:45E7  3A 95 C0            	LD A,[PT3_AYREGS+AR_AmplC]
     776:  01:45EA  32 94 C0            	LD [PT3_AYREGS+AR_AmplB],A
     777:  01:45ED  DD 21 68 C0         	LD IX, PT3_ChanC
     778:  01:45F1  2A 8F C0            	LD HL,[PT3_AYREGS+AR_TonC]
     779:  01:45F4  CD DF 43            	CALL PT3_CHREGS
     780:  01:45F7  22 8F C0            	LD [PT3_AYREGS+AR_TonC],HL
     781:  01:45FA  2A 66 41            	LD HL,[PT3_Ns_Base_AddToNs]
     782:  01:45FD  7C                  	LD A,H
     783:  01:45FE  85                  	ADD A,L
     784:  01:45FF  32 91 C0            	LD [PT3_AYREGS+AR_Noise],A
     785:  01:4602  3A 2A C0            	LD A,[PT3_AddToEn]
     786:  01:4605  5F                  	LD E,A
     787:  01:4606  87                  	ADD A,A
     788:  01:4607  9F                  	SBC A,A
     789:  01:4608  57                  	LD D,A
     790:  01:4609  2A 99 C0            	LD HL,[PT3_EnvBase]
     791:  01:460C  19                  	ADD HL,DE
     792:  01:460D  ED 5B 86 C0         	LD DE,[PT3_CurESld]
     793:  01:4611  19                  	ADD HL,DE
     794:  01:4612  22 96 C0            	LD [PT3_AYREGS+AR_Env],HL
     795:  01:4615  AF                  	XOR A
     796:  01:4616  21 88 C0            	LD HL,PT3_CurEDel
     797:  01:4619  B6                  	OR [HL]
     798:  01:461A  C8                  	RET Z
     799:  01:461B  35                  	DEC [HL]
     800:  01:461C  C0                  	RET NZ
     801:  01:461D  3A 2B C0            	LD A,[PT3_Env_Del]
     802:  01:4620  77                  	LD [HL],A
     803:  01:4621  2A 2C C0            	LD HL,[PT3_ESldAdd]
     804:  01:4624  19                  	ADD HL,DE
     805:  01:4625  22 86 C0            	LD [PT3_CurESld],HL
     806:  01:4628  C9                  	RET
     807:  01:4629                      ;-----------------------------------------------------------
     808:  01:4629                      
     809:  01:4629                      ;-----------------------------------------------------------
     810:  01:4629                      @PT3_ROUT:
     811:  01:4629  AF                  	XOR A
     812:  01:462A                      ; --- FIXES BITS 6 AND 7 OF MIXER ---
     813:  01:462A                      ROUT_A0:	
     814:  01:462A  21 92 C0            	LD	HL, PT3_AYREGS+AR_Mixer
     815:  01:462D  CB FE               	SET	7, [HL]
     816:  01:462F  CB B6               	RES	6, [HL]
     817:  01:4631  0E A0               	LD	C, $A0
     818:  01:4633  21 8B C0            	LD	HL, PT3_AYREGS
     819:  01:4636                      .LOUT:	
     820:  01:4636  ED 79               	OUT [C], A
     821:  01:4638  0C                  	INC C
     822:  01:4639  ED A3               	OUTI 
     823:  01:463B  0D                  	DEC C
     824:  01:463C  3C                  	INC A
     825:  01:463D  FE 0D               	CP 13
     826:  01:463F  20 F5               	JR NZ, .LOUT
     827:  01:4641  ED 79               	OUT [C],A
     828:  01:4643  7E                  	LD A,[HL]
     829:  01:4644  A7                  	AND A
     830:  01:4645  F8                  	RET M
     831:  01:4646  0C                  	INC C
     832:  01:4647  ED 79               	OUT [C],A
     833:  01:4649  C9                  	RET
     834:  01:464A                      ;-----------------------------------------------------------
     835:  01:464A                      
     836:  01:464A                      @EMPTYSAMORN:
     837:  01:464A  00 01 00 90         	DB 0,1,0,$90 ; delete $90 if you don't need default sample
     838:  01:464E                      
     839:  01:464E                      ; Note table 2 [if you use another in Vortex Tracker II copy it and paste it from TABLES.TXT]
     840:  01:464E                      PT3_NT_	
     841:  01:464E                      	DW $0D10,$0C55,$0BA4,$0AFC,$0A5F,$09CA,$093D,$08B8,$083B,$07C5,$0755,$06EC
     841:  01:464E  10 0D 55 0C A4 0B FC 0A 5F 0A CA 09 3D 09 B8 08 
     841:  01:465E  3B 08 C5 07 55 07 EC 06 
     842:  01:4666                      	DW $0688,$062A,$05D2,$057E,$052F,$04E5,$049E,$045C,$041D,$03E2,$03AB,$0376
     842:  01:4666  88 06 2A 06 D2 05 7E 05 2F 05 E5 04 9E 04 5C 04 
     842:  01:4676  1D 04 E2 03 AB 03 76 03 
     843:  01:467E                      	DW $0344,$0315,$02E9,$02BF,$0298,$0272,$024F,$022E,$020F,$01F1,$01D5,$01BB
     843:  01:467E  44 03 15 03 E9 02 BF 02 98 02 72 02 4F 02 2E 02 
     843:  01:468E  0F 02 F1 01 D5 01 BB 01 
     844:  01:4696                      	DW $01A2,$018B,$0174,$0160,$014C,$0139,$0128,$0117,$0107,$00F9,$00EB,$00DD
     844:  01:4696  A2 01 8B 01 74 01 60 01 4C 01 39 01 28 01 17 01 
     844:  01:46A6  07 01 F9 00 EB 00 DD 00 
     845:  01:46AE                      	DW $00D1,$00C5,$00BA,$00B0,$00A6,$009D,$0094,$008C,$0084,$007C,$0075,$006F
     845:  01:46AE  D1 00 C5 00 BA 00 B0 00 A6 00 9D 00 94 00 8C 00 
     845:  01:46BE  84 00 7C 00 75 00 6F 00 
     846:  01:46C6                      	DW $0069,$0063,$005D,$0058,$0053,$004E,$004A,$0046,$0042,$003E,$003B,$0037
     846:  01:46C6  69 00 63 00 5D 00 58 00 53 00 4E 00 4A 00 46 00 
     846:  01:46D6  42 00 3E 00 3B 00 37 00 
     847:  01:46DE                      	DW $0034,$0031,$002F,$002C,$0029,$0027,$0025,$0023,$0021,$001F,$001D,$001C
     847:  01:46DE  34 00 31 00 2F 00 2C 00 29 00 27 00 25 00 23 00 
     847:  01:46EE  21 00 1F 00 1D 00 1C 00 
     848:  01:46F6                      	DW $001A,$0019,$0017,$0016,$0015,$0014,$0012,$0011,$0010,$000F,$000E,$000D
     848:  01:46F6  1A 00 19 00 17 00 16 00 15 00 14 00 12 00 11 00 
     848:  01:4706  10 00 0F 00 0E 00 0D 00 
     849:  01:470E                      
     850:  01:470E                      	ENDMODULE PT3_REPLAYER
     851:  01:470E                      ;-----------------------------------------------------------
     852:  01:470E                      ;| ------------------------------------------------------- |
     853:  01:470E                      ;| |                      F I N                          | |
     854:  01:470E                      ;| ------------------------------------------------------- |
     855:  01:470E                      ;-----------------------------------------------------------
      14.  01:470E                      
      15.  01:470E                      ; SONIDO_BIOS=1	; Se usan las funciones de la BIOS
      16.  01:470E                      ;SONIDO_BIOS=0	; No se usa la BIOS para nada.
      17.  01:470E                      
      18.  01:470E                      ; AÑADIDO PARA SOPORTE 50 Y 60 HZ
      19.  01:470E  (01:C18B)           PT3_HERCIOS	#	1	; 50Hz = $80 <-> 60Hz = $00
      20.  01:470E  (01:C18C)           PT3_60_50:	#	1
      21.  01:470E  (01:C18D)           PT3_AYREGS_BAK:	#	14
      22.  01:470E                      
      23.  01:470E                      ;-----------------------------------------------------------
      24.  01:470E                      @INICIA_SONIDO:
      25.  01:470E                      ; Entrada:	A	La frecuencia SONIDO_50HZ | SONIDO_60HZ
      26.  01:470E                      ; Salida:	--
      27.  01:470E                      ;-----------------------------------------------------------
      28.  01:470E  32 8B C1            	LD 	[PT3_HERCIOS], A	; ASOPORTE 50 Y 60 HZ
      29.  01:4711                      ;	CALL	PARA_MUSICA
      30.  01:4711                      ;	CALL	PARA_SONIDO
      31.  01:4711  CD 24 47            	CALL	QUITA_SONIDO
      32.  01:4714  AF                  	XOR	A			; A = 0;
      33.  01:4715  32 8C C1            	LD 	[PT3_60_50], A
      34.  01:4718  3A 8B C1            	LD 	A, [PT3_HERCIOS]	; ASOPORTE 50 Y 60 HZ
      35.  01:471B  E6 80               	AND 	$80
      36.  01:471D  C0                  	RET NZ
      37.  01:471E  3E 06               	LD	A, 6
      38.  01:4720  32 8C C1            	LD	[PT3_60_50], A		; FIN SOPORTE 50 Y 60 Hz	
      39.  01:4723  C9                  	RET
      40.  01:4724                      ;-----------------------------------------------------------
      41.  01:4724                      
      42.  01:4724                      ;-----------------------------------------------------------
      43.  01:4724                      @QUITA_SONIDO:
      44.  01:4724  F3                  	DI
      45.  01:4725  CD 6C 47            	CALL	PARA_MUSICA
      46.  01:4728  CD 81 47            	CALL	PARA_SONIDO
      47.  01:472B  CD 34 47            	CALL	LIMPIA_SONIDO
      48.  01:472E  FB                  	EI
      49.  01:472F  CD 90 00            	CALL 	GICINI			; initialize PSG (GICINI = $0090)
      50.  01:4732  76                  	HALT
      51.  01:4733  C9                  	RET
      52.  01:4734                      ;-----------------------------------------------------------
      53.  01:4734                      
      54.  01:4734                      ;-----------------------------------------------------------
      55.  01:4734                      LIMPIA_SONIDO:
      56.  01:4734                      ; Borra los buffer de sonido y actualiza los registros  PSG 
      57.  01:4734                      ; para que no se escuche pitidos
      58.  01:4734                      ; Requisitos:	Desactivar las interrupciones.
      59.  01:4734                      ;-----------------------------------------------------------
      60.  01:4734  21 00 00            	LD	HL, 0
      61.  01:4737  22 8B C0            	LD	[PT3_AYREGS+0], HL
      62.  01:473A  22 8D C0            	LD	[PT3_AYREGS+2], HL
      63.  01:473D  22 8F C0            	LD	[PT3_AYREGS+4], HL
      64.  01:4740  22 91 C0            	LD	[PT3_AYREGS+6], HL
      65.  01:4743  22 93 C0            	LD	[PT3_AYREGS+8], HL
      66.  01:4746  22 95 C0            	LD	[PT3_AYREGS+10], HL
      67.  01:4749  22 97 C0            	LD	[PT3_AYREGS+12], HL
      68.  01:474C  21 8B C0            	LD	HL, PT3_AYREGS
      69.  01:474F  11 8D C1            	LD	DE, PT3_AYREGS_BAK
      70.  01:4752  01 0E 00            	LD	BC, 14
      71.  01:4755  ED B0               	LDIR
      72.  01:4757  CD 29 46            	CALL	PT3_ROUT
      73.  01:475A  C9                  	RET
      74.  01:475B                      ;-----------------------------------------------------------
      75.  01:475B                      
      76.  01:475B                      ;-----------------------------------------------------------
      77.  01:475B                      @ACTUALIZA_SONIDO:
      78.  01:475B                      ; Requisitos:	Desactivar las interrupciones.
      79.  01:475B                      ;-----------------------------------------------------------
      80.  01:475B  CD 29 46            	CALL	PT3_ROUT	; Write values on PSG registers
      81.  01:475E                      ;	CALL	PT3_PLAY	; Calculates PSG values for next frame
      82.  01:475E  CD 87 47            	CALL	PT3_PLAYMUSIC	; Mejora PT3_PLAY dando soporte a 60Hz
      83.  01:4761  CD D0 40            	CALL	ayFX_PLAY	; Fx
      84.  01:4764  C9                  	RET
      85.  01:4765                      ;-----------------------------------------------------------
      86.  01:4765                      
      87.  01:4765                      ;-----------------------------------------------------------
      88.  01:4765                      @REPRODUCE_MUSICA:
      89.  01:4765                      ; Entradas:	A	0 con bucle y 1 sin bucle
      90.  01:4765                      ;		HL	Módulo PT3
      91.  01:4765                      ;-----------------------------------------------------------
      92.  01:4765  32 0D C0            	LD	[PT3_SETUP], A
      93.  01:4768  CD 83 41            	CALL	PT3_INIT	; Inits PT3 player
      94.  01:476B  C9                  	RET
      95.  01:476C                      ;-----------------------------------------------------------
      96.  01:476C                      
      97.  01:476C                      ;-----------------------------------------------------------
      98.  01:476C                      @PARA_MUSICA:
      99.  01:476C                      ;-----------------------------------------------------------
     100.  01:476C  3E 01               	LD	A, 1		 ; A=0 con bucle; A=1 sin bucle
     101.  01:476E  32 0D C0            	LD	[PT3_SETUP], A
     102.  01:4771  21 4A 46            	LD	HL, EMPTYSAMORN
     103.  01:4774  CD 83 41            	CALL	PT3_INIT
     104.  01:4777  C9                  	RET
     105.  01:4778                      ;-----------------------------------------------------------
     106.  01:4778                      
     107.  01:4778                      ;-----------------------------------------------------------
     108.  01:4778                      @REPRODUCE_SONIDO:
     109.  01:4778                      ;-----------------------------------------------------------
     110.  01:4778                      ; Entrada:	HL	Modulo AFB
     111.  01:4778                      ;		C	Prioridad [0~15]
     112.  01:4778                      ; Salida:	--
     113.  01:4778                      ; Registros:	AF
     114.  01:4778                      ;-----------------------------------------------------------
     115.  01:4778  CD 89 40            	CALL	ayFX_SETUP
     116.  01:477B  3E 00               	LD	A, 0		; Num. sample [0~255]
     117.  01:477D  CD 9A 40            	CALL	ayFX_INIT
     118.  01:4780  C9                  	RET
     119.  01:4781                      ;-----------------------------------------------------------	
     120.  01:4781                      
     121.  01:4781                      ;-----------------------------------------------------------
     122.  01:4781                      @PARA_SONIDO:
     123.  01:4781                      ;-----------------------------------------------------------
     124.  01:4781  3E FF               	LD	A, 255			; Lowest ayFX priority
     125.  01:4783  32 05 C0            	LD	[ayFX_PRIORITY], A	; Priority saved (not playing ayFX stream)
     126.  01:4786  C9                  	RET
     127.  01:4787                      ;-----------------------------------------------------------
     128.  01:4787                      
     129.  01:4787                      ;-----------------------------------------------------------
     130.  01:4787                      PT3_PLAYMUSIC:
     131.  01:4787                      ; AÑADIDO PARA SOPORTE 50 Y 60 HZ
     132.  01:4787                      ;-----------------------------------------------------------
     133.  01:4787  3A 8B C1            	LD	A, [PT3_HERCIOS]
     134.  01:478A  E6 80               	AND	128
     135.  01:478C  C2 31 45            	JP NZ,	PT3_PLAY
     136.  01:478F  3A 8C C1            	LD 	A, [PT3_60_50]
     137.  01:4792  3D                  	DEC 	A
     138.  01:4793  32 8C C1            	LD 	[PT3_60_50], A
     139.  01:4796  CA A8 47            	JP Z,	.RESTORECOPY
     140.  01:4799  CD 31 45            	CALL 	PT3_PLAY
     141.  01:479C  21 8B C0            	LD 	HL, PT3_AYREGS
     142.  01:479F  11 8D C1            	LD 	DE, PT3_AYREGS_BAK
     143.  01:47A2  01 0E 00            	LD 	BC, 14
     144.  01:47A5  ED B0               	LDIR
     145.  01:47A7  C9                  	RET
     146.  01:47A8                      .RESTORECOPY:
     147.  01:47A8  3E 06               	LD 	A, 6
     148.  01:47AA  32 8C C1            	LD	[PT3_60_50], A
     149.  01:47AD  21 8D C1            	LD	HL, PT3_AYREGS_BAK
     150.  01:47B0  11 8B C0            	LD	DE, PT3_AYREGS
     151.  01:47B3  01 0E 00            	LD	BC, 14
     152.  01:47B6  ED B0               	LDIR
     153.  01:47B8  C9                  	RET
     154.  01:47B9                      ;-----------------------------------------------------------
     155.  01:47B9                      
     156.  01:47B9                      	ENDMODULE SONIDO
     157.  01:47B9                      ;-----------------------------------------------------------
     158.  01:47B9                      ;| ------------------------------------------------------- |
     159.  01:47B9                      ;| |                      F I N                          | |
     160.  01:47B9                      ;| ------------------------------------------------------- |
     161.  01:47B9                      ;-----------------------------------------------------------
     162.  01:47B9                      
      39   01:47B9                      
      40   01:47B9                      ACTIVA_BIOS
      41   01:47B9  CD 54 40            	CALL	RESTOREBIOS
      42   01:47BC  FB                  	EI
      43   01:47BD  C9                  	RET
      44   01:47BE                      	
      45   01:47BE                      QUITA_BIOS
      46   01:47BE  F3                  	DI
      47   01:47BF  CD 4E 40            	CALL	SETGAMEPAGE0
      48   01:47C2  C9                  	RET
      49   01:47C3                      	
      50   01:47C3                      ENGANCHA	; Engancha una función a ejecutar por cada interrupción de VDP.
      51   01:47C3  F3                  	DI	; Entrada:	LD	HL, FUNCION
      52   01:47C4  3E C3               	LD 	A, $C3		; ASMCODE_JP
      53   01:47C6  32 9F FD            	LD	[TIMI], A
      54   01:47C9  22 A0 FD            	LD	[TIMI+1], HL
      55   01:47CC  FB                  	EI
      56   01:47CD  C9                  	RET
      57   01:47CE                      	
      58   01:47CE                      DESENGANCHA
      59   01:47CE  F3                  	DI
      60   01:47CF  3E C9               	LD 	A, $C9		; ASMCODE_RET
      61   01:47D1  32 9F FD            	LD	[TIMI], A
      62   01:47D4  32 A0 FD            	LD	[TIMI+1], A
      63   01:47D7  FB                  	EI
      64   01:47D8  C9                  	RET
      65   01:47D9                      	
      66   01:47D9                      ;-----------------------------------------------------------
      67   01:47D9                      ; DEFINIR CONTANTES PARA EL USUARIO
      68   01:47D9                      ;-----------------------------------------------------------	
      69   01:47D9  (01:0028)           ANCHO	=	40 	; Constante ANCHO=40
      70   01:47D9  (01:0017)           ALTO	=	23	; Constante ALTO=23
      71   01:47D9  41 44 49 4F 53 00   TEXTO	DB "ADIOS", 0
      72   01:47DF                      TEXTO_DES_MUSICA DB "DESCOMPRIMIENDO LA MUSICA", 0
      72   01:47DF  44 45 53 43 4F 4D 50 52 49 4D 49 45 4E 44 4F 20 
      72   01:47EF  4C 41 20 4D 55 53 49 43 41 00 
      73   01:47F9                      
      74   01:47F9                      ;---------------------------------------------------------
      75   01:47F9                      ; VARIABLES EN 16K DE RAM A PARTIR DE $C000:
      76   01:47F9                      ;---------------------------------------------------------
      77   01:47F9  (01:C19B)           VARIABLE  # 1		; Variable de 1 Byte
      78   01:47F9  (01:C19C)           VARIABLE2 # 2		; Variable de 2 Bytes.
      79   01:47F9  (01:C19E)           BUFFER    # 2048	; Un bonito buffer de 256 Bytes
      80   01:47F9                      
      81   01:47F9                      ;-----------------------------------------------------------
      82   01:47F9                      ; ETIQUETAS:			TIEMPO
      83   01:47F9                      ;	INSTRUCCIONES			COMENTARIOS
      84   01:47F9                      ;-----------------------------------------------------------
      85   01:47F9                      INICIO
      86   01:47F9  F3                  	DI
      87   01:47FA  ED 56               	IM	1		; ACTIVAR EL MODO DE INTERRUPCIÓN 1
      88   01:47FC  ED 7B 4A FC         	LD	SP,  [HIMEM] 	; [HIMEM] = [$FC4A]
      89   01:4800  CD 3B 40            	CALL	SETPAGES48K
      90   01:4803  CD 54 40            	CALL	RESTOREBIOS
      91   01:4806  FB                  	EI
      92   01:4807                      
      93   01:4807                      ; MOSTRAMOS TEXTO EN PANTALLA:
      94   01:4807  3E 28               	LD	A, 40		; A=40
      95   01:4809  32 AE F3            	LD	[LINL40], A	; Definimos 40 como ancho de línea.
      96   01:480C  CD 6C 00            	CALL	INITXT		; SCREEN 0 texto de 40 x 24 con 2 colores
      97   01:480F  BF                  	CP	A		; (A-A)==0 -> Z=1
      98   01:4810  CD C3 00            	CALL	CLS 		; Limpia la pantalla machaca AF, BC y DE
      99   01:4813  26 0A               	LD	H , 10		; Situamos la Columna X
     100   01:4815  2E 0A               	LD	L , 10		; y la Fila Y para 
     101   01:4817  CD C6 00            	CALL	POSIT		; fijar el cursor a escribir.
     102   01:481A  21 DF 47            	LD	HL, TEXTO_DES_MUSICA
     103   01:481D  CD 9F 49            	CALL	PRINTXT
     104   01:4820                      
     105   01:4820                      ; DESCOMPRIMIMOS LA MUSICA
     106   01:4820  CD BE 47            	CALL	QUITA_BIOS
     107   01:4823  21 7D 01            	LD	HL, musica01
     108   01:4826  11 9E C1            	LD	DE, BUFFER
     109   01:4829  CD 02 00            	CALL	DEPLETTER
     110   01:482C  CD B9 47            	CALL	ACTIVA_BIOS
     111   01:482F                      	
     112   01:482F                      ; INICIAMOS EL SONIDO A 50Hz
     113   01:482F  3E 80               	LD	A, SONIDO_50HZ
     114   01:4831  CD 0E 47            	CALL	INICIA_SONIDO
     115   01:4834  3E 00               	LD	A, 0			; 0 con bucle y 1 sin bucle
     116   01:4836  21 9E C1            	LD	HL, BUFFER		; En página 0 así que hay que quitar la bios
     117   01:4839  CD 65 47            	CALL	REPRODUCE_MUSICA
     118   01:483C  21 5B 47            	LD	HL, ACTUALIZA_SONIDO
     119   01:483F  CD C3 47            	CALL	ENGANCHA
     120   01:4842                      
     121   01:4842                      ; IMPRIMIMOS CARACTERES POR TODA LA PANTALLA
     122   01:4842  16 41               	LD	D, 'A'		; D='A'
     123   01:4844                      .BUCLE				; Etiqueta local
     124   01:4844  CD 87 49            	CALL	IMPRIME		; Imprimir la pantalla
     125   01:4847  14                  	INC	D		; ++D;
     126   01:4848  3E 5B               	LD	A, 'Z'+1	; A='Z'+1
     127   01:484A  32 9B C1            	LD	[VARIABLE], A
     128   01:484D  3A 9B C1            	LD	A, [VARIABLE]
     129   01:4850  BA                  	CP	D		; (A-D)
     130   01:4851  C2 44 48            	JP	NZ, .BUCLE	; if(A!=0) goto .BUCLE;
     131   01:4854                      
     132   01:4854                      ; QUITAMOS LA MUSICA:
     133   01:4854  CD CE 47            	CALL	DESENGANCHA	; Primero desenganchar la funcion
     134   01:4857  CD 24 47            	CALL	QUITA_SONIDO	; Limpiar el sonido que quede.
     135   01:485A                      	
     136   01:485A                      ; MOSTRAMOS UNA IMAGEN EN PANTALLA
     137   01:485A  CD 72 00            	CALL	INIGRP
     138   01:485D  CD BE 47            	CALL	QUITA_BIOS
     139   01:4860  21 0D 04            	LD	HL, labbaymsx_chr
     140   01:4863  11 00 00            	LD	DE, CHRTBL
     141   01:4866  CD AC 00            	CALL	DEPLETTER_VRAM
     142   01:4869  21 A5 18            	LD	HL, labbaymsx_clr
     143   01:486C  11 00 20            	LD	DE, CLRTBL
     144   01:486F  CD AC 00            	CALL	DEPLETTER_VRAM
     145   01:4872  CD B9 47            	CALL	ACTIVA_BIOS
     146   01:4875                      	
     147   01:4875                      ; ESPERAMOS 5 SEGUNDOS:
     148   01:4875                      [250]	HALT
     148   01:4875  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:4885  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:4895  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:48A5  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:48B5  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:48C5  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:48D5  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:48E5  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:48F5  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:4905  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:4915  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:4925  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:4935  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:4945  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:4955  76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 
     148   01:4965  76 76 76 76 76 76 76 76 76 76 
     149   01:496F                      
     150   01:496F                      ; MOSTRAMOS MENSAGE DE ADIOS:
     151   01:496F  CD 6C 00            	CALL	INITXT		; SCREEN 0 texto de 40 x 24 con 2 colores
     152   01:4972  BF                  	CP	A		; (A-A)==0 -> Z=1
     153   01:4973  CD C3 00            	CALL	CLS 		; Limpia la pantalla machaca AF, BC y DE
     154   01:4976  26 0F               	LD	H , 15		; Situamos la Columna X
     155   01:4978  2E 0A               	LD	L , 10		; y la Fila Y para 
     156   01:497A  CD C6 00            	CALL	POSIT		; fijar el cursor a escribir.
     157   01:497D  21 D9 47            	LD	HL, TEXTO
     158   01:4980  CD 9F 49            	CALL	PRINTXT
     159   01:4983                      
     160   01:4983                      ; FINAL
     161   01:4983                      FINAL
     162   01:4983  76                  	HALT
     163   01:4984  C3 83 49            	JP	FINAL
     164   01:4987                      	
     165   01:4987                      ;---------------------------------------------------------
     166   01:4987                      IMPRIME
     167   01:4987                      ; RUTINA QUE IMPRIME EL TEXTO EN PANTALLA
     168   01:4987                      ; ENTRADAS: 	D
     169   01:4987                      ; MODIFICA:		AF, BC, y  HL
     170   01:4987                      ;---------------------------------------------------------
     171   01:4987  26 01               	LD	H , 1		; H=1;		Situamos la Columna X
     172   01:4989  2E 01               	LD	L , 1		; L=1;		y la Fila Y para 
     173   01:498B  CD C6 00            	CALL	POSIT		; fijar el cursor a escribir.
     174   01:498E  7A                  	LD	A, D		; A=D;		El carácter a imprimir.
     175   01:498F  06 28               	LD	B, ANCHO	; B=ANCHO;
     176   01:4991  0E 17               	LD	C, ALTO		; C=ALTO;
     177   01:4993                      .BUCLE
     178   01:4993  CD A2 00            	CALL	CHPUT		; Escribimos el carácter contenido en A.
     179   01:4996  10 FB               	DJNZ	.BUCLE		; --B; if(B!=0) goto .BUCLE;
     180   01:4998  06 28               	LD	B, ANCHO	; B=ANCHO;
     181   01:499A  0D                  	DEC	C		; --C;		Decrementamos ALTO.
     182   01:499B  C2 93 49            	JP	NZ, .BUCLE	; if(C!=0) goto .BUCLE;
     183   01:499E  C9                  	RET			; FIN
     184   01:499F                      
     185   01:499F                      ; ----------------------------------------------------------
     186   01:499F                      PRINTXT
     187   01:499F                      ; Imprime una cadena de texto terminada en cero.
     188   01:499F                      ; Entrada:	HL
     189   01:499F                      ; Salida:	--
     190   01:499F                      ; Registros:	AF y HL
     191   01:499F                      ; Ejemplo:
     192   01:499F                      ;	LD	H, posX
     193   01:499F                      ;	LD	L, posY
     194   01:499F                      ;	CALL	POSIT
     195   01:499F                      ;	LD	HL, BUFFER
     196   01:499F                      ;	CALL	PRINTXT
     197   01:499F                      ; ----------------------------------------------------------
     198   01:499F                      .BUCLE
     199   01:499F  7E                  	LD	A, [HL]		; Cogemos el primer carácter.
     200   01:49A0  B7                  	OR	A		; CP A, 0
     201   01:49A1  C8                  	RET	Z		; Si cero return
     202   01:49A2  CD A2 00            	CALL	CHPUT		; escribimos el caracter
     203   01:49A5  23                  	INC	HL 		; ++HL
     204   01:49A6  18 F7               	JR	.BUCLE		; Si no fin goto @@BUCLE
     205   01:49A8                      ; ----------------------------------------------------------
     206   01:49A8                      
     207   01:49A8                      
     208   01:49A8                      
     209   01:49A8                      ;---------------------------------------------------------
     210   01:49A8                      ; FIN DEL PROGRAMA:
     211   01:49A8                      ;---------------------------------------------------------
     212   01:49A8                      	PRINTSTRDEC "Memoria ROM0 (16K) consumida = ", fin_de_rom0 - $0000
     213   01:49A8                      	PRINTSTRDEC "Memoria ROM0 (16K) libre     = ", $4000 - ( fin_de_rom0 - $0000 )
     214   01:49A8                      	
     215   01:49A8                      fin_de_rom1
     216   01:49A8                      	PRINTSTRDEC "Memoria ROM1 (32K) consumida = ", fin_de_rom1 - $4000
     217   01:49A8                      	PRINTSTRDEC "Memoria ROM1 (32K) libre     = ", $8000 - ( fin_de_rom1 - $4000 )
     218   01:49A8                      	
     219   01:49A8  (01:C99E)           fin_de_ram # 0
     220   01:49A8                      	PRINTSTRDEC "Memoria RAM  (16K) consumida = ", fin_de_ram - $C000
     221   01:49A8                      	PRINTSTRDEC "Memoria RAM  (16K) libre     = ", $4000 - ( fin_de_ram - $C000 )
     222   01:49A8                      	
     223   01:49A8  (0000)              	ENDMAP		; FIN DEL MAPA DE MEMORIA
     224   01:49A8                      	END		; FIN DE PROGRAMA


 Salida: ejemplo.rom
-------------------------------------------------

 Página: 00
  Org: 00000000  Tamaño: 00004000  Usado: 00002A0E

   Dirección Alineación     Etiqueta
   00000000   10766     @   DEPLETTER
   00002A0E    5618       <vacio>

 Página: 01
  Org: 00004000  Tamaño: 00008000  Usado: 000009A8

   Dirección Alineación     Etiqueta
   00004000    2472     @   GETSLOT
   000049A8   30296       <vacio>
